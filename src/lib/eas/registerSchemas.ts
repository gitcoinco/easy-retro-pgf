import "dotenv/config";
import { ethers } from "ethers";
import { formatEther } from "ethers/lib/utils";
import {
  SchemaRegistry,
  ZERO_ADDRESS,
  getSchemaUID,
} from "@ethereum-attestation-service/eas-sdk";
import type { SignerOrProvider } from "@ethereum-attestation-service/eas-sdk/dist/transaction";

import { eas, config } from "~/config";

/*
This file defines and registers the EAS schemas. 

Each schema's UID is generated by hashing the schema string, resolver address and revocable boolean.
This means applications, profiles and lists share the same schema and are differentiated by the type.


Run: npx tsx src/lib/eas/registerSchemas
*/

const approvalSchema = "bytes32 type, bytes32 round";
const metadataSchema =
  "string name, string metadataPtr, uint256 metadataType, bytes32 type, bytes32 round";

const schemas = [
  { name: "Voter Approval", schema: approvalSchema },
  { name: "Application Approval", schema: approvalSchema },
  { name: "Application Metadata", schema: metadataSchema },
  { name: "Profile Metadata", schema: metadataSchema },
  { name: "List Metadata", schema: metadataSchema },
];

const wallet = new ethers.Wallet(process.env.WALLET_PRIVATE_KEY!).connect(
  new ethers.providers.AlchemyProvider(
    config.network.network,
    process.env.NEXT_PUBLIC_ALCHEMY_ID,
  ),
);

const schemaRegistry = new SchemaRegistry(eas.contracts.schemaRegistry);
schemaRegistry.connect(wallet as unknown as SignerOrProvider);

export async function registerSchemas() {
  console.log("Balance: ", await wallet.getBalance().then(formatEther));
  return Promise.all(
    schemas.map(async ({ name, schema }) => {
      console.log(`Registering schema: ${name}`);

      const exists = await schemaRegistry
        .getSchema({
          uid: getSchemaUID(schema, ZERO_ADDRESS, true),
        })
        .catch();
      console.log("exists", exists);
      if (exists) return { name, ...exists };

      return schemaRegistry
        .register({ schema, revocable: true })
        .then(async (tx) => ({ name, uid: await tx.wait() }));
    }),
  ).then((registered) => {
    console.log(`Schemas registered!`);
    registered.forEach((schema) =>
      console.log(`  ${schema.name}: ${schema.uid}`),
    );

    return registered;
  });
}

registerSchemas().catch(console.log);
