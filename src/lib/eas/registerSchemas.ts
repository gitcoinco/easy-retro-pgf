import "dotenv/config";
import { SchemaRegistry } from "@ethereum-attestation-service/eas-sdk";
import { type Address, formatEther, publicActions } from "viem";
import { createWalletClient, http } from "viem";
import { privateKeyToAccount } from "viem/accounts";
import * as allChains from "viem/chains";
import { getContracts } from "./createEAS";
import { clientToSigner } from "~/hooks/useEthersSigner";

const account = privateKeyToAccount(process.env.WALLET_PRIVATE_KEY as Address);
const contracts = getContracts(process.env.NETWORK!);
const chain = allChains[process.env.NETWORK as keyof typeof allChains];
if (!chain)
  throw new Error(
    "Environment variable NETWORK must be set to a valid network",
  );

const client = createWalletClient({
  account,
  chain,
  transport: http(),
}).extend(publicActions);

/*
This file defines and registers the EAS schemas. 

Each schema's UID is generated by hashing the schema string, resolver address and revocable boolean.
This means applications, profiles and lists share the same schema and are differentiated by the type.


Run: npx tsx src/lib/eas/registerSchemas
*/

const approvalSchema = "bytes32 type, bytes32 round";
const metadataSchema =
  "string name, string metadataPtr, uint256 metadataType, bytes32 type, bytes32 round";

const schemas = [
  { name: "Approval", schema: approvalSchema },
  { name: "Metadata", schema: metadataSchema },
];

const schemaRegistry = new SchemaRegistry(contracts.registry);
schemaRegistry.connect(clientToSigner(client));

export async function registerSchemas() {
  console.log(
    "Balance: ",
    await client.getBalance({ address: account.address }).then(formatEther),
  );
  return Promise.all(
    schemas.map(async ({ name, schema }) => {
      console.log(`Registering schema: ${name}`);

      return schemaRegistry
        .register({ schema, revocable: true })
        .then(async (tx) => ({ name, uid: await tx.wait() }));
    }),
  ).then((registered) => {
    console.log(`Schemas registered!`);
    registered.forEach((schema) =>
      console.log(`  ${schema.name}: ${schema.uid}`),
    );

    return registered;
  });
}

registerSchemas().catch(console.log);
