const osoData = {
  metadata: {
    dbt_schema_version: "https://schemas.getdbt.com/dbt/manifest/v12.json",
    dbt_version: "1.8.2",
    generated_at: "2024-07-03T03:51:14.311960Z",
    invocation_id: "7724e317-e088-4a34-bf30-43a7e45af25f",
    env: {},
    project_name: "opensource_observer",
    project_id: "8f48f6fede205e63b0e0d68bc612efd0",
    user_id: "ac7075cd-7f25-4022-a864-605ce97f1c46",
    send_anonymous_usage_stats: true,
    adapter_type: "bigquery",
  },
  nodes: {
    "model.opensource_observer.projects_by_collection_v1": {
      database: "opensource-observer",
      schema: "oso",
      name: "projects_by_collection_v1",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/directory/projects_by_collection_v1.sql",
      original_file_path:
        "warehouse/dbt/models/marts/directory/projects_by_collection_v1.sql",
      unique_id: "model.opensource_observer.projects_by_collection_v1",
      fqn: [
        "opensource_observer",
        "marts",
        "directory",
        "projects_by_collection_v1",
      ],
      alias: "projects_by_collection_v1",
      checksum: {
        name: "sha256",
        checksum:
          "fc6e633182541ef937b843696409ac6fc142047294c48ae7bf60416e0f976df5",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {
          index: {
            idx_project_id: ["project_id"],
            idx_collection_name: [
              "collection_source",
              "collection_namespace",
              "collection_name",
            ],
            idx_collection_id: ["collection_id"],
          },
          sync_to_db: true,
        },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {
        index: {
          idx_project_id: ["project_id"],
          idx_collection_name: [
            "collection_source",
            "collection_namespace",
            "collection_name",
          ],
          idx_collection_id: ["collection_id"],
        },
        sync_to_db: true,
      },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "table",
        meta: {
          index: {
            idx_project_id: ["project_id"],
            idx_collection_name: [
              "collection_source",
              "collection_namespace",
              "collection_name",
            ],
            idx_collection_id: ["collection_id"],
          },
          sync_to_db: true,
        },
      },
      created_at: 1719978675.3453548,
      relation_name: "`opensource-observer`.`oso`.`projects_by_collection_v1`",
      raw_code:
        "{{ \n  config(meta = {\n    'sync_to_db': True,\n    'index': {\n      'idx_collection_id': [\"collection_id\"],\n      'idx_collection_name': [\"collection_source\", \"collection_namespace\", \"collection_name\"],\n      'idx_project_id': [\"project_id\"],\n    }\n  }) \n}}\nselect\n  projects_by_collection.project_id,\n  projects_by_collection.project_source,\n  projects_by_collection.project_namespace,\n  projects_by_collection.project_name,\n  collections.collection_id,\n  collections.collection_source,\n  collections.collection_namespace,\n  collections.collection_name\nfrom {{ ref('int_projects_by_collection') }} as projects_by_collection\nleft join {{ ref('int_collections') }} as collections\n  on projects_by_collection.collection_id = collections.collection_id",
      language: "sql",
      refs: [
        { name: "int_projects_by_collection", package: null, version: null },
        { name: "int_collections", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_projects_by_collection",
          "model.opensource_observer.int_collections",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/directory/projects_by_collection_v1.sql",
      compiled: true,
      compiled_code:
        "\nselect\n  projects_by_collection.project_id,\n  projects_by_collection.project_source,\n  projects_by_collection.project_namespace,\n  projects_by_collection.project_name,\n  collections.collection_id,\n  collections.collection_source,\n  collections.collection_namespace,\n  collections.collection_name\nfrom `opensource-observer`.`oso`.`int_projects_by_collection` as projects_by_collection\nleft join `opensource-observer`.`oso`.`int_collections` as collections\n  on projects_by_collection.collection_id = collections.collection_id",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.users_v1": {
      database: "opensource-observer",
      schema: "oso",
      name: "users_v1",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/directory/users_v1.sql",
      original_file_path: "warehouse/dbt/models/marts/directory/users_v1.sql",
      unique_id: "model.opensource_observer.users_v1",
      fqn: ["opensource_observer", "marts", "directory", "users_v1"],
      alias: "users_v1",
      checksum: {
        name: "sha256",
        checksum:
          "c2dcde678d337a0318327d8771b5ab7a3fbe4bd6f9eae9bf51a8b720c6c2292a",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {
          sync_to_db: true,
          index: {
            idx_user_id: ["user_id"],
            idx_source_id: ["user_source", "user_source_id"],
          },
        },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {
        sync_to_db: true,
        index: {
          idx_user_id: ["user_id"],
          idx_source_id: ["user_source", "user_source_id"],
        },
      },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "table",
        meta: {
          sync_to_db: true,
          index: {
            idx_user_id: ["user_id"],
            idx_source_id: ["user_source", "user_source_id"],
          },
        },
      },
      created_at: 1719978675.3708403,
      relation_name: "`opensource-observer`.`oso`.`users_v1`",
      raw_code:
        "{{ \n  config(meta = {\n    'sync_to_db': True,\n    'index': {\n      'idx_user_id': [\"user_id\"],\n      'idx_source_id': [\"user_source\", \"user_source_id\"],\n    }\n  }) \n}}\n\nselect\n  users.user_id,\n  users.user_source_id,\n  users.user_source,\n  users.display_name,\n  users.profile_picture_url,\n  users.bio,\n  users.url\nfrom {{ ref('int_users') }} as users",
      language: "sql",
      refs: [{ name: "int_users", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_users"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/directory/users_v1.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  users.user_id,\n  users.user_source_id,\n  users.user_source,\n  users.display_name,\n  users.profile_picture_url,\n  users.bio,\n  users.url\nfrom `opensource-observer`.`oso`.`int_users` as users",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.artifacts_v1": {
      database: "opensource-observer",
      schema: "oso",
      name: "artifacts_v1",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/directory/artifacts_v1.sql",
      original_file_path:
        "warehouse/dbt/models/marts/directory/artifacts_v1.sql",
      unique_id: "model.opensource_observer.artifacts_v1",
      fqn: ["opensource_observer", "marts", "directory", "artifacts_v1"],
      alias: "artifacts_v1",
      checksum: {
        name: "sha256",
        checksum:
          "099773f6fe3674f90e4e032d6948801856a82e3b16c151bce273391e2d8b1907",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {
          sync_to_db: true,
          index: {
            idx_artifact_name: [
              "artifact_source",
              "artifact_namespace",
              "artifact_name",
            ],
            idx_artifact_id: ["artifact_id"],
          },
        },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {
        sync_to_db: true,
        index: {
          idx_artifact_name: [
            "artifact_source",
            "artifact_namespace",
            "artifact_name",
          ],
          idx_artifact_id: ["artifact_id"],
        },
      },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "table",
        meta: {
          sync_to_db: true,
          index: {
            idx_artifact_name: [
              "artifact_source",
              "artifact_namespace",
              "artifact_name",
            ],
            idx_artifact_id: ["artifact_id"],
          },
        },
      },
      created_at: 1719978675.3733845,
      relation_name: "`opensource-observer`.`oso`.`artifacts_v1`",
      raw_code:
        "{{ \n  config(meta = {\n    'sync_to_db': True,\n    'index': {\n      'idx_artifact_id': [\"artifact_id\"],\n      'idx_artifact_name': [\"artifact_source\", \"artifact_namespace\", \"artifact_name\"],\n    }\n  }) \n}}\n\n{# for now this just copies all of the artifacts data #}\nselect\n  artifact_id,\n  artifact_source_id,\n  artifact_source,\n  artifact_namespace,\n  artifact_name,\n  artifact_url\nfrom {{ ref('int_artifacts') }}",
      language: "sql",
      refs: [{ name: "int_artifacts", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_artifacts"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/directory/artifacts_v1.sql",
      compiled: true,
      compiled_code:
        "\n\n\nselect\n  artifact_id,\n  artifact_source_id,\n  artifact_source,\n  artifact_namespace,\n  artifact_name,\n  artifact_url\nfrom `opensource-observer`.`oso`.`int_artifacts`",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.projects_v1": {
      database: "opensource-observer",
      schema: "oso",
      name: "projects_v1",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/directory/projects_v1.sql",
      original_file_path:
        "warehouse/dbt/models/marts/directory/projects_v1.sql",
      unique_id: "model.opensource_observer.projects_v1",
      fqn: ["opensource_observer", "marts", "directory", "projects_v1"],
      alias: "projects_v1",
      checksum: {
        name: "sha256",
        checksum:
          "97a75c42885dd6cb6fa2d516e8f01d15bf7f0e430a1e6d920eaaa780964481dc",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {
          index: {
            idx_project_id: ["project_id"],
            idx_project_name: [
              "project_source",
              "project_namespace",
              "project_name",
            ],
          },
          sync_to_db: true,
        },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {
        index: {
          idx_project_id: ["project_id"],
          idx_project_name: [
            "project_source",
            "project_namespace",
            "project_name",
          ],
        },
        sync_to_db: true,
      },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "table",
        meta: {
          index: {
            idx_project_id: ["project_id"],
            idx_project_name: [
              "project_source",
              "project_namespace",
              "project_name",
            ],
          },
          sync_to_db: true,
        },
      },
      created_at: 1719978675.375714,
      relation_name: "`opensource-observer`.`oso`.`projects_v1`",
      raw_code:
        "{{ \n  config(meta = {\n    'sync_to_db': True,\n    'index': {\n      'idx_project_id': [\"project_id\"],\n      'idx_project_name': [\"project_source\", \"project_namespace\", \"project_name\"],\n    }\n  }) \n}}\n\nselect\n  projects.project_id,\n  projects.project_source,\n  projects.project_namespace,\n  projects.project_name,\n  projects.display_name,\n  projects.description\nfrom {{ ref('int_projects') }} as projects",
      language: "sql",
      refs: [{ name: "int_projects", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_projects"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/directory/projects_v1.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  projects.project_id,\n  projects.project_source,\n  projects.project_namespace,\n  projects.project_name,\n  projects.display_name,\n  projects.description\nfrom `opensource-observer`.`oso`.`int_projects` as projects",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.collections_v1": {
      database: "opensource-observer",
      schema: "oso",
      name: "collections_v1",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/directory/collections_v1.sql",
      original_file_path:
        "warehouse/dbt/models/marts/directory/collections_v1.sql",
      unique_id: "model.opensource_observer.collections_v1",
      fqn: ["opensource_observer", "marts", "directory", "collections_v1"],
      alias: "collections_v1",
      checksum: {
        name: "sha256",
        checksum:
          "6036956faff080a084635b875b1d0867446c8d0548c0c908fffb4d48d9f34005",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {
          sync_to_db: true,
          index: {
            idx_collection_name: [
              "collection_source",
              "collection_namespace",
              "collection_name",
            ],
            idx_collection_id: ["collection_id"],
          },
        },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {
        sync_to_db: true,
        index: {
          idx_collection_name: [
            "collection_source",
            "collection_namespace",
            "collection_name",
          ],
          idx_collection_id: ["collection_id"],
        },
      },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "table",
        meta: {
          sync_to_db: true,
          index: {
            idx_collection_name: [
              "collection_source",
              "collection_namespace",
              "collection_name",
            ],
            idx_collection_id: ["collection_id"],
          },
        },
      },
      created_at: 1719978675.3806095,
      relation_name: "`opensource-observer`.`oso`.`collections_v1`",
      raw_code:
        "{{ \n  config(meta = {\n    'sync_to_db': True,\n    'index': {\n      'idx_collection_id': [\"collection_id\"],\n      'idx_collection_name': [\"collection_source\", \"collection_namespace\", \"collection_name\"],\n    }\n  }) \n}}\n\nselect\n  collections.collection_id,\n  collections.collection_source,\n  collections.collection_namespace,\n  collections.collection_name,\n  collections.display_name,\n  collections.description\nfrom {{ ref('int_collections') }} as collections",
      language: "sql",
      refs: [{ name: "int_collections", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_collections"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/directory/collections_v1.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  collections.collection_id,\n  collections.collection_source,\n  collections.collection_namespace,\n  collections.collection_name,\n  collections.display_name,\n  collections.description\nfrom `opensource-observer`.`oso`.`int_collections` as collections",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.artifacts_by_project_v1": {
      database: "opensource-observer",
      schema: "oso",
      name: "artifacts_by_project_v1",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/directory/artifacts_by_project_v1.sql",
      original_file_path:
        "warehouse/dbt/models/marts/directory/artifacts_by_project_v1.sql",
      unique_id: "model.opensource_observer.artifacts_by_project_v1",
      fqn: [
        "opensource_observer",
        "marts",
        "directory",
        "artifacts_by_project_v1",
      ],
      alias: "artifacts_by_project_v1",
      checksum: {
        name: "sha256",
        checksum:
          "111e4c68f16a8895f0020b4201118dbcf8e6bf608b114f18795bfadb75e4d182",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {
          index: {
            idx_project_name: [
              "project_source",
              "project_namespace",
              "project_name",
            ],
            idx_artifact_id: ["artifact_id"],
            idx_project_id: ["project_id"],
          },
          sync_to_db: true,
        },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {
        index: {
          idx_project_name: [
            "project_source",
            "project_namespace",
            "project_name",
          ],
          idx_artifact_id: ["artifact_id"],
          idx_project_id: ["project_id"],
        },
        sync_to_db: true,
      },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "table",
        meta: {
          index: {
            idx_project_name: [
              "project_source",
              "project_namespace",
              "project_name",
            ],
            idx_artifact_id: ["artifact_id"],
            idx_project_id: ["project_id"],
          },
          sync_to_db: true,
        },
      },
      created_at: 1719978675.3833022,
      relation_name: "`opensource-observer`.`oso`.`artifacts_by_project_v1`",
      raw_code:
        "{{ \n  config(meta = {\n    'sync_to_db': True,\n    'index': {\n      'idx_project_id': [\"project_id\"],\n      'idx_project_name': [\"project_source\", \"project_namespace\", \"project_name\"],\n      'idx_artifact_id': [\"artifact_id\"],\n    }\n  }) \n}}\n\nselect\n  artifact_id,\n  artifact_source_id,\n  artifact_source,\n  artifact_namespace,\n  artifact_name,\n  project_id,\n  project_source,\n  project_namespace,\n  project_name\nfrom {{ ref('int_artifacts_by_project') }}",
      language: "sql",
      refs: [
        { name: "int_artifacts_by_project", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_artifacts_by_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/directory/artifacts_by_project_v1.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  artifact_id,\n  artifact_source_id,\n  artifact_source,\n  artifact_namespace,\n  artifact_name,\n  project_id,\n  project_source,\n  project_namespace,\n  project_name\nfrom `opensource-observer`.`oso`.`int_artifacts_by_project`",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.contracts_v0": {
      database: "opensource-observer",
      schema: "oso",
      name: "contracts_v0",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/directory/contracts_v0.sql",
      original_file_path:
        "warehouse/dbt/models/marts/directory/contracts_v0.sql",
      unique_id: "model.opensource_observer.contracts_v0",
      fqn: ["opensource_observer", "marts", "directory", "contracts_v0"],
      alias: "contracts_v0",
      checksum: {
        name: "sha256",
        checksum:
          "bfb6e50bf01042e68478a172fd3605558528a423506c8b67367a240d513fdbb7",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {
          sync_to_db: true,
          index: { idx_deployer: ["root_deployer_address"] },
        },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {
        sync_to_db: true,
        index: { idx_deployer: ["root_deployer_address"] },
      },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "table",
        meta: {
          sync_to_db: true,
          index: { idx_deployer: ["root_deployer_address"] },
        },
      },
      created_at: 1719978675.385653,
      relation_name: "`opensource-observer`.`oso`.`contracts_v0`",
      raw_code:
        "{{ \n  config(meta = {\n    'sync_to_db': True,\n    'index': {\n      'idx_deployer': [\"root_deployer_address\"],\n    }\n  }) \n}}\n\nselect distinct\n  network as artifact_source,\n  deployer_address as root_deployer_address,\n  contract_address\nfrom {{ ref('int_derived_contracts') }}",
      language: "sql",
      refs: [{ name: "int_derived_contracts", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_derived_contracts"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/directory/contracts_v0.sql",
      compiled: true,
      compiled_code:
        "\n\nselect distinct\n  network as artifact_source,\n  deployer_address as root_deployer_address,\n  contract_address\nfrom `opensource-observer`.`oso`.`int_derived_contracts`",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.onchain_metrics_by_project_v1": {
      database: "opensource-observer",
      schema: "oso",
      name: "onchain_metrics_by_project_v1",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/metrics/onchain_metrics_by_project_v1.sql",
      original_file_path:
        "warehouse/dbt/models/marts/metrics/onchain_metrics_by_project_v1.sql",
      unique_id: "model.opensource_observer.onchain_metrics_by_project_v1",
      fqn: [
        "opensource_observer",
        "marts",
        "metrics",
        "onchain_metrics_by_project_v1",
      ],
      alias: "onchain_metrics_by_project_v1",
      checksum: {
        name: "sha256",
        checksum:
          "43ec8e89d84941ce40558213f8ee4d5bec2e3e79aedd052826831468ef748461",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: ["onchain-metrics", "impact-metrics"],
        meta: { contributors: "oso-team", sync_to_db: true },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: ["onchain-metrics", "impact-metrics"],
      description:
        "Onchain metrics for open source software projects, organized by project and network deployments.",
      columns: {
        project_id: {
          name: "project_id",
          description:
            "**Project ID**: A unique project id (generated by OSO).\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        project_source: {
          name: "project_source",
          description:
            "**Project Source**: The source of where the project is named and defined. Default is `OSS_DIRECTORY`.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        project_namespace: {
          name: "project_namespace",
          description:
            "**Project Namespace**: The namespace of the user or team that has defined the project. Default is `oso`.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        project_name: {
          name: "project_name",
          description:
            "**Project Name**: A unique human-readable project name.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        display_name: {
          name: "display_name",
          description: "**Display Name**: The display name of the project.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        event_source: {
          name: "event_source",
          description:
            "**Event Source**: The blockchain network from which the event data is sourced.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        days_since_first_transaction: {
          name: "days_since_first_transaction",
          description:
            "**Days Since First Transaction**: Number of days since the project's first transaction.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        active_contract_count_90_days: {
          name: "active_contract_count_90_days",
          description:
            "**Active Contract Count (90 Days)**: Number of active contracts in the last 90 days.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        transaction_count: {
          name: "transaction_count",
          description: "**Transaction Count**: Total number of transactions.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        transaction_count_6_months: {
          name: "transaction_count_6_months",
          description:
            "**Transaction Count (6 Months)**: Total transactions in the last 6 months.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        gas_fees_sum: {
          name: "gas_fees_sum",
          description:
            "**Gas Fees Sum**: Total gas fees incurred by the project.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        gas_fees_sum_6_months: {
          name: "gas_fees_sum_6_months",
          description:
            "**Gas Fees Sum (6 Months)**: Total gas fees incurred in the last 6 months.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        address_count: {
          name: "address_count",
          description:
            "**Address Count**: Total number of unique addresses interacting with the project.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        address_count_90_days: {
          name: "address_count_90_days",
          description:
            "**Address Count (90 Days)**: Number of unique addresses interacting in the last 90 days.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        new_address_count_90_days: {
          name: "new_address_count_90_days",
          description:
            "**New Address Count (90 Days)**: Number of new addresses in the last 90 days.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        returning_address_count_90_days: {
          name: "returning_address_count_90_days",
          description:
            "**Returning Address Count (90 Days)**: Number of returning addresses in the last 90 days.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        high_activity_address_count_90_days: {
          name: "high_activity_address_count_90_days",
          description:
            "**High Activity Address Count (90 Days)**: Number of high activity addresses in the last 90 days.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        medium_activity_address_count_90_days: {
          name: "medium_activity_address_count_90_days",
          description:
            "**Medium Activity Address Count (90 Days)**: Number of medium activity addresses in the last 90 days.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        low_activity_address_count_90_days: {
          name: "low_activity_address_count_90_days",
          description:
            "**Low Activity Address Count (90 Days)**: Number of low activity addresses in the last 90 days.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        multi_project_address_count_90_days: {
          name: "multi_project_address_count_90_days",
          description:
            "**Multi-Project Address Count (90 Days)**: Number of addresses interacting with multiple projects in the last 90 days.",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
      },
      meta: { contributors: "oso-team", sync_to_db: true },
      group: null,
      docs: { show: true, node_color: null },
      patch_path:
        "opensource_observer://warehouse/dbt/models/marts/metrics/metrics_v1__schema.yml",
      build_path: null,
      unrendered_config: {
        materialized: "table",
        tags: ["onchain-metrics", "impact-metrics"],
        meta: { sync_to_db: true },
      },
      created_at: 1719978676.331872,
      relation_name:
        "`opensource-observer`.`oso`.`onchain_metrics_by_project_v1`",
      raw_code:
        "{{ \n  config(meta = {\n    'sync_to_db': True\n  }) \n}}\n\nselect\n  project_id,\n  project_source,\n  project_namespace,\n  project_name,\n  display_name,\n  event_source,\n  days_since_first_transaction,\n  active_contract_count_90_days,\n  transaction_count,\n  transaction_count_6_months,\n  gas_fees_sum,\n  gas_fees_sum_6_months,\n  address_count,\n  address_count_90_days,\n  new_address_count_90_days,\n  returning_address_count_90_days,\n  high_activity_address_count_90_days,\n  medium_activity_address_count_90_days,\n  low_activity_address_count_90_days,\n  multi_project_address_count_90_days\nfrom {{ ref('int_onchain_metrics_by_project') }}",
      language: "sql",
      refs: [
        {
          name: "int_onchain_metrics_by_project",
          package: null,
          version: null,
        },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_onchain_metrics_by_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/metrics/onchain_metrics_by_project_v1.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  project_id,\n  project_source,\n  project_namespace,\n  project_name,\n  display_name,\n  event_source,\n  days_since_first_transaction,\n  active_contract_count_90_days,\n  transaction_count,\n  transaction_count_6_months,\n  gas_fees_sum,\n  gas_fees_sum_6_months,\n  address_count,\n  address_count_90_days,\n  new_address_count_90_days,\n  returning_address_count_90_days,\n  high_activity_address_count_90_days,\n  medium_activity_address_count_90_days,\n  low_activity_address_count_90_days,\n  multi_project_address_count_90_days\nfrom `opensource-observer`.`oso`.`int_onchain_metrics_by_project`",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.code_metrics_by_project_v1": {
      database: "opensource-observer",
      schema: "oso",
      name: "code_metrics_by_project_v1",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/metrics/code_metrics_by_project_v1.sql",
      original_file_path:
        "warehouse/dbt/models/marts/metrics/code_metrics_by_project_v1.sql",
      unique_id: "model.opensource_observer.code_metrics_by_project_v1",
      fqn: [
        "opensource_observer",
        "marts",
        "metrics",
        "code_metrics_by_project_v1",
      ],
      alias: "code_metrics_by_project_v1",
      checksum: {
        name: "sha256",
        checksum:
          "d306b606a62a48fad4b5139bc925dd6f94a05534bbde771984e65f4a17c931c9",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: ["code-metrics", "impact-metrics"],
        meta: { contributors: "oso-team", sync_to_db: true },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: ["code-metrics", "impact-metrics"],
      description:
        "Code metrics for open source software projects, organized by project and code source (currently just GitHub).",
      columns: {
        project_id: {
          name: "project_id",
          description:
            "**Project ID**: A unique project id (generated by OSO).\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        project_source: {
          name: "project_source",
          description:
            "**Project Source**: The source of where the project is named and defined. Default is `OSS_DIRECTORY`.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        project_namespace: {
          name: "project_namespace",
          description:
            "**Project Namespace**: The namespace of the user or team that has defined the project. Default is `oso`.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        project_name: {
          name: "project_name",
          description:
            "**Project Name**: A unique human-readable project name.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        display_name: {
          name: "display_name",
          description: "**Display Name**: The display name of the project.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        event_source: {
          name: "event_source",
          description:
            "**Event Source**: The source of the event data. Currently, `GITHUB` is the only event source.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        repository_count: {
          name: "repository_count",
          description:
            "**Repository Count**: Number of repositories in the project.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        first_commit_date: {
          name: "first_commit_date",
          description:
            "**First Commit Date**: The date of the first commit across all of its repos.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        last_commit_date: {
          name: "last_commit_date",
          description:
            "**Last Commit Date**: The date of the last commit across all of its repos.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        star_count: {
          name: "star_count",
          description:
            "**Star Count**: Total number of stars the project has received.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        fork_count: {
          name: "fork_count",
          description:
            "**Fork Count**: Total number of forks of the project's repos.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        contributor_count: {
          name: "contributor_count",
          description:
            "**Contributor Count**: Total number of distinct contributors to the project.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        contributor_count_6_months: {
          name: "contributor_count_6_months",
          description:
            "**Contributor Count (6 Months)**: Contributors in the last 6 months.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        new_contributor_count_6_months: {
          name: "new_contributor_count_6_months",
          description:
            "**New Contributor Count (6 Months)**: New contributors in the last 6 months.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        fulltime_developer_average_6_months: {
          name: "fulltime_developer_average_6_months",
          description:
            "**Fulltime Developer Average (6 Months)**: Average number of full-time developers in the last 6 months. A full-time developer is defined as a contributor who has made commits on at least 10 days in a given month.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        active_developer_count_6_months: {
          name: "active_developer_count_6_months",
          description:
            "**Active Developer Count (6 Months)**: Active developers in the last 6 months. A developer is considered active if they have made a commit to main over the period.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        commit_count_6_months: {
          name: "commit_count_6_months",
          description:
            "**Commit Count (6 Months)**: Total commits in the last 6 months.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        opened_pull_request_count_6_months: {
          name: "opened_pull_request_count_6_months",
          description:
            "**Opened Pull Request Count (6 Months)**: Pull requests opened in the last 6 months.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        merged_pull_request_count_6_months: {
          name: "merged_pull_request_count_6_months",
          description:
            "**Merged Pull Request Count (6 Months)**: Pull requests merged to main in the last 6 months.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        opened_issue_count_6_months: {
          name: "opened_issue_count_6_months",
          description:
            "**Opened Issue Count (6 Months)**: Issues opened in the last 6 months.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        closed_issue_count_6_months: {
          name: "closed_issue_count_6_months",
          description:
            "**Closed Issue Count (6 Months)**: Issues closed in the last 6 months.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
      },
      meta: { contributors: "oso-team", sync_to_db: true },
      group: null,
      docs: { show: true, node_color: null },
      patch_path:
        "opensource_observer://warehouse/dbt/models/marts/metrics/metrics_v1__schema.yml",
      build_path: null,
      unrendered_config: {
        materialized: "table",
        tags: ["code-metrics", "impact-metrics"],
        meta: { sync_to_db: true },
      },
      created_at: 1719978676.3241498,
      relation_name: "`opensource-observer`.`oso`.`code_metrics_by_project_v1`",
      raw_code:
        "{{ \n  config(meta = {\n    'sync_to_db': True\n  }) \n}}\n\nselect\n  project_id,\n  project_source,\n  project_namespace,\n  project_name,\n  display_name,\n  event_source,\n  repository_count,\n  first_commit_date,\n  last_commit_date,\n  star_count,\n  fork_count,\n  contributor_count,\n  contributor_count_6_months,\n  new_contributor_count_6_months,\n  fulltime_developer_average_6_months,\n  active_developer_count_6_months,\n  commit_count_6_months,\n  opened_pull_request_count_6_months,\n  merged_pull_request_count_6_months,\n  opened_issue_count_6_months,\n  closed_issue_count_6_months\nfrom {{ ref('int_code_metrics_by_project') }}",
      language: "sql",
      refs: [
        { name: "int_code_metrics_by_project", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_code_metrics_by_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/metrics/code_metrics_by_project_v1.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  project_id,\n  project_source,\n  project_namespace,\n  project_name,\n  display_name,\n  event_source,\n  repository_count,\n  first_commit_date,\n  last_commit_date,\n  star_count,\n  fork_count,\n  contributor_count,\n  contributor_count_6_months,\n  new_contributor_count_6_months,\n  fulltime_developer_average_6_months,\n  active_developer_count_6_months,\n  commit_count_6_months,\n  opened_pull_request_count_6_months,\n  merged_pull_request_count_6_months,\n  opened_issue_count_6_months,\n  closed_issue_count_6_months\nfrom `opensource-observer`.`oso`.`int_code_metrics_by_project`",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_repo_stats_by_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_repo_stats_by_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/rf4_repo_stats_by_project.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/rf4_repo_stats_by_project.sql",
      unique_id: "model.opensource_observer.rf4_repo_stats_by_project",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "rf4_repo_stats_by_project",
      ],
      alias: "rf4_repo_stats_by_project",
      checksum: {
        name: "sha256",
        checksum:
          "f956bd98ac179241e673b7430ec27e58aaa4bd3a6ccd128a5486a52fddadc859",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.3927002,
      relation_name: "`opensource-observer`.`oso`.`rf4_repo_stats_by_project`",
      raw_code:
        "{# TODO: Review licenses https://spdx.org/licenses/ for OSI Approved #}\nwith repo_snapshot as (\n  select\n    project_id,\n    artifact_namespace,\n    artifact_name,\n    is_fork,\n    fork_count,\n    star_count,\n    first_commit_time,\n    last_commit_time,\n    days_with_commits_count,\n    commit_count,\n    language,\n    license_spdx_id,\n    case\n      when license_spdx_id in (\n        'MIT', 'MIT-0', 'Apache-2.0', 'Unlicense',\n        'BSD-2-Clause', 'BSD-3-Clause', 'BSD-3-Clause-Clear',\n        'AGPL-3.0', 'GPL-3.0', 'LGPL-3.0', 'GPL-2.0', 'MPL-2.0', 'LGPL-2.1',\n        'OFL-1.1', 'EPL-1.0', 'EPL-2.0', 'OFL-1.1', 'EUPL-1.2', 'OSL-3.0',\n        'ISC', '0BSD', 'NCSA', 'Zlib'\n      ) then 'Permissive'\n      when license_spdx_id in (\n        'BSD-4-Clause', 'WTFPL',\n        'CC0-1.0', 'CC-BY-SA-4.0', 'CC-BY-4.0'\n      ) then 'Restrictive'\n      when license_spdx_id = 'NOASSERTION'\n        then 'Custom'\n      else 'Unspecified'\n    end as license_check,\n    case\n      when (\n        commit_count >= 10\n        and days_with_commits_count >= 3\n        and star_count >= 10\n        and language in ('Solidity', 'JavaScript', 'TypeScript')\n      ) then 'OK'\n      else 'Review'\n    end as repo_activity_check,\n    (first_commit_time < '2024-05-01') as repo_older_than_1_month,\n    concat(artifact_namespace, '/', artifact_name) as repo\n  from {{ ref('int_repo_metrics_by_project') }}\n),\n\nfiltered_repos as (\n  select\n    application_id,\n    project_name,\n    repo,\n    url,\n    has_contracts\n  from {{ ref('rf4_repos_by_app') }}\n  where scan = true\n)\n\nselect\n  filtered_repos.application_id,\n  filtered_repos.project_name,\n  filtered_repos.url,\n  filtered_repos.has_contracts,\n  repo_snapshot.artifact_namespace,\n  repo_snapshot.artifact_name,\n  repo_snapshot.is_fork,\n  repo_snapshot.fork_count,\n  repo_snapshot.star_count,\n  repo_snapshot.first_commit_time,\n  repo_snapshot.last_commit_time,\n  repo_snapshot.days_with_commits_count,\n  repo_snapshot.commit_count,\n  repo_snapshot.language,\n  repo_snapshot.license_spdx_id,\n  repo_snapshot.license_check,\n  repo_snapshot.repo_older_than_1_month,\n  repo_snapshot.repo_activity_check,\n  repo_snapshot.project_id\nfrom filtered_repos\nleft join repo_snapshot\n  on lower(filtered_repos.repo) = lower(repo_snapshot.repo)",
      language: "sql",
      refs: [
        { name: "int_repo_metrics_by_project", package: null, version: null },
        { name: "rf4_repos_by_app", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_repo_metrics_by_project",
          "model.opensource_observer.rf4_repos_by_app",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/rf4_repo_stats_by_project.sql",
      compiled: true,
      compiled_code:
        "\nwith repo_snapshot as (\n  select\n    project_id,\n    artifact_namespace,\n    artifact_name,\n    is_fork,\n    fork_count,\n    star_count,\n    first_commit_time,\n    last_commit_time,\n    days_with_commits_count,\n    commit_count,\n    language,\n    license_spdx_id,\n    case\n      when license_spdx_id in (\n        'MIT', 'MIT-0', 'Apache-2.0', 'Unlicense',\n        'BSD-2-Clause', 'BSD-3-Clause', 'BSD-3-Clause-Clear',\n        'AGPL-3.0', 'GPL-3.0', 'LGPL-3.0', 'GPL-2.0', 'MPL-2.0', 'LGPL-2.1',\n        'OFL-1.1', 'EPL-1.0', 'EPL-2.0', 'OFL-1.1', 'EUPL-1.2', 'OSL-3.0',\n        'ISC', '0BSD', 'NCSA', 'Zlib'\n      ) then 'Permissive'\n      when license_spdx_id in (\n        'BSD-4-Clause', 'WTFPL',\n        'CC0-1.0', 'CC-BY-SA-4.0', 'CC-BY-4.0'\n      ) then 'Restrictive'\n      when license_spdx_id = 'NOASSERTION'\n        then 'Custom'\n      else 'Unspecified'\n    end as license_check,\n    case\n      when (\n        commit_count >= 10\n        and days_with_commits_count >= 3\n        and star_count >= 10\n        and language in ('Solidity', 'JavaScript', 'TypeScript')\n      ) then 'OK'\n      else 'Review'\n    end as repo_activity_check,\n    (first_commit_time < '2024-05-01') as repo_older_than_1_month,\n    concat(artifact_namespace, '/', artifact_name) as repo\n  from `opensource-observer`.`oso`.`int_repo_metrics_by_project`\n),\n\nfiltered_repos as (\n  select\n    application_id,\n    project_name,\n    repo,\n    url,\n    has_contracts\n  from `opensource-observer`.`oso`.`rf4_repos_by_app`\n  where scan = true\n)\n\nselect\n  filtered_repos.application_id,\n  filtered_repos.project_name,\n  filtered_repos.url,\n  filtered_repos.has_contracts,\n  repo_snapshot.artifact_namespace,\n  repo_snapshot.artifact_name,\n  repo_snapshot.is_fork,\n  repo_snapshot.fork_count,\n  repo_snapshot.star_count,\n  repo_snapshot.first_commit_time,\n  repo_snapshot.last_commit_time,\n  repo_snapshot.days_with_commits_count,\n  repo_snapshot.commit_count,\n  repo_snapshot.language,\n  repo_snapshot.license_spdx_id,\n  repo_snapshot.license_check,\n  repo_snapshot.repo_older_than_1_month,\n  repo_snapshot.repo_activity_check,\n  repo_snapshot.project_id\nfrom filtered_repos\nleft join repo_snapshot\n  on lower(filtered_repos.repo) = lower(repo_snapshot.repo)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_4337_events": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_4337_events",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/rf4_4337_events.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/rf4_4337_events.sql",
      unique_id: "model.opensource_observer.rf4_4337_events",
      fqn: ["opensource_observer", "marts", "superchain", "rf4_4337_events"],
      alias: "rf4_4337_events",
      checksum: {
        name: "sha256",
        checksum:
          "e4f3b4bafa175319a77c64d0975d19d7180a497d09077a1af71b543a2458a164",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.3950415,
      relation_name: "`opensource-observer`.`oso`.`rf4_4337_events`",
      raw_code:
        "{% set networks = [\"optimism\", \"base\", \"frax\", \"metal\", \"mode\", \"zora\"] %}\n{% set start_date = '2023-10-01' %}\n{% set end_date = '2024-06-01' %}\n{% set union_queries = [] %}\n\n{% for network in networks %}\n  {% set table_name = \"stg_\" ~ network ~ \"__proxies\" %}\n  {% set network_upper = network.upper() %}\n\n  {% set query %}\n  select  \n    '{{ network_upper }}' as network,\n    block_timestamp,\n    transaction_hash,\n    case\n      when proxy_address = from_address then to_address\n      else from_address\n    end as address,\n    case\n      when proxy_address = from_address then 'to'\n      else 'from'\n    end as transaction_type\n  from {{ ref(table_name) }}\n  where\n    proxy_type = 'ENTRYPOINT'\n    and block_timestamp > '{{ start_date }}'\n    and block_timestamp < '{{ end_date }}'\n  {% endset %}\n\n  {% do union_queries.append(query) %}\n{% endfor %}\n\n{% set final_query = union_queries | join(' union all ') %}\n\nwith txns as (\n  {{ final_query }}\n),\n\ntagged_txns as (\n  select\n    txns.*,\n    artifacts_by_project_v1.project_id,\n    artifacts_by_project_v1.project_name\n  from txns\n  left join {{ ref('artifacts_by_project_v1') }}\n    on\n      txns.address = artifacts_by_project_v1.artifact_name\n      and txns.network = artifacts_by_project_v1.artifact_source\n),\n\nrelevant_txns as (\n  select tagged_txns.*\n  from tagged_txns\n  where transaction_hash in (\n    select distinct transaction_hash\n    from tagged_txns\n    where\n      project_id is not null\n      and transaction_type = 'to'\n      and address not in (\n        lower('0x0000000071727De22E5E9d8BAf0edAc6f37da032'),\n        lower('0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789')\n      )\n  )\n),\n\nraw_4337_events as (\n  select\n    relevant_txns.project_id,\n    relevant_txns.project_name,\n    relevant_txns.transaction_hash,\n    relevant_txns.network as event_source,\n    relevant_txns.address as to_artifact_name,\n    txns.address as from_artifact_name,\n    timestamp_trunc(relevant_txns.block_timestamp, day) as bucket_day\n  from relevant_txns\n  left join txns\n    on relevant_txns.transaction_hash = txns.transaction_hash\n  where\n    txns.transaction_type = 'from'\n)\n\nselect\n  bucket_day,\n  project_id,\n  project_name,\n  from_artifact_name,\n  to_artifact_name,\n  event_source,\n  '4337_INTERACTION' as event_type,\n  count(distinct transaction_hash) as amount\nfrom raw_4337_events\nwhere project_id is not null\ngroup by\n  bucket_day,\n  project_id,\n  project_name,\n  from_artifact_name,\n  to_artifact_name,\n  event_source",
      language: "sql",
      refs: [
        { name: "stg_optimism__proxies", package: null, version: null },
        { name: "stg_base__proxies", package: null, version: null },
        { name: "stg_frax__proxies", package: null, version: null },
        { name: "stg_metal__proxies", package: null, version: null },
        { name: "stg_mode__proxies", package: null, version: null },
        { name: "stg_zora__proxies", package: null, version: null },
        { name: "artifacts_by_project_v1", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.stg_optimism__proxies",
          "model.opensource_observer.stg_base__proxies",
          "model.opensource_observer.stg_frax__proxies",
          "model.opensource_observer.stg_metal__proxies",
          "model.opensource_observer.stg_mode__proxies",
          "model.opensource_observer.stg_zora__proxies",
          "model.opensource_observer.artifacts_by_project_v1",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/rf4_4337_events.sql",
      compiled: true,
      compiled_code:
        "\n\n\n\n\n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n\n\n\nwith txns as (\n  \n  select  \n    'OPTIMISM' as network,\n    block_timestamp,\n    transaction_hash,\n    case\n      when proxy_address = from_address then to_address\n      else from_address\n    end as address,\n    case\n      when proxy_address = from_address then 'to'\n      else 'from'\n    end as transaction_type\n  from `opensource-observer`.`oso`.`stg_optimism__proxies`\n  where\n    proxy_type = 'ENTRYPOINT'\n    and block_timestamp > '2023-10-01'\n    and block_timestamp < '2024-06-01'\n   union all \n  select  \n    'BASE' as network,\n    block_timestamp,\n    transaction_hash,\n    case\n      when proxy_address = from_address then to_address\n      else from_address\n    end as address,\n    case\n      when proxy_address = from_address then 'to'\n      else 'from'\n    end as transaction_type\n  from `opensource-observer`.`oso`.`stg_base__proxies`\n  where\n    proxy_type = 'ENTRYPOINT'\n    and block_timestamp > '2023-10-01'\n    and block_timestamp < '2024-06-01'\n   union all \n  select  \n    'FRAX' as network,\n    block_timestamp,\n    transaction_hash,\n    case\n      when proxy_address = from_address then to_address\n      else from_address\n    end as address,\n    case\n      when proxy_address = from_address then 'to'\n      else 'from'\n    end as transaction_type\n  from `opensource-observer`.`oso`.`stg_frax__proxies`\n  where\n    proxy_type = 'ENTRYPOINT'\n    and block_timestamp > '2023-10-01'\n    and block_timestamp < '2024-06-01'\n   union all \n  select  \n    'METAL' as network,\n    block_timestamp,\n    transaction_hash,\n    case\n      when proxy_address = from_address then to_address\n      else from_address\n    end as address,\n    case\n      when proxy_address = from_address then 'to'\n      else 'from'\n    end as transaction_type\n  from `opensource-observer`.`oso`.`stg_metal__proxies`\n  where\n    proxy_type = 'ENTRYPOINT'\n    and block_timestamp > '2023-10-01'\n    and block_timestamp < '2024-06-01'\n   union all \n  select  \n    'MODE' as network,\n    block_timestamp,\n    transaction_hash,\n    case\n      when proxy_address = from_address then to_address\n      else from_address\n    end as address,\n    case\n      when proxy_address = from_address then 'to'\n      else 'from'\n    end as transaction_type\n  from `opensource-observer`.`oso`.`stg_mode__proxies`\n  where\n    proxy_type = 'ENTRYPOINT'\n    and block_timestamp > '2023-10-01'\n    and block_timestamp < '2024-06-01'\n   union all \n  select  \n    'ZORA' as network,\n    block_timestamp,\n    transaction_hash,\n    case\n      when proxy_address = from_address then to_address\n      else from_address\n    end as address,\n    case\n      when proxy_address = from_address then 'to'\n      else 'from'\n    end as transaction_type\n  from `opensource-observer`.`oso`.`stg_zora__proxies`\n  where\n    proxy_type = 'ENTRYPOINT'\n    and block_timestamp > '2023-10-01'\n    and block_timestamp < '2024-06-01'\n  \n),\n\ntagged_txns as (\n  select\n    txns.*,\n    artifacts_by_project_v1.project_id,\n    artifacts_by_project_v1.project_name\n  from txns\n  left join `opensource-observer`.`oso`.`artifacts_by_project_v1`\n    on\n      txns.address = artifacts_by_project_v1.artifact_name\n      and txns.network = artifacts_by_project_v1.artifact_source\n),\n\nrelevant_txns as (\n  select tagged_txns.*\n  from tagged_txns\n  where transaction_hash in (\n    select distinct transaction_hash\n    from tagged_txns\n    where\n      project_id is not null\n      and transaction_type = 'to'\n      and address not in (\n        lower('0x0000000071727De22E5E9d8BAf0edAc6f37da032'),\n        lower('0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789')\n      )\n  )\n),\n\nraw_4337_events as (\n  select\n    relevant_txns.project_id,\n    relevant_txns.project_name,\n    relevant_txns.transaction_hash,\n    relevant_txns.network as event_source,\n    relevant_txns.address as to_artifact_name,\n    txns.address as from_artifact_name,\n    timestamp_trunc(relevant_txns.block_timestamp, day) as bucket_day\n  from relevant_txns\n  left join txns\n    on relevant_txns.transaction_hash = txns.transaction_hash\n  where\n    txns.transaction_type = 'from'\n)\n\nselect\n  bucket_day,\n  project_id,\n  project_name,\n  from_artifact_name,\n  to_artifact_name,\n  event_source,\n  '4337_INTERACTION' as event_type,\n  count(distinct transaction_hash) as amount\nfrom raw_4337_events\nwhere project_id is not null\ngroup by\n  bucket_day,\n  project_id,\n  project_name,\n  from_artifact_name,\n  to_artifact_name,\n  event_source",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_trusted_users": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_trusted_users",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/rf4_trusted_users.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/rf4_trusted_users.sql",
      unique_id: "model.opensource_observer.rf4_trusted_users",
      fqn: ["opensource_observer", "marts", "superchain", "rf4_trusted_users"],
      alias: "rf4_trusted_users",
      checksum: {
        name: "sha256",
        checksum:
          "4cfc75d13cad9f179965eb380256ec0379fc57610c9b64a223acdcb520b94390",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.4124146,
      relation_name: "`opensource-observer`.`oso`.`rf4_trusted_users`",
      raw_code:
        "with farcaster_users as (\n  select\n    fid as farcaster_id,\n    address,\n    CAST(\n      fid < '20939'\n      as int64\n    ) as farcaster_prepermissionless\n  from {{ ref('stg_farcaster__addresses') }}\n),\n\neigentrust_top_users as (\n  select\n    1 as eigentrust_verification,\n    CAST(farcaster_id as string) as farcaster_id\n  from {{ ref('stg_karma3__globaltrust') }}\n  where\n    snapshot_time = '2024-05-21'\n    and strategy_id = 1\n  order by eigentrust_rank desc\n  limit 42000\n),\n\noptimist_nft_holders as (\n  select\n    optimist_address as address,\n    1 as optimist_nft_verification\n  from {{ source(\"static_data_sources\", \"optimist_nft_holders\") }}\n),\n\npassport_scores as (\n  select\n    passport_address as address,\n    1 as passport_user,\n    CAST(\n      COALESCE(evidence_rawscore >= evidence_threshold, false) as int64\n    ) as passport_verification\n  from {{ ref('stg_passport__scores') }}\n),\n\nairdrop_recipients as (\n  select\n    address,\n    1 as airdrop_recipient,\n    CAST(\n      COALESCE(count_drops > 1, false) as int64\n    ) as airdrop_verification\n  from (\n    select\n      LOWER(address) as address,\n      COUNT(distinct airdrop_round) as count_drops\n    from {{ ref('stg_optimism__airdrop_addresses') }}\n    group by LOWER(address)\n  )\n),\n\nall_addresses as (\n  select distinct address\n  from (\n    select address from farcaster_users\n    union all\n    select address from passport_scores\n    union all\n    select address from optimist_nft_holders\n    union all\n    select address from airdrop_recipients\n  )\n),\n\ntrusted_user_model as (\n  select\n    all_addresses.address,\n    CAST(farcaster_users.farcaster_id is not null as int64)\n      as farcaster_user,\n    COALESCE(farcaster_users.farcaster_prepermissionless, 0)\n      as farcaster_prepermissionless,\n    COALESCE(eigentrust_top_users.eigentrust_verification, 0)\n      as eigentrust_verification,\n    COALESCE(passport_scores.passport_user, 0)\n      as passport_user,\n    COALESCE(passport_scores.passport_verification, 0)\n      as passport_verification,\n    COALESCE(optimist_nft_holders.optimist_nft_verification, 0)\n      as optimist_nft_verification,\n    COALESCE(airdrop_recipients.airdrop_recipient, 0)\n      as airdrop_recipient,\n    COALESCE(airdrop_recipients.airdrop_verification, 0)\n      as airdrop_verification\n  from all_addresses\n  left join farcaster_users\n    on all_addresses.address = farcaster_users.address\n  left join eigentrust_top_users\n    on farcaster_users.farcaster_id = eigentrust_top_users.farcaster_id\n  left join passport_scores\n    on all_addresses.address = passport_scores.address\n  left join optimist_nft_holders\n    on all_addresses.address = optimist_nft_holders.address\n  left join airdrop_recipients\n    on all_addresses.address = airdrop_recipients.address\n)\n\nselect\n  address,\n  farcaster_user,\n  farcaster_prepermissionless,\n  eigentrust_verification,\n  passport_user,\n  passport_verification,\n  optimist_nft_verification,\n  airdrop_recipient,\n  airdrop_verification,\n  (\n    farcaster_user\n    + farcaster_prepermissionless\n    + eigentrust_verification\n    + passport_verification\n    + optimist_nft_verification\n    + airdrop_verification\n  ) > 1 as is_trusted_user\nfrom trusted_user_model",
      language: "sql",
      refs: [
        { name: "stg_farcaster__addresses", package: null, version: null },
        { name: "stg_karma3__globaltrust", package: null, version: null },
        { name: "stg_passport__scores", package: null, version: null },
        {
          name: "stg_optimism__airdrop_addresses",
          package: null,
          version: null,
        },
      ],
      sources: [["static_data_sources", "optimist_nft_holders"]],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "source.opensource_observer.static_data_sources.optimist_nft_holders",
          "model.opensource_observer.stg_farcaster__addresses",
          "model.opensource_observer.stg_karma3__globaltrust",
          "model.opensource_observer.stg_passport__scores",
          "model.opensource_observer.stg_optimism__airdrop_addresses",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/rf4_trusted_users.sql",
      compiled: true,
      compiled_code:
        "with farcaster_users as (\n  select\n    fid as farcaster_id,\n    address,\n    CAST(\n      fid < '20939'\n      as int64\n    ) as farcaster_prepermissionless\n  from `opensource-observer`.`oso`.`stg_farcaster__addresses`\n),\n\neigentrust_top_users as (\n  select\n    1 as eigentrust_verification,\n    CAST(farcaster_id as string) as farcaster_id\n  from `opensource-observer`.`oso`.`stg_karma3__globaltrust`\n  where\n    snapshot_time = '2024-05-21'\n    and strategy_id = 1\n  order by eigentrust_rank desc\n  limit 42000\n),\n\noptimist_nft_holders as (\n  select\n    optimist_address as address,\n    1 as optimist_nft_verification\n  from `opensource-observer`.`static_data_sources`.`optimist_nft_holders`\n),\n\npassport_scores as (\n  select\n    passport_address as address,\n    1 as passport_user,\n    CAST(\n      COALESCE(evidence_rawscore >= evidence_threshold, false) as int64\n    ) as passport_verification\n  from `opensource-observer`.`oso`.`stg_passport__scores`\n),\n\nairdrop_recipients as (\n  select\n    address,\n    1 as airdrop_recipient,\n    CAST(\n      COALESCE(count_drops > 1, false) as int64\n    ) as airdrop_verification\n  from (\n    select\n      LOWER(address) as address,\n      COUNT(distinct airdrop_round) as count_drops\n    from `opensource-observer`.`oso`.`stg_optimism__airdrop_addresses`\n    group by LOWER(address)\n  )\n),\n\nall_addresses as (\n  select distinct address\n  from (\n    select address from farcaster_users\n    union all\n    select address from passport_scores\n    union all\n    select address from optimist_nft_holders\n    union all\n    select address from airdrop_recipients\n  )\n),\n\ntrusted_user_model as (\n  select\n    all_addresses.address,\n    CAST(farcaster_users.farcaster_id is not null as int64)\n      as farcaster_user,\n    COALESCE(farcaster_users.farcaster_prepermissionless, 0)\n      as farcaster_prepermissionless,\n    COALESCE(eigentrust_top_users.eigentrust_verification, 0)\n      as eigentrust_verification,\n    COALESCE(passport_scores.passport_user, 0)\n      as passport_user,\n    COALESCE(passport_scores.passport_verification, 0)\n      as passport_verification,\n    COALESCE(optimist_nft_holders.optimist_nft_verification, 0)\n      as optimist_nft_verification,\n    COALESCE(airdrop_recipients.airdrop_recipient, 0)\n      as airdrop_recipient,\n    COALESCE(airdrop_recipients.airdrop_verification, 0)\n      as airdrop_verification\n  from all_addresses\n  left join farcaster_users\n    on all_addresses.address = farcaster_users.address\n  left join eigentrust_top_users\n    on farcaster_users.farcaster_id = eigentrust_top_users.farcaster_id\n  left join passport_scores\n    on all_addresses.address = passport_scores.address\n  left join optimist_nft_holders\n    on all_addresses.address = optimist_nft_holders.address\n  left join airdrop_recipients\n    on all_addresses.address = airdrop_recipients.address\n)\n\nselect\n  address,\n  farcaster_user,\n  farcaster_prepermissionless,\n  eigentrust_verification,\n  passport_user,\n  passport_verification,\n  optimist_nft_verification,\n  airdrop_recipient,\n  airdrop_verification,\n  (\n    farcaster_user\n    + farcaster_prepermissionless\n    + eigentrust_verification\n    + passport_verification\n    + optimist_nft_verification\n    + airdrop_verification\n  ) > 1 as is_trusted_user\nfrom trusted_user_model",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_events_daily_to_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_events_daily_to_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/rf4_events_daily_to_project.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/rf4_events_daily_to_project.sql",
      unique_id: "model.opensource_observer.rf4_events_daily_to_project",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "rf4_events_daily_to_project",
      ],
      alias: "rf4_events_daily_to_project",
      checksum: {
        name: "sha256",
        checksum:
          "6f789e27490a01fad200e8b76555df34db2ac2fc73aa7dec00a29266bb9b6770",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: ["optimism", "retro-funding", "impact-metrics"],
        meta: { contributors: "oso-team" },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: ["optimism", "retro-funding", "impact-metrics"],
      description:
        "Unified aggregated daily event table for projects on the Superchain",
      columns: {
        bucket_date: {
          name: "bucket_date",
          description:
            "**Bucket Date**: The date of the event, bucketed by day.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        project_id: {
          name: "project_id",
          description:
            "**Project ID**: A unique project id (generated by OSO).\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        project_name: {
          name: "project_name",
          description:
            "**Project Name**: A unique human-readable project name.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        from_artifact_name: {
          name: "from_artifact_name",
          description:
            "**From Artifact Name**: The name of the address that initiated the event.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        to_artifact_name: {
          name: "to_artifact_name",
          description:
            "**To Artifact Name**: The name of the initial address that was interacted with during the event.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        event_source: {
          name: "event_source",
          description:
            "**Event Source**: The network the event occured on. Examples include: `OPTIMISM`, `BASE`, `FRAX`, `METAL`, `MODE`, `ZORA`.       \n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        event_type: {
          name: "event_type",
          description:
            "**Event Type**: A label for the type of event that has been aggregated. Examples include: `CONTRACT_INVOCATION_DAILY_COUNT`, `CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT`, `CONTRACT_INVOCATION_DAILY_L2_GAS_USED`. \n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        amount: {
          name: "amount",
          description:
            "**Amount**: The amount or value associated with the event. This is a count or sum depending on the event type.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        trusted_user_id: {
          name: "trusted_user_id",
          description:
            "**Trusted User ID**: A unique identifier for a trusted user (generated by OSO). If the `from_artifact_name` is not a trusted user, this field will be null.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
      },
      meta: { contributors: "oso-team" },
      group: null,
      docs: { show: true, node_color: null },
      patch_path:
        "opensource_observer://warehouse/dbt/models/marts/superchain/rf4_impact_metrics_by_project__schema.yml",
      build_path: null,
      unrendered_config: {
        materialized: "table",
        tags: ["optimism", "retro-funding", "impact-metrics"],
        meta: { contributors: "oso-team" },
      },
      created_at: 1719978676.3361819,
      relation_name:
        "`opensource-observer`.`oso`.`rf4_events_daily_to_project`",
      raw_code:
        "{# \n  All events to a project, bucketed by day\n#}\n\nwith events as (\n  select\n    project_id,\n    from_artifact_id,\n    to_artifact_id,\n    event_source,\n    event_type,\n    TIMESTAMP_TRUNC(time, day) as bucket_day,\n    SUM(amount) as amount\n  from {{ ref('int_events_to_project') }}\n  where\n    event_source in (\n      'OPTIMISM',\n      'BASE',\n      'FRAX',\n      'METAL',\n      'MODE',\n      'ZORA'\n    )\n    and time < '2024-06-01'\n  group by\n    project_id,\n    from_artifact_id,\n    to_artifact_id,\n    event_source,\n    event_type,\n    TIMESTAMP_TRUNC(time, day)\n),\n\nartifacts as (\n  select distinct\n    artifact_id,\n    artifact_name\n  from {{ ref('artifacts_v1') }}\n),\n\n{# use snapshot instead of live model as farcaster addresses may change #}\nrf4_trusted_users as (\n  select\n    address,\n    true as is_trusted_user\n  from {{ source('static_data_sources', 'op_rf4_trusted_addresses') }}\n),\n\nevents_to_project as (\n  select\n    events.bucket_day,\n    events.project_id,\n    projects_v1.project_name,\n    from_artifacts.artifact_name as from_artifact_name,\n    to_artifacts.artifact_name as to_artifact_name,\n    events.event_source,\n    events.event_type,\n    events.amount,\n    case\n      when rf4_trusted_users.is_trusted_user is true\n        then rf4_trusted_users.address\n    end as trusted_user_id\n  from events\n  left join artifacts as to_artifacts\n    on events.to_artifact_id = to_artifacts.artifact_id\n  left join artifacts as from_artifacts\n    on events.from_artifact_id = from_artifacts.artifact_id\n  left join {{ ref('projects_v1') }}\n    on events.project_id = projects_v1.project_id\n  left join rf4_trusted_users\n    on from_artifacts.artifact_name = rf4_trusted_users.address\n  where events.amount > 0\n),\n\nduped_contracts as (\n  select distinct\n    event_source,\n    to_artifact_name,\n    project_name\n  from events_to_project\n  where project_name in ('zora', 'aerodrome-finance')\n),\n\nfiltered_events as (\n  select events_to_project.*\n  from events_to_project\n  left join duped_contracts\n    on\n      events_to_project.to_artifact_name = duped_contracts.to_artifact_name\n      and events_to_project.event_source = duped_contracts.event_source\n  where\n    duped_contracts.project_name is null\n    or duped_contracts.project_name = events_to_project.project_name\n)\n\nselect\n  bucket_day,\n  project_id,\n  project_name,\n  from_artifact_name,\n  to_artifact_name,\n  event_source,\n  event_type,\n  amount,\n  trusted_user_id\nfrom filtered_events",
      language: "sql",
      refs: [
        { name: "int_events_to_project", package: null, version: null },
        { name: "artifacts_v1", package: null, version: null },
        { name: "projects_v1", package: null, version: null },
      ],
      sources: [["static_data_sources", "op_rf4_trusted_addresses"]],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "source.opensource_observer.static_data_sources.op_rf4_trusted_addresses",
          "model.opensource_observer.int_events_to_project",
          "model.opensource_observer.artifacts_v1",
          "model.opensource_observer.projects_v1",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/rf4_events_daily_to_project.sql",
      compiled: true,
      compiled_code:
        "\n\nwith events as (\n  select\n    project_id,\n    from_artifact_id,\n    to_artifact_id,\n    event_source,\n    event_type,\n    TIMESTAMP_TRUNC(time, day) as bucket_day,\n    SUM(amount) as amount\n  from `opensource-observer`.`oso`.`int_events_to_project`\n  where\n    event_source in (\n      'OPTIMISM',\n      'BASE',\n      'FRAX',\n      'METAL',\n      'MODE',\n      'ZORA'\n    )\n    and time < '2024-06-01'\n  group by\n    project_id,\n    from_artifact_id,\n    to_artifact_id,\n    event_source,\n    event_type,\n    TIMESTAMP_TRUNC(time, day)\n),\n\nartifacts as (\n  select distinct\n    artifact_id,\n    artifact_name\n  from `opensource-observer`.`oso`.`artifacts_v1`\n),\n\n\nrf4_trusted_users as (\n  select\n    address,\n    true as is_trusted_user\n  from `opensource-observer`.`static_data_sources`.`op_rf4_trusted_addresses`\n),\n\nevents_to_project as (\n  select\n    events.bucket_day,\n    events.project_id,\n    projects_v1.project_name,\n    from_artifacts.artifact_name as from_artifact_name,\n    to_artifacts.artifact_name as to_artifact_name,\n    events.event_source,\n    events.event_type,\n    events.amount,\n    case\n      when rf4_trusted_users.is_trusted_user is true\n        then rf4_trusted_users.address\n    end as trusted_user_id\n  from events\n  left join artifacts as to_artifacts\n    on events.to_artifact_id = to_artifacts.artifact_id\n  left join artifacts as from_artifacts\n    on events.from_artifact_id = from_artifacts.artifact_id\n  left join `opensource-observer`.`oso`.`projects_v1`\n    on events.project_id = projects_v1.project_id\n  left join rf4_trusted_users\n    on from_artifacts.artifact_name = rf4_trusted_users.address\n  where events.amount > 0\n),\n\nduped_contracts as (\n  select distinct\n    event_source,\n    to_artifact_name,\n    project_name\n  from events_to_project\n  where project_name in ('zora', 'aerodrome-finance')\n),\n\nfiltered_events as (\n  select events_to_project.*\n  from events_to_project\n  left join duped_contracts\n    on\n      events_to_project.to_artifact_name = duped_contracts.to_artifact_name\n      and events_to_project.event_source = duped_contracts.event_source\n  where\n    duped_contracts.project_name is null\n    or duped_contracts.project_name = events_to_project.project_name\n)\n\nselect\n  bucket_day,\n  project_id,\n  project_name,\n  from_artifact_name,\n  to_artifact_name,\n  event_source,\n  event_type,\n  amount,\n  trusted_user_id\nfrom filtered_events",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_impact_metrics_by_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_impact_metrics_by_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/rf4_impact_metrics_by_project.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/rf4_impact_metrics_by_project.sql",
      unique_id: "model.opensource_observer.rf4_impact_metrics_by_project",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "rf4_impact_metrics_by_project",
      ],
      alias: "rf4_impact_metrics_by_project",
      checksum: {
        name: "sha256",
        checksum:
          "7392e748b1921e2b3880e055eca7352f87a7422b29a2e09f008f0f3945709b28",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: ["optimism", "retro-funding", "impact-metrics"],
        meta: { contributors: "oso-team" },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: ["optimism", "retro-funding", "impact-metrics"],
      description:
        "Impact metrics for Optimism Retro Funding 4 (Onchain Builders)",
      columns: {
        application_id: {
          name: "application_id",
          description:
            "**Application ID**: *A unique project application id (generated by Agora).*\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        is_oss: {
          name: "is_oss",
          description:
            "**Eligible for OSS Multiplier**: *Whether the project's contract code and GitHub repo(s) were approved by the review committee as meeting open source software (OSS) requirements.*\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        gas_fees: {
          name: "gas_fees",
          description:
            "**Gas Fees**: Sum of a project's total contribution to gas fees across the Superchain over the RF4 scope period (October 2023 - June 2024).\nGas fees are the primary recurring revenue source for the Superchain and a key indicator of aggregate blockspace demand. A project\u2019s gas fee contribution is influenced by its total volume of contract interactions, the computational complexity of those interactions, and the state of the underlying gas market at the time of those transactions. In the long run, gas fees are what will power Retro Funding and enable it to continue in perpetuity. All members of the Superchain have committed at least 15% of their gross profit from gas fees to Retro Funding. Supporting projects that generate revenue in the form of gas fees helps power the economic engine of the Superchain.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        transaction_count: {
          name: "transaction_count",
          description:
            "**Total Transactions**: Count of a project\u2019s transactions over the RF4 scope period (October 2023 - June 2024).\nOptimism is a Layer 2 roll-up designed to improve the transaction throughput and reduce the fees on Ethereum. Layer 2s are crucial for scaling Ethereum because they help address the network's congestion issues without compromising its security or decentralization. Transaction counts are an important indicator for assessing the adoption and usage of all the new blockspace made available by the Superchain. Projects that have a sustained, high transaction count provide a clear signal of network growth and blockspace demand.\nThis indicator includes successful transactions with a `to_address` owned by the project, as well as internal transactions that originate from one of the project's contracts and interact with the canonical EntryPoint ([EIP 4337](https://eips.ethereum.org/EIPS/eip-4337)) contracts.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        trusted_transaction_count: {
          name: "trusted_transaction_count",
          description:
            '**Interactions from Trusted Optimism Users**: Count of a project\u2019s transactions performed by trusted users over the RF4 scope period (October 2023 - June 2024).\nBots, airdrop farming, and sybil attacks are longstanding problems in crypto. This metric is designed to filter out these types of interactions and focus on the activity of a small subset of trusted users (less than 5% of all active addresses on the Superchain). By tracking interactions specifically from trusted users, we gain a picture of blockspace demand that is less influenced by the effects of bots / farmers / sybils.\nA "trusted user" represents an address linked to an account the meets a certain threshold of reputation. Currently, there are several teams in the Optimism ecosystem building reputation models in a privacy-preserving way. This metric aggregates reputation data from multiple platforms ([Farcaster](https://docs.farcaster.xyz/learn/architecture/hubs), [Passport](https://www.passport.xyz/), [EigenTrust by Karma3Labs](https://docs.karma3labs.com/eigentrust)), and the [Optimist NFT collection](https://app.optimism.io/optimist-nft). In order to be consider a trusted user, an address must meet at least two of the following requirements as of 2024-05-21: have a Farcaster ID of 20939, have a Passport score of 20 points or higher, have a Karma3Labs EigenTrust GlobalRank in the top 42,000 of Farcaster users, hold an Optimist NFT in their wallet, or qualified for at least two (out of four) Optimism airdrops.\n',
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        trusted_transaction_share: {
          name: "trusted_transaction_share",
          description:
            "**Trusted Optimism Users' Share of Total Interactions**: Percentage of a project's total transactions that were made by trusted users over the RF4 scope period (October 2023 - June 2024).\nThis metric expresses interactions from Trusted Optimism Users and Total Transactions as a simple ratio. Using a ratio makes it easier to compare trusted user levels across big projects and small projects side-by-side. For example, a project with 10K trusted transactions out of 20K total transactions would score better than a project with 10K trusted transactions out of 50K total transactions. This indicator is nuanced because it recognizes that minimizing bot / farming / sybil activity might go against economic incentives in the short term but is important for network quality in the long term. Given that this indicator is calculated on a percentage basis, projects with fewer than 100 users are not evaluated.\nA \"trusted user\" represents an address linked to an account the meets a certain threshold of reputation. Currently, there are several teams in the Optimism ecosystem building reputation models in a privacy-preserving way. This metric aggregates reputation data from multiple platforms ([Farcaster](https://docs.farcaster.xyz/learn/architecture/hubs), [Passport](https://www.passport.xyz/), [EigenTrust by Karma3Labs](https://docs.karma3labs.com/eigentrust)), and the [Optimist NFT collection](https://app.optimism.io/optimist-nft). In order to be consider a trusted user, an address must meet at least two of the following requirements as of 2024-05-21: have a Farcaster ID of 20939, have a Passport score of 20 points or higher, have a Karma3Labs EigenTrust GlobalRank in the top 42,000 of Farcaster users, hold an Optimist NFT in their wallet, or qualified for at least two (out of four) Optimism airdrops.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        trusted_users_onboarded: {
          name: "trusted_users_onboarded",
          description:
            '**Users Onboarded**: Count of trusted users to the Superchain who were onboarded over the RF4 scope period (October 2023 - June 2024) and who interacted with a project within their first 30 days on the Superchain.\nGetting 1 billion users onchain won\u2019t be easy. It will require better onramps and onchain UX than crypto natives are accustomed to. This metric identifies projects that helped onboard new, "trusted users" to the Superchain since October 2023. In order to qualify, a new user has to also be in the set of trusted users. Then, any project on any chain that a user interacted with in their first month on the Superchain is counted. This is often multiple projects per new user. Supporting projects that are the first port of call for new users is essential for expanding the size and reach of the Superchain user\u2019s base.\nA "trusted user" represents an address linked to an account the meets a certain threshold of reputation. Currently, there are several teams in the Optimism ecosystem building reputation models in a privacy-preserving way. This metric aggregates reputation data from multiple platforms ([Farcaster](https://docs.farcaster.xyz/learn/architecture/hubs), [Passport](https://www.passport.xyz/), [EigenTrust by Karma3Labs](https://docs.karma3labs.com/eigentrust)), and the [Optimist NFT collection](https://app.optimism.io/optimist-nft). In order to be consider a trusted user, an address must meet at least two of the following requirements as of 2024-05-21: have a Farcaster ID of 20939, have a Passport score of 20 points or higher, have a Karma3Labs EigenTrust GlobalRank in the top 42,000 of Farcaster users, hold an Optimist NFT in their wallet, or qualified for at least two (out of four) Optimism airdrops.\n',
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        daily_active_addresses: {
          name: "daily_active_addresses",
          description:
            "**Average Daily Active Addresses (DAAs)**: Average of a project\u2019s daily active addresses over the RF4 scope period (October 2023 - June 2024).\nDaily Active Addresses (DAAs) is a more granular view of a project's daily user activity and engagement levels than MAAs (Monthly Active Addresses). A high number of DAAs is a sign that Layer 2s have widespread adoption. While there is minimal cost to creating new addresses to farm a protocol, such farming or Sybil activity is usually short-lived. By averaging the number of active addresses on a daily basis over the RF4 period, this metric smooths out some of the blips and spikes in the data. New projects receive 0s for the days before they launched. Steady or rising DAAs over an extended period is a good signal of widespread adoption. \nThis indicator includes any `from_address` that makes a successful transactions with a `to_address` owned by the project, as well as unique smart contract wallet addresses involved in internal transactions that interact with the canonical EntryPoint ([EIP 4337](https://eips.ethereum.org/EIPS/eip-4337)) contracts.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        trusted_daily_active_users: {
          name: "trusted_daily_active_users",
          description:
            '**Average Trusted Daily Active Users (DAUs)**: Average of a project\u2019s daily active users (trusted users only) over the RF4 scope period (October 2023 - June 2024).\nDaily Active Users (DAUs) is a more granular view of a project\'s daily user activity and engagement levels than MAUs (Monthly Active Users). A high number of trusted DAUs would be a sign that Layer 2s have widespread adoption. The reality today is that there are very few apps that generate high levels of daily, revenue-generating activity from users. By averaging the number of active users on a daily basis over the RF4 period, this metric smooths out some of the blips and spikes in the data. New projects receive 0s for the days before they launched. Indeed, trusted DAUs is a hard metric to crack, but it truly hones in on projects that give their users a reason to come back frequently.\nA "trusted user" represents an address linked to an account the meets a certain threshold of reputation. Currently, there are several teams in the Optimism ecosystem building reputation models in a privacy-preserving way. This metric aggregates reputation data from multiple platforms ([Farcaster](https://docs.farcaster.xyz/learn/architecture/hubs), [Passport](https://www.passport.xyz/), [EigenTrust by Karma3Labs](https://docs.karma3labs.com/eigentrust)), and the [Optimist NFT collection](https://app.optimism.io/optimist-nft). In order to be consider a trusted user, an address must meet at least two of the following requirements as of 2024-05-21: have a Farcaster ID of 20939, have a Passport score of 20 points or higher, have a Karma3Labs EigenTrust GlobalRank in the top 42,000 of Farcaster users, hold an Optimist NFT in their wallet, or qualified for at least two (out of four) Optimism airdrops.\n',
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        monthly_active_addresses: {
          name: "monthly_active_addresses",
          description:
            '**Average Monthly Active Addresses (MAAs)**: Average of a project\u2019s monthly active addresses over the RF4 scope period (October 2023 - June 2024).\nNot all projects have lots of daily users. Some projects are more like utilities that are used once a month or at less regular intervals. Monthly Active Addresses (MAAs) is a key metric for understanding the size and engagement of a project\u2019s user base over a more extended period. One word of cauation: as there is minimal cost to creating new addresses, MAAs may be more susceptible to farming than other metrics like Daily Active Addresses or ones that look only at "trusted users". However, by averaging the number of active addresses on a monthly basis over the RF4 period, this metric does smooth out some of the blips and spikes in the data. New projects receive 0s for the months before they launched.\nThis indicator includes any `from_address` that makes a successful transactions with a `to_address` owned by the project, as well as unique smart contract wallet addresses involved in internal transactions that interact with the canonical EntryPoint ([EIP 4337](https://eips.ethereum.org/EIPS/eip-4337)) contracts.\n',
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        trusted_monthly_active_users: {
          name: "trusted_monthly_active_users",
          description:
            '**Average Trusted Monthly Active Users (MAUs)**: Average of a project\u2019s monthly active users (trusted users only) over the RF4 scope period (October 2023 - June 2024).\nWe all know that attention is fleeting, especially in crypto. MAUs is one of the most important metrics for any project looking to grow a large user base. A project\u2019s average MAUs also provides insights into its ongoing popularity and relevance within the Optimism ecosystem. The metric is calculated by counting the number of distinct trusted users for each month included in the RF4 scope period and then averaging the monthly totals. Newer projects receive 0s for the months before they launched. A consistent or growing base of trusted MAUs is a sign that there is a healthy, thriving community around a project.\nA "trusted user" represents an address linked to an account the meets a certain threshold of reputation. Currently, there are several teams in the Optimism ecosystem building reputation models in a privacy-preserving way. This metric aggregates reputation data from multiple platforms ([Farcaster](https://docs.farcaster.xyz/learn/architecture/hubs), [Passport](https://www.passport.xyz/), [EigenTrust by Karma3Labs](https://docs.karma3labs.com/eigentrust)), and the [Optimist NFT collection](https://app.optimism.io/optimist-nft). In order to be consider a trusted user, an address must meet at least two of the following requirements as of 2024-05-21: have a Farcaster ID of 20939, have a Passport score of 20 points or higher, have a Karma3Labs EigenTrust GlobalRank in the top 42,000 of Farcaster users, hold an Optimist NFT in their wallet, or qualified for at least two (out of four) Optimism airdrops.\n',
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        recurring_addresses: {
          name: "recurring_addresses",
          description:
            '**Recurring Addresses**: Count of addresses that have interacted with the project in at least 3 separate months over the RF4 scope period (October 2023 - June 2024).\nRecurring addresses are a proxy for recurring users. It is especially relevant to projects where users may explicitly choose to interact with the project from a distinct addresses in order to preserve their privacy. By counting the number of distinct addresses that have interacted with a project over the course of at least three distinct calendar months during the RF4 scope period, this metric provides a view of user quality that complements metrics derived from the "trusted user" model. A high count of recurring addresses signals strong project loyalty and a good user experience.\nThis indicator includes any `from_address` that makes a successful transactions with a `to_address` owned by the project, as well as unique smart contract wallet addresses involved in internal transactions that interact with the canonical EntryPoint ([EIP 4337](https://eips.ethereum.org/EIPS/eip-4337)) contracts.          \n',
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        trusted_recurring_users: {
          name: "trusted_recurring_users",
          description:
            '**Trusted Recurring Users**: Count of trusted users who have interacted with the project in at least 3 separate months over the RF4 scope period (October 2023 - June 2024).\nMany crypto natives are curious to try out new protocols. But churn and user retention are major issues. Recurring users represent the most loyal and committed segment of a project\'s user base. This metric considers users who have interacted with a project over the course of at least three distinct calendar months during the RF4 scope period. Thus, it is intended to reflect sustained interest and ongoing engagement over time. A high count of recurring users signals strong project loyalty and a good user experience, and helps separate the fads from the future.\nA "trusted user" represents an address linked to an account the meets a certain threshold of reputation. Currently, there are several teams in the Optimism ecosystem building reputation models in a privacy-preserving way. This metric aggregates reputation data from multiple platforms ([Farcaster](https://docs.farcaster.xyz/learn/architecture/hubs), [Passport](https://www.passport.xyz/), [EigenTrust by Karma3Labs](https://docs.karma3labs.com/eigentrust)), and the [Optimist NFT collection](https://app.optimism.io/optimist-nft). In order to be consider a trusted user, an address must meet at least two of the following requirements as of 2024-05-21: have a Farcaster ID of 20939, have a Passport score of 20 points or higher, have a Karma3Labs EigenTrust GlobalRank in the top 42,000 of Farcaster users, hold an Optimist NFT in their wallet, or qualified for at least two (out of four) Optimism airdrops.\n',
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        power_user_addresses: {
          name: "power_user_addresses",
          description:
            "**Power User Addresses**: Count of 'power user' addresses that have interacted with the project over the RF4 scope period (October 2023 - June 2024).\nThis metric reflects the degree which a project has attracted attention from the most active and engaged users on the Superchain. A `power user` is defined as an address that has made at least 100 transactions, across at least 10 different projects, on at least 30 days, over the RF4 scope period. A project is counted by this metric if has at least one interaction from a power user. Power users are critical early adopters for the ecosystem. \n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        openrank_trusted_users_count: {
          name: "openrank_trusted_users_count",
          description:
            '**OpenRank Trusted Users**: Count of addresses in the badgeholder "web of trust" who have interacted with the project over the RF4 scope period (October 2023 - June 2024).\n[EigenTrust](https://docs.karma3labs.com/eigentrust), aka OpenRank, is a reputation algorithm being applied by Karma3Labs to the Farcaster social graph. To seed the "web of trust", we begin with a list of 132 badgeholder addresses, look up their Farcaster IDs (present for 68 of the 132 addresses), and use OpenRank to identify those users\' 100 closest connections. The result is a set of around 5000 addresses that have the closest social connection to the badgeholder community. Finally, we counts the number of addresses in the web of trust who have interacted with a given project. Note: this is an experimental metric designed and results in an even smaller but potentially higher signal subset of users than the "trusted user" model applied elsewhere.\n',
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        log_gas_fees: {
          name: "log_gas_fees",
          description:
            "**LOGSCALE: Gas Fees**: Sum of a project's total contribution to gas fees across the Superchain over the RF4 scope period October 2023 - June 2024, adjusted to a logarithmic scale.\nGas fees are the primary recurring revenue source for the Superchain and a key indicator of aggregate blockspace demand. A project\u2019s gas fee contribution is influenced by its total volume of contract interactions, the computational complexity of those interactions, and the state of the underlying gas market at the time of those transactions. In the long run, gas fees are what will power Retro Funding and enable it to continue in perpetuity. All members of the Superchain have committed at least 15% of their gross profit from gas fees to Retro Funding. Supporting projects that generate revenue in the form of gas fees helps power the economic engine of the Superchain.\nThis indicator is transformed to a logarithmic scale (`log10(gas_fees + 1)`). Logarithmic scales are useful for metrics that span several orders of magnitude such as gas fees and transactions and have strong compounding effects. On a log scale, a project with an impact metric value of 100 (10^2) is 2X more impactful than one with a value of 10 (10^1), not 10X. Badgeholders are advised to use either a log scale or a normal (linear) scale in their ballots, not both.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        log_transaction_count: {
          name: "log_transaction_count",
          description:
            "**LOGSCALE: Total Transactions**: Count of a project\u2019s transactions over the RF4 scope period October 2023 - June 2024, adjusted to a logarithmic scale.\nOptimism is a Layer 2 roll-up designed to improve the transaction throughput and reduce the fees on Ethereum. Layer 2s are crucial for scaling Ethereum because they help address the network's congestion issues without compromising its security or decentralization. Transaction counts are an important indicator for assessing the adoption and usage of all the new blockspace made available by the Superchain. Projects that have a sustained, high transaction count provide a clear signal of network growth and blockspace demand.\nThis indicator includes successful transactions with a `to_address` owned by the project, as well as internal transactions that originate from one of the project's contracts and interact with the canonical EntryPoint ([EIP 4337](https://eips.ethereum.org/EIPS/eip-4337)) contracts.\nThis indicator is transformed to a logarithmic scale (`log10(gas_fees + 1)`). Logarithmic scales are useful for metrics that span several orders of magnitude such as gas fees and transactions and have strong compounding effects. On a log scale, a project with an impact metric value of 100 (10^2) is 2X more impactful than one with a value of 10 (10^1), not 10X. Badgeholders are advised to use either a log scale or a normal (linear) scale in their ballots, not both.\n",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        log_trusted_transaction_count: {
          name: "log_trusted_transaction_count",
          description:
            '**LOGSCALE: Interactions from Trusted Optimism Users**: Count of a project\u2019s transactions performed by trusted users over the RF4 scope period October 2023 - June 2024, adjusted to a logarithmic scale.\nBots, airdrop farming, and sybil attacks are longstanding problems in crypto. This metric is designed to filter out these types of interactions and focus on the activity of a small subset of trusted users (less than 5% of all active addresses on the Superchain). By tracking interactions specifically from trusted users, we gain a picture of blockspace demand that is less influenced by the effects of bots / farmers / sybils.\nA "trusted user" represents an address linked to an account the meets a certain threshold of reputation. Currently, there are several teams in the Optimism ecosystem building reputation models in a privacy-preserving way. This metric aggregates reputation data from multiple platforms ([Farcaster](https://docs.farcaster.xyz/learn/architecture/hubs), [Passport](https://www.passport.xyz/), [EigenTrust by Karma3Labs](https://docs.karma3labs.com/eigentrust)), and the [Optimist NFT collection](https://app.optimism.io/optimist-nft). In order to be consider a trusted user, an address must meet at least two of the following requirements as of 2024-05-21: have a Farcaster ID of 20939, have a Passport score of 20 points or higher, have a Karma3Labs EigenTrust GlobalRank in the top 42,000 of Farcaster users, hold an Optimist NFT in their wallet, or qualified for at least two (out of four) Optimism airdrops.\nThis indicator is transformed to a logarithmic scale (`log10(gas_fees + 1)`). Logarithmic scales are useful for metrics that span several orders of magnitude such as gas fees and transactions and have strong compounding effects. On a log scale, a project with an impact metric value of 100 (10^2) is 2X more impactful than one with a value of 10 (10^1), not 10X. Badgeholders are advised to use either a log scale or a normal (linear) scale in their ballots, not both.',
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
      },
      meta: { contributors: "oso-team" },
      group: null,
      docs: { show: true, node_color: null },
      patch_path:
        "opensource_observer://warehouse/dbt/models/marts/superchain/rf4_impact_metrics_by_project__schema.yml",
      build_path: null,
      unrendered_config: {
        materialized: "table",
        tags: ["optimism", "retro-funding", "impact-metrics"],
        meta: { contributors: "oso-team" },
      },
      created_at: 1719978676.3437295,
      relation_name:
        "`opensource-observer`.`oso`.`rf4_impact_metrics_by_project`",
      raw_code:
        "{# \n  All impact metrics, grouped by project\n#}\n\nwith metrics as (\n  select * from {{ ref('rf4_gas_fees') }}\n  union all\n  select * from {{ ref('rf4_transactions') }}\n  union all\n  select * from {{ ref('rf4_trusted_transaction_count') }}\n  union all\n  select * from {{ ref('rf4_trusted_users_share_of_transactions') }}\n  union all\n  select * from {{ ref('rf4_trusted_daily_active_users') }}\n  union all\n  select * from {{ ref('rf4_daily_active_addresses') }}\n  union all\n  select * from {{ ref('rf4_trusted_monthly_active_users') }}\n  union all\n  select * from {{ ref('rf4_monthly_active_addresses') }}\n  union all\n  select * from {{ ref('rf4_trusted_users_onboarded') }}\n  union all\n  select * from {{ ref('rf4_trusted_recurring_users') }}\n  union all\n  select * from {{ ref('rf4_recurring_addresses') }}\n  union all\n  select * from {{ ref('rf4_power_user_addresses') }}\n  union all\n  select * from {{ ref('rf4_openrank_trusted_users_count') }}\n),\n\npivot_metrics as (\n  select\n    project_id,\n    MAX(\n      case when metric = 'gas_fees' then amount else 0 end\n    ) as gas_fees,\n    MAX(\n      case when metric = 'transaction_count' then amount else 0 end\n    ) as transaction_count,\n    MAX(\n      case when metric = 'trusted_transaction_count' then amount else 0 end\n    ) as trusted_transaction_count,\n    MAX(\n      case when metric = 'trusted_transaction_share' then amount else 0 end\n    ) as trusted_transaction_share,\n    MAX(\n      case when metric = 'trusted_users_onboarded' then amount else 0 end\n    ) as trusted_users_onboarded,\n    MAX(\n      case when metric = 'trusted_daily_active_users' then amount else 0 end\n    ) as trusted_daily_active_users,\n    MAX(\n      case when metric = 'daily_active_addresses' then amount else 0 end\n    ) as daily_active_addresses,\n    MAX(\n      case when metric = 'trusted_monthly_active_users' then amount else 0 end\n    ) as trusted_monthly_active_users,\n    MAX(\n      case when metric = 'monthly_active_addresses' then amount else 0 end\n    ) as monthly_active_addresses,\n    MAX(\n      case when metric = 'trusted_recurring_users' then amount else 0 end\n    ) as trusted_recurring_users,\n    MAX(\n      case when metric = 'recurring_addresses' then amount else 0 end\n    ) as recurring_addresses,\n    MAX(\n      case when metric = 'power_user_addresses' then amount else 0 end\n    ) as power_user_addresses,\n    MAX(\n      case when metric = 'openrank_trusted_users_count' then amount else 0 end\n    ) as openrank_trusted_users_count\n  from metrics\n  group by project_id\n)\n\nselect\n  rf4_project_eligibility.application_id,\n  rf4_project_eligibility.is_oss,\n  pivot_metrics.gas_fees,\n  pivot_metrics.transaction_count,\n  pivot_metrics.trusted_transaction_count,\n  pivot_metrics.trusted_transaction_share,\n  pivot_metrics.trusted_users_onboarded,\n  pivot_metrics.daily_active_addresses,\n  pivot_metrics.trusted_daily_active_users,\n  pivot_metrics.monthly_active_addresses,\n  pivot_metrics.trusted_monthly_active_users,\n  pivot_metrics.recurring_addresses,\n  pivot_metrics.trusted_recurring_users,\n  pivot_metrics.power_user_addresses,\n  pivot_metrics.openrank_trusted_users_count,\n  COALESCE(LOG10(pivot_metrics.gas_fees + 1), 0) as log_gas_fees,\n  COALESCE(LOG10(pivot_metrics.transaction_count + 1), 0)\n    as log_transaction_count,\n  COALESCE(LOG10(pivot_metrics.trusted_transaction_count + 1), 0)\n    as log_trusted_transaction_count\nfrom pivot_metrics\nleft join {{ ref('projects_v1') }}\n  on pivot_metrics.project_id = projects_v1.project_id\nleft join {{ source(\"static_data_sources\", \"rf4_project_eligibility\") }}\n  on projects_v1.project_name = rf4_project_eligibility.oso_name\nwhere rf4_project_eligibility.is_approved is true",
      language: "sql",
      refs: [
        { name: "rf4_gas_fees", package: null, version: null },
        { name: "rf4_transactions", package: null, version: null },
        { name: "rf4_trusted_transaction_count", package: null, version: null },
        {
          name: "rf4_trusted_users_share_of_transactions",
          package: null,
          version: null,
        },
        {
          name: "rf4_trusted_daily_active_users",
          package: null,
          version: null,
        },
        { name: "rf4_daily_active_addresses", package: null, version: null },
        {
          name: "rf4_trusted_monthly_active_users",
          package: null,
          version: null,
        },
        { name: "rf4_monthly_active_addresses", package: null, version: null },
        { name: "rf4_trusted_users_onboarded", package: null, version: null },
        { name: "rf4_trusted_recurring_users", package: null, version: null },
        { name: "rf4_recurring_addresses", package: null, version: null },
        { name: "rf4_power_user_addresses", package: null, version: null },
        {
          name: "rf4_openrank_trusted_users_count",
          package: null,
          version: null,
        },
        { name: "projects_v1", package: null, version: null },
      ],
      sources: [["static_data_sources", "rf4_project_eligibility"]],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "source.opensource_observer.static_data_sources.rf4_project_eligibility",
          "model.opensource_observer.rf4_gas_fees",
          "model.opensource_observer.rf4_transactions",
          "model.opensource_observer.rf4_trusted_transaction_count",
          "model.opensource_observer.rf4_trusted_users_share_of_transactions",
          "model.opensource_observer.rf4_trusted_daily_active_users",
          "model.opensource_observer.rf4_daily_active_addresses",
          "model.opensource_observer.rf4_trusted_monthly_active_users",
          "model.opensource_observer.rf4_monthly_active_addresses",
          "model.opensource_observer.rf4_trusted_users_onboarded",
          "model.opensource_observer.rf4_trusted_recurring_users",
          "model.opensource_observer.rf4_recurring_addresses",
          "model.opensource_observer.rf4_power_user_addresses",
          "model.opensource_observer.rf4_openrank_trusted_users_count",
          "model.opensource_observer.projects_v1",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/rf4_impact_metrics_by_project.sql",
      compiled: true,
      compiled_code:
        "\n\nwith metrics as (\n  select * from `opensource-observer`.`oso`.`rf4_gas_fees`\n  union all\n  select * from `opensource-observer`.`oso`.`rf4_transactions`\n  union all\n  select * from `opensource-observer`.`oso`.`rf4_trusted_transaction_count`\n  union all\n  select * from `opensource-observer`.`oso`.`rf4_trusted_users_share_of_transactions`\n  union all\n  select * from `opensource-observer`.`oso`.`rf4_trusted_daily_active_users`\n  union all\n  select * from `opensource-observer`.`oso`.`rf4_daily_active_addresses`\n  union all\n  select * from `opensource-observer`.`oso`.`rf4_trusted_monthly_active_users`\n  union all\n  select * from `opensource-observer`.`oso`.`rf4_monthly_active_addresses`\n  union all\n  select * from `opensource-observer`.`oso`.`rf4_trusted_users_onboarded`\n  union all\n  select * from `opensource-observer`.`oso`.`rf4_trusted_recurring_users`\n  union all\n  select * from `opensource-observer`.`oso`.`rf4_recurring_addresses`\n  union all\n  select * from `opensource-observer`.`oso`.`rf4_power_user_addresses`\n  union all\n  select * from `opensource-observer`.`oso`.`rf4_openrank_trusted_users_count`\n),\n\npivot_metrics as (\n  select\n    project_id,\n    MAX(\n      case when metric = 'gas_fees' then amount else 0 end\n    ) as gas_fees,\n    MAX(\n      case when metric = 'transaction_count' then amount else 0 end\n    ) as transaction_count,\n    MAX(\n      case when metric = 'trusted_transaction_count' then amount else 0 end\n    ) as trusted_transaction_count,\n    MAX(\n      case when metric = 'trusted_transaction_share' then amount else 0 end\n    ) as trusted_transaction_share,\n    MAX(\n      case when metric = 'trusted_users_onboarded' then amount else 0 end\n    ) as trusted_users_onboarded,\n    MAX(\n      case when metric = 'trusted_daily_active_users' then amount else 0 end\n    ) as trusted_daily_active_users,\n    MAX(\n      case when metric = 'daily_active_addresses' then amount else 0 end\n    ) as daily_active_addresses,\n    MAX(\n      case when metric = 'trusted_monthly_active_users' then amount else 0 end\n    ) as trusted_monthly_active_users,\n    MAX(\n      case when metric = 'monthly_active_addresses' then amount else 0 end\n    ) as monthly_active_addresses,\n    MAX(\n      case when metric = 'trusted_recurring_users' then amount else 0 end\n    ) as trusted_recurring_users,\n    MAX(\n      case when metric = 'recurring_addresses' then amount else 0 end\n    ) as recurring_addresses,\n    MAX(\n      case when metric = 'power_user_addresses' then amount else 0 end\n    ) as power_user_addresses,\n    MAX(\n      case when metric = 'openrank_trusted_users_count' then amount else 0 end\n    ) as openrank_trusted_users_count\n  from metrics\n  group by project_id\n)\n\nselect\n  rf4_project_eligibility.application_id,\n  rf4_project_eligibility.is_oss,\n  pivot_metrics.gas_fees,\n  pivot_metrics.transaction_count,\n  pivot_metrics.trusted_transaction_count,\n  pivot_metrics.trusted_transaction_share,\n  pivot_metrics.trusted_users_onboarded,\n  pivot_metrics.daily_active_addresses,\n  pivot_metrics.trusted_daily_active_users,\n  pivot_metrics.monthly_active_addresses,\n  pivot_metrics.trusted_monthly_active_users,\n  pivot_metrics.recurring_addresses,\n  pivot_metrics.trusted_recurring_users,\n  pivot_metrics.power_user_addresses,\n  pivot_metrics.openrank_trusted_users_count,\n  COALESCE(LOG10(pivot_metrics.gas_fees + 1), 0) as log_gas_fees,\n  COALESCE(LOG10(pivot_metrics.transaction_count + 1), 0)\n    as log_transaction_count,\n  COALESCE(LOG10(pivot_metrics.trusted_transaction_count + 1), 0)\n    as log_trusted_transaction_count\nfrom pivot_metrics\nleft join `opensource-observer`.`oso`.`projects_v1`\n  on pivot_metrics.project_id = projects_v1.project_id\nleft join `opensource-observer`.`static_data_sources`.`rf4_project_eligibility`\n  on projects_v1.project_name = rf4_project_eligibility.oso_name\nwhere rf4_project_eligibility.is_approved is true",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_trusted_recurring_users": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_trusted_recurring_users",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/metrics/rf4_trusted_recurring_users.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/metrics/rf4_trusted_recurring_users.sql",
      unique_id: "model.opensource_observer.rf4_trusted_recurring_users",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "metrics",
        "rf4_trusted_recurring_users",
      ],
      alias: "rf4_trusted_recurring_users",
      checksum: {
        name: "sha256",
        checksum:
          "e4a684255ecba8e951895c9990cdaab630e6a193e6a95b079d47230753858cb3",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.4211586,
      relation_name:
        "`opensource-observer`.`oso`.`rf4_trusted_recurring_users`",
      raw_code:
        "with txns as (\n  select\n    project_id,\n    trusted_user_id,\n    bucket_day,\n    TIMESTAMP_TRUNC(bucket_day, month) as bucket_month\n  from {{ ref('rf4_events_daily_to_project') }}\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and bucket_day >= '2023-10-01'\n    and trusted_user_id is not null\n),\n\nuser_stats as (\n  select\n    project_id,\n    trusted_user_id,\n    COUNT(distinct bucket_month) as months,\n    MAX(bucket_day) as last_day\n  from txns\n  group by\n    project_id,\n    trusted_user_id\n)\n\nselect\n  project_id,\n  'trusted_recurring_users' as metric,\n  COUNT(distinct trusted_user_id) as amount\nfrom user_stats\nwhere\n  months >= 3\n  -- and last_day >= '2024-04-01'\ngroup by\n  project_id",
      language: "sql",
      refs: [
        { name: "rf4_events_daily_to_project", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.rf4_events_daily_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/metrics/rf4_trusted_recurring_users.sql",
      compiled: true,
      compiled_code:
        "with txns as (\n  select\n    project_id,\n    trusted_user_id,\n    bucket_day,\n    TIMESTAMP_TRUNC(bucket_day, month) as bucket_month\n  from `opensource-observer`.`oso`.`rf4_events_daily_to_project`\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and bucket_day >= '2023-10-01'\n    and trusted_user_id is not null\n),\n\nuser_stats as (\n  select\n    project_id,\n    trusted_user_id,\n    COUNT(distinct bucket_month) as months,\n    MAX(bucket_day) as last_day\n  from txns\n  group by\n    project_id,\n    trusted_user_id\n)\n\nselect\n  project_id,\n  'trusted_recurring_users' as metric,\n  COUNT(distinct trusted_user_id) as amount\nfrom user_stats\nwhere\n  months >= 3\n  -- and last_day >= '2024-04-01'\ngroup by\n  project_id",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_trusted_users_onboarded": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_trusted_users_onboarded",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/metrics/rf4_trusted_users_onboarded.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/metrics/rf4_trusted_users_onboarded.sql",
      unique_id: "model.opensource_observer.rf4_trusted_users_onboarded",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "metrics",
        "rf4_trusted_users_onboarded",
      ],
      alias: "rf4_trusted_users_onboarded",
      checksum: {
        name: "sha256",
        checksum:
          "d4ea885be2dacfdcd3ecca7444aa7baa3a96bd49eeb0a6fe08e946a420fc43aa",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.4231884,
      relation_name:
        "`opensource-observer`.`oso`.`rf4_trusted_users_onboarded`",
      raw_code:
        "with user_stats as (\n  select\n    trusted_user_id,\n    MIN(bucket_day) as first_day\n  from {{ ref('rf4_events_daily_to_project') }}\n  where trusted_user_id is not null\n  group by trusted_user_id\n),\n\nfirst_txns as (\n  select\n    events.project_id,\n    events.trusted_user_id,\n    events.bucket_day,\n    user_stats.first_day\n  from {{ ref('rf4_events_daily_to_project') }} as events\n  left join user_stats\n    on events.trusted_user_id = user_stats.trusted_user_id\n  where\n    events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and events.trusted_user_id is not null\n    and events.bucket_day <= DATE_ADD(user_stats.first_day, interval 30 day)\n    and user_stats.first_day >= '2023-10-01'\n)\n\nselect\n  project_id,\n  'trusted_users_onboarded' as metric,\n  COUNT(distinct trusted_user_id) as amount\nfrom first_txns\ngroup by\n  project_id",
      language: "sql",
      refs: [
        { name: "rf4_events_daily_to_project", package: null, version: null },
        { name: "rf4_events_daily_to_project", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.rf4_events_daily_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/metrics/rf4_trusted_users_onboarded.sql",
      compiled: true,
      compiled_code:
        "with user_stats as (\n  select\n    trusted_user_id,\n    MIN(bucket_day) as first_day\n  from `opensource-observer`.`oso`.`rf4_events_daily_to_project`\n  where trusted_user_id is not null\n  group by trusted_user_id\n),\n\nfirst_txns as (\n  select\n    events.project_id,\n    events.trusted_user_id,\n    events.bucket_day,\n    user_stats.first_day\n  from `opensource-observer`.`oso`.`rf4_events_daily_to_project` as events\n  left join user_stats\n    on events.trusted_user_id = user_stats.trusted_user_id\n  where\n    events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and events.trusted_user_id is not null\n    and events.bucket_day <= DATE_ADD(user_stats.first_day, interval 30 day)\n    and user_stats.first_day >= '2023-10-01'\n)\n\nselect\n  project_id,\n  'trusted_users_onboarded' as metric,\n  COUNT(distinct trusted_user_id) as amount\nfrom first_txns\ngroup by\n  project_id",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_monthly_active_addresses": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_monthly_active_addresses",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/metrics/rf4_monthly_active_addresses.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/metrics/rf4_monthly_active_addresses.sql",
      unique_id: "model.opensource_observer.rf4_monthly_active_addresses",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "metrics",
        "rf4_monthly_active_addresses",
      ],
      alias: "rf4_monthly_active_addresses",
      checksum: {
        name: "sha256",
        checksum:
          "869352c60c78275afe120a5b9302941f3525753efa141022bbd42b34ce319637",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.4255314,
      relation_name:
        "`opensource-observer`.`oso`.`rf4_monthly_active_addresses`",
      raw_code:
        "{# TODO: double check the math on total_months #}\nwith transactions_std as (\n  select\n    project_id,\n    from_artifact_name as address,\n    TIMESTAMP_TRUNC(bucket_day, month) as bucket_month\n  from {{ ref('rf4_events_daily_to_project') }}\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and bucket_day >= '2023-10-01'\n),\n\ntransactions_4337 as (\n  select\n    project_id,\n    to_artifact_name as address,\n    TIMESTAMP_TRUNC(bucket_day, month) as bucket_month\n  from {{ ref('rf4_4337_events') }}\n  where\n    event_type = '4337_INTERACTION'\n    and bucket_day >= '2023-10-01'\n),\n\ntxns as (\n  select * from transactions_std\n  union all\n  select * from transactions_4337\n),\n\nmaas as (\n  select\n    project_id,\n    bucket_month,\n    COUNT(distinct address) as active_addresses\n  from txns\n  group by\n    project_id,\n    bucket_month\n),\n\ntotal_months as (\n  select (DATE_DIFF(max_month, min_month, day) + 30) / 30 as months\n  from (\n    select\n      MIN(bucket_month) as min_month,\n      MAX(bucket_month) as max_month\n    from txns\n  )\n)\n\nselect\n  project_id,\n  'monthly_active_addresses' as metric,\n  SUM(active_addresses) / (select months from total_months) as amount\nfrom maas\ngroup by\n  project_id",
      language: "sql",
      refs: [
        { name: "rf4_events_daily_to_project", package: null, version: null },
        { name: "rf4_4337_events", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.rf4_events_daily_to_project",
          "model.opensource_observer.rf4_4337_events",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/metrics/rf4_monthly_active_addresses.sql",
      compiled: true,
      compiled_code:
        "\nwith transactions_std as (\n  select\n    project_id,\n    from_artifact_name as address,\n    TIMESTAMP_TRUNC(bucket_day, month) as bucket_month\n  from `opensource-observer`.`oso`.`rf4_events_daily_to_project`\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and bucket_day >= '2023-10-01'\n),\n\ntransactions_4337 as (\n  select\n    project_id,\n    to_artifact_name as address,\n    TIMESTAMP_TRUNC(bucket_day, month) as bucket_month\n  from `opensource-observer`.`oso`.`rf4_4337_events`\n  where\n    event_type = '4337_INTERACTION'\n    and bucket_day >= '2023-10-01'\n),\n\ntxns as (\n  select * from transactions_std\n  union all\n  select * from transactions_4337\n),\n\nmaas as (\n  select\n    project_id,\n    bucket_month,\n    COUNT(distinct address) as active_addresses\n  from txns\n  group by\n    project_id,\n    bucket_month\n),\n\ntotal_months as (\n  select (DATE_DIFF(max_month, min_month, day) + 30) / 30 as months\n  from (\n    select\n      MIN(bucket_month) as min_month,\n      MAX(bucket_month) as max_month\n    from txns\n  )\n)\n\nselect\n  project_id,\n  'monthly_active_addresses' as metric,\n  SUM(active_addresses) / (select months from total_months) as amount\nfrom maas\ngroup by\n  project_id",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_daily_active_addresses": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_daily_active_addresses",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/metrics/rf4_daily_active_addresses.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/metrics/rf4_daily_active_addresses.sql",
      unique_id: "model.opensource_observer.rf4_daily_active_addresses",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "metrics",
        "rf4_daily_active_addresses",
      ],
      alias: "rf4_daily_active_addresses",
      checksum: {
        name: "sha256",
        checksum:
          "56bfc798ff42e45f067dbca382f10b24fb302d7762dd171286b10a2a4cce22bf",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.4281526,
      relation_name: "`opensource-observer`.`oso`.`rf4_daily_active_addresses`",
      raw_code:
        "with transactions_std as (\n  select\n    bucket_day,\n    project_id,\n    from_artifact_name as address\n  from {{ ref('rf4_events_daily_to_project') }}\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and bucket_day >= '2023-10-01'\n),\n\ntransactions_4337 as (\n  select\n    bucket_day,\n    project_id,\n    to_artifact_name as address\n  from {{ ref('rf4_4337_events') }}\n  where\n    event_type = '4337_INTERACTION'\n    and bucket_day >= '2023-10-01'\n),\n\ntxns as (\n  select * from transactions_std\n  union all\n  select * from transactions_4337\n),\n\ndaas as (\n  select\n    project_id,\n    bucket_day,\n    COUNT(distinct address) as active_addresses\n  from txns\n  group by\n    project_id,\n    bucket_day\n),\n\ntotal_days as (\n  select DATE_DIFF(max_day, min_day, day) + 1 as days\n  from (\n    select\n      MIN(bucket_day) as min_day,\n      MAX(bucket_day) as max_day\n    from txns\n  )\n)\n\nselect\n  project_id,\n  'daily_active_addresses' as metric,\n  SUM(active_addresses) / (select days from total_days) as amount\nfrom daas\ngroup by\n  project_id",
      language: "sql",
      refs: [
        { name: "rf4_events_daily_to_project", package: null, version: null },
        { name: "rf4_4337_events", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.rf4_events_daily_to_project",
          "model.opensource_observer.rf4_4337_events",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/metrics/rf4_daily_active_addresses.sql",
      compiled: true,
      compiled_code:
        "with transactions_std as (\n  select\n    bucket_day,\n    project_id,\n    from_artifact_name as address\n  from `opensource-observer`.`oso`.`rf4_events_daily_to_project`\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and bucket_day >= '2023-10-01'\n),\n\ntransactions_4337 as (\n  select\n    bucket_day,\n    project_id,\n    to_artifact_name as address\n  from `opensource-observer`.`oso`.`rf4_4337_events`\n  where\n    event_type = '4337_INTERACTION'\n    and bucket_day >= '2023-10-01'\n),\n\ntxns as (\n  select * from transactions_std\n  union all\n  select * from transactions_4337\n),\n\ndaas as (\n  select\n    project_id,\n    bucket_day,\n    COUNT(distinct address) as active_addresses\n  from txns\n  group by\n    project_id,\n    bucket_day\n),\n\ntotal_days as (\n  select DATE_DIFF(max_day, min_day, day) + 1 as days\n  from (\n    select\n      MIN(bucket_day) as min_day,\n      MAX(bucket_day) as max_day\n    from txns\n  )\n)\n\nselect\n  project_id,\n  'daily_active_addresses' as metric,\n  SUM(active_addresses) / (select days from total_days) as amount\nfrom daas\ngroup by\n  project_id",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_power_user_addresses": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_power_user_addresses",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/metrics/rf4_power_user_addresses.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/metrics/rf4_power_user_addresses.sql",
      unique_id: "model.opensource_observer.rf4_power_user_addresses",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "metrics",
        "rf4_power_user_addresses",
      ],
      alias: "rf4_power_user_addresses",
      checksum: {
        name: "sha256",
        checksum:
          "e714bd0a68783144b5265f6cc971a62786341379f55efd95a2ba700efd6c77d3",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.4306304,
      relation_name: "`opensource-observer`.`oso`.`rf4_power_user_addresses`",
      raw_code:
        "with txns as (\n  select\n    project_id,\n    from_artifact_name,\n    bucket_day,\n    amount\n  from {{ ref('rf4_events_daily_to_project') }}\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and bucket_day >= '2023-10-01'\n),\n\naddress_stats as (\n  select\n    from_artifact_name,\n    COUNT(distinct bucket_day) as days_count,\n    COUNT(distinct project_id) as project_count,\n    SUM(amount) as txns_count\n  from txns\n  group by\n    from_artifact_name\n),\n\npower_users as (\n  select from_artifact_name\n  from address_stats\n  where\n    days_count >= 30\n    and project_count >= 10\n    and txns_count >= 100\n)\n\nselect\n  txns.project_id,\n  'power_user_addresses' as metric,\n  COUNT(distinct txns.from_artifact_name) as amount\nfrom txns\nleft join power_users\n  on txns.from_artifact_name = power_users.from_artifact_name\nwhere\n  power_users.from_artifact_name is not null\ngroup by\n  txns.project_id",
      language: "sql",
      refs: [
        { name: "rf4_events_daily_to_project", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.rf4_events_daily_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/metrics/rf4_power_user_addresses.sql",
      compiled: true,
      compiled_code:
        "with txns as (\n  select\n    project_id,\n    from_artifact_name,\n    bucket_day,\n    amount\n  from `opensource-observer`.`oso`.`rf4_events_daily_to_project`\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and bucket_day >= '2023-10-01'\n),\n\naddress_stats as (\n  select\n    from_artifact_name,\n    COUNT(distinct bucket_day) as days_count,\n    COUNT(distinct project_id) as project_count,\n    SUM(amount) as txns_count\n  from txns\n  group by\n    from_artifact_name\n),\n\npower_users as (\n  select from_artifact_name\n  from address_stats\n  where\n    days_count >= 30\n    and project_count >= 10\n    and txns_count >= 100\n)\n\nselect\n  txns.project_id,\n  'power_user_addresses' as metric,\n  COUNT(distinct txns.from_artifact_name) as amount\nfrom txns\nleft join power_users\n  on txns.from_artifact_name = power_users.from_artifact_name\nwhere\n  power_users.from_artifact_name is not null\ngroup by\n  txns.project_id",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_trusted_monthly_active_users": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_trusted_monthly_active_users",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/metrics/rf4_trusted_monthly_active_users.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/metrics/rf4_trusted_monthly_active_users.sql",
      unique_id: "model.opensource_observer.rf4_trusted_monthly_active_users",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "metrics",
        "rf4_trusted_monthly_active_users",
      ],
      alias: "rf4_trusted_monthly_active_users",
      checksum: {
        name: "sha256",
        checksum:
          "3a858ed57b90c51c1525135da158ebac2c2a524a2a6dcfc0d31f3749061002d4",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.432762,
      relation_name:
        "`opensource-observer`.`oso`.`rf4_trusted_monthly_active_users`",
      raw_code:
        "{# TODO: double check the math on total_months #}\nwith txns as (\n  select\n    project_id,\n    trusted_user_id,\n    TIMESTAMP_TRUNC(bucket_day, month) as bucket_month\n  from {{ ref('rf4_events_daily_to_project') }}\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and bucket_day >= '2023-10-01'\n    and trusted_user_id is not null\n),\n\nmaus as (\n  select\n    project_id,\n    bucket_month,\n    COUNT(distinct trusted_user_id) as trusted_users\n  from txns\n  group by\n    project_id,\n    bucket_month\n),\n\ntotal_months as (\n  select (DATE_DIFF(max_month, min_month, day) + 30) / 30 as months\n  from (\n    select\n      MIN(bucket_month) as min_month,\n      MAX(bucket_month) as max_month\n    from txns\n  )\n)\n\nselect\n  project_id,\n  'trusted_monthly_active_users' as metric,\n  SUM(trusted_users) / (select months from total_months) as amount\nfrom maus\ngroup by\n  project_id",
      language: "sql",
      refs: [
        { name: "rf4_events_daily_to_project", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.rf4_events_daily_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/metrics/rf4_trusted_monthly_active_users.sql",
      compiled: true,
      compiled_code:
        "\nwith txns as (\n  select\n    project_id,\n    trusted_user_id,\n    TIMESTAMP_TRUNC(bucket_day, month) as bucket_month\n  from `opensource-observer`.`oso`.`rf4_events_daily_to_project`\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and bucket_day >= '2023-10-01'\n    and trusted_user_id is not null\n),\n\nmaus as (\n  select\n    project_id,\n    bucket_month,\n    COUNT(distinct trusted_user_id) as trusted_users\n  from txns\n  group by\n    project_id,\n    bucket_month\n),\n\ntotal_months as (\n  select (DATE_DIFF(max_month, min_month, day) + 30) / 30 as months\n  from (\n    select\n      MIN(bucket_month) as min_month,\n      MAX(bucket_month) as max_month\n    from txns\n  )\n)\n\nselect\n  project_id,\n  'trusted_monthly_active_users' as metric,\n  SUM(trusted_users) / (select months from total_months) as amount\nfrom maus\ngroup by\n  project_id",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_openrank_trusted_users_count": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_openrank_trusted_users_count",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/metrics/rf4_openrank_trusted_users_count.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/metrics/rf4_openrank_trusted_users_count.sql",
      unique_id: "model.opensource_observer.rf4_openrank_trusted_users_count",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "metrics",
        "rf4_openrank_trusted_users_count",
      ],
      alias: "rf4_openrank_trusted_users_count",
      checksum: {
        name: "sha256",
        checksum:
          "1199fd6d6d2d8914055b4437a4c58d901f5b12702f12739d24a611cfdfc06340",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.4347925,
      relation_name:
        "`opensource-observer`.`oso`.`rf4_openrank_trusted_users_count`",
      raw_code:
        "{% set badgeholder_addresses = [\n  '0x60ca282757ba67f3adbf21f3ba2ebe4ab3eb01fc', '0x9934465ee73beaf148b1b3ff232c8cd86c4c2c63', '0x534631bcf33bdb069fb20a93d2fdb9e4d4dd42cf', '0x5872ce037211233b9f6f5095c25988021f270c21', '0x75cac0ceb8a39ddb4942a83ad2aafaf0c2a3e13f', '0x9c949881084dcbd97237f786710ab8e52a457136', '0x73186b2a81952c2340c4eb2e74e89869e1183df0', '0x288c53a1ba857ead34ad0e79f644087f8174185a', '0x894aa5f1e45454677a8560dde3b45cb5c427ef92', '0x648aa14e4424e0825a5ce739c8c68610e143fb79', '0x34aa3f359a9d614239015126635ce7732c18fdf3', '0x14276eb29e90541831cb94c80331484ae6d2a1d8', '0xc5cd017ce8efd2fefedf114350657394531477ae', '0x7fc80fad32ec41fd5cfcc14eee9c31953b6b4a8b', '0x488b2608a66e5d32e5a91eba21a198bd3fd8bcd9', '0x0331969e189d63fbc31d771bb04ab44227d748d8', '0x17640d0d8c93bf710b6ee4208997bb727b5b7bc2', '0x5a5d9ab7b1bd978f80909503ebb828879daca9c3', '0xe4c3768f48d4e676ae48c189db726edf8c1d401e', '0xdc0a92c350a52b6583e235a57901b8731af8b249', '0x51448923d8a215a5a8cd872a51f22c2f5c43b444', '0xef32eb37f3e8b4bdddf99879b23015f309ed7304', '0x3b60e31cfc48a9074cd5bebb26c9eaa77650a43f', '0xac3a69dd4a8fecc18b172bfa9643d6b0863819c8', '0x57893e666bd15e886d74751b0879361a3383b57a', '0x4fd6b3204a6ab48978018b25821682f090840333', '0xa2bbe92f4e320185dd42261897464f60c9a05a35', '0x634c474a393e4498bc2f0c1dee16a50e9e0ebe2b', '0x308fedfb88f6e85f27b85c8011ccb9b5e15bcbf7', '0xeee718c1e522ecb4b609265db7a83ab48ea0b06f', '0x5507dbd48a5a5bace8a6030e878cc4e0af147c33', '0x64fed9e56b548343e7bb47c49ecd7ffa9f1a34fe', '0x69e271483c38ed4902a55c3ea8aab9e7cc8617e5', '0x146cfed833cc926b16b0da9257e8a281c2add9f3', '0x885c327cad2aebb969dfaab4c928b73ca17e3887', '0x8eb9e5e5375b72ee7c5cb786ce8564d854c26a86', '0x7a48a728d9fd2d5a55c545c4378e5ba909349e90', '0x12681667bb220521c222f50ece5eb752046bc144', '0xda60aceb12a1a61d09b008ae4a60c760db32220f', '0xdca1bb1fc782ea3fa76ea4ada42af10c85766b6a', '0xde2b6860cb3212a6a1f8f8628abfe076723a4b39', '0xe4239eb12c1c6e5a84727db0a7b0507311eb5389', '0x66946def4ba6153c500d743b7a5febfc1654d6bd', '0xdcf7be2ff93e1a7671724598b1526f3a33b1ec25', '0x7ae8b0d6353f0931eb9fac0a3562fa9e4c6ff933', '0x839395e20bbb182fa440d08f850e6c7a8f6f0780', '0x06f455e2c297a4ae015191fa7a4a11c77c5b1b7c', '0x8f07bc36ff569312fdc41f3867d80bbd2fe94b76', '0xd35e119782059a27fead4edda8b555f393650bc8', '0x6dc43be93a8b5fd37dc16f24872babc6da5e5e3e', '0xdb150346155675dd0c93efd960d5985244a34820', '0x6adea326faea1b688af33df59e18f7a819bcaa4f', '0x61b647d3b5a04eec7e78b1d9cfbf9dea593c7865', '0xe422d6c46a69e989ba6468ccd0435cb0c5c243e3', '0x3db5b38ef4b433d9c6a664bd35551be73313189a', '0xb0623c91c65621df716ab8afe5f66656b21a9108', '0x94db037207f6fb697dbd33524aadffd108819dc8', '0x53c61cfb8128ad59244e8c1d26109252ace23d14', '0x75536cf4f01c2bfa528f5c74ddc1232db3af3ee5', '0x66da63b03feca7dd44a5bb023bb3645d3252fa32', '0xa2bf1b0a7e079767b4701b5a1d9d5700eb42d1d1', '0x9194efdf03174a804f3552f4f7b7a4bb74badb7f', '0x00de4b13153673bcae2616b67bf822500d325fc3', '0x28f569cc6c29d804a1720edc16bf1ebab2ea35b4', '0xa142ab9eab9264807a41f0e5cbdab877d204e233', '0xc2e2b715d9e302947ec7e312fd2384b5a1296099', '0x5d36a202687fd6bd0f670545334bf0b4827cc1e2', '0x2b888954421b424c5d3d9ce9bb67c9bd47537d12', '0x1c9a6c17ba87451520cc4aa4ca63db07dc180242', '0x5e349eca2dc61abcd9dd99ce94d04136151a09ee', '0xbc39fb41fe0229352774930c5aa3bf1635c2665f', '0xdd7a79b1b6e8dd444f99d68a7d493a85556944a2', '0x801707059a55d748b23b02043c71b7a3d976f071', '0xe53e89d978ff1da716f80baa6e6d8b3fa23f2284', '0x396a34c10b11e33a4bf6f3e6a419a23c54ad34fb', '0x7f22646e85da79953ac09e9b45ee1b3be3a42abc', '0xf68d2bfcecd7895bba05a7451dd09a1749026454', '0x585639fbf797c1258eba8875c080eb63c833d252', '0x1e6d9f536a5d1cc04fc13b3133efdb90c8ee5ea1', '0xabf28f8d9adfb2255f4a059e37d3bce9104969db', '0x434f5325ddcdbbfcce64be2617c72c4aa33ec3e7', '0xdcf09a83e9cc4611b2215bfb7116bfaf5e906d3d', '0x6eda5acaff7f5964e1ecc3fd61c62570c186ca0c', '0x98ab20307fdaba1ce8b16d69d22461c6dbe85459', '0x7899d9b1181cbb427b0b1be0684c096c260f7474', '0x8c50651d964b1a573ba0cf51980ca51d9e42623c', '0x826976d7c600d45fb8287ca1d7c76fc8eb732030', '0x53e0b897eae600b2f6855fce4a42482e9229d2c2', '0x66810420d110919a0e8b550fde3fe24d50ef0e26', '0x5554672e67ba866b9861701d0e0494ab324ad19a', '0x576f1e53afe5e99b2257258c7e3248d3a1822548', '0xf4b0556b9b6f53e00a1fdd2b0478ce841991d8fa', '0x1de2a056508e0d0dd88a88f1f5cdf9cfa510795c', '0x07bf3cda34aa78d92949bbdce31520714ab5b228', '0xa3eac0016f6581ac34768c0d4b99ddcd88071c3c', '0x925afeb19355e289ed1346ede709633ca8788b25', '0xdadd7c883288cfe2e257b0a361865e5e9349808b', '0x429f9ada43e9f345cbb85ec88681bb70df808892', '0x665d84fffddd72d24df555e6b065b833478dffca', '0x69dc230b06a15796e3f42baf706e0e55d4d5eaa1', '0x5555763613a12d8f3e73be831dff8598089d3dca', '0x842bb1bb84cc8a3d6277b0ff9729d22d55e9c50b', '0xbf430a49c4d85aeed3908619d5387a1fbf8e74a9', '0x48a63097e1ac123b1f5a8bbffafa4afa8192fab0', '0xa50d0e425461ccab26ef30104cdd879b90db3843', '0x1f5d295778796a8b9f29600a585ab73d452acb1c', '0x512fce9b07ce64590849115ee6b32fd40ec0f5f3', '0xaeb99a255c3a243ab3e4f654041e9bf5340cf313', '0x15c6ac4cf1b5e49c44332fb0a1043ccab19db80a', '0x399e0ae23663f27181ebb4e66ec504b3aab25541', '0xebb03f5a580ff088bd4269f88a0cfe5eaf00d2b0', '0x490c91f38ec57e3ab00811e0c51a62bfed7e81f4', '0xcf79c7eaec5bdc1a9e32d099c5d6bdf67e4cf6e8', '0x45a10f35befa4ab841c77860204b133118b7ccae', '0x00409fc839a2ec2e6d12305423d37cd011279c09', '0xf503017d7baf7fbc0fff7492b751025c6a78179b', '0x29c4dbc1a81d06c9aa2faed93bb8b4a78f3eabdb', '0x006a8a496889e9983a5256f34b608ee9569ba319', '0x55aed0ce035883626e536254dda2f23a5b5d977f', '0x616cad18642f45d3fa5fcaad0a2d81764a9cba84', '0x07fda67513ec0897866098a11dc3858089d4a505', '0x91031dcfdea024b4d51e775486111d2b2a715871', '0xd8da6bf26964af9d7eed9e03e53415d37aa96045', '0x0f2ce18919b4eb9838760cfdda65e4c8766e9c19', '0xb8c6da1c1e8a4473f290941278e66bfdbe4fd6c8', '0xd31b671f1a398b519222fdaba5ab5464b9f2a3fa', '0xbc3ed6b537f2980e66f396fe14210a56ba3f72c4', '0xdb5781a835b60110298ff7205d8ef9678ff1f800', '0x378c23b326504df4d29c81ba6757f53b2c59f315', '0x23936429fc179da0e1300644fb3b489c736d562f', '0x1d3bf13f8f7a83390d03db5e23a950778e1d1309', '0x92bf20563e747b2f8711549be17a9d7b876c4053'\n] %}\n\nwith badgeholders as (\n  select\n    address,\n    fid\n  from {{ ref('stg_farcaster__addresses') }}\n  where address in (\n    {% for address in badgeholder_addresses %}\n      {% if not loop.last %}'{{ address }}',\n      {% else %}\n        '{{ address }}'\n      {% endif %}\n    {% endfor %}\n  )\n),\n\nlocal_trust_fids as (\n  select cast(peer_farcaster_id as string) as fid\n  from {{ ref('stg_karma3__localtrust') }}\n  where\n    cast(farcaster_id as string) in (select fid from badgeholders)\n    and eigentrust_rank < 100\n    and strategy_id = 1\n),\n\nweb_of_trust as (\n  select fid from local_trust_fids\n  union all\n  select fid from badgeholders\n),\n\ntrusted_addresses as (\n  select\n    address,\n    fid\n  from {{ ref('stg_farcaster__addresses') }}\n  where fid in (\n    select fid\n    from web_of_trust\n  )\n)\n\nselect\n  events.project_id,\n  'openrank_trusted_users_count' as metric,\n  count(distinct trusted_addresses.fid) as amount\nfrom {{ ref('rf4_events_daily_to_project') }} as events\nleft join trusted_addresses\n  on events.from_artifact_name = trusted_addresses.address\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  and events.bucket_day >= '2023-10-01'\n  and trusted_addresses.fid is not null\ngroup by\n  events.project_id",
      language: "sql",
      refs: [
        { name: "stg_farcaster__addresses", package: null, version: null },
        { name: "stg_karma3__localtrust", package: null, version: null },
        { name: "stg_farcaster__addresses", package: null, version: null },
        { name: "rf4_events_daily_to_project", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.stg_farcaster__addresses",
          "model.opensource_observer.stg_karma3__localtrust",
          "model.opensource_observer.rf4_events_daily_to_project",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/metrics/rf4_openrank_trusted_users_count.sql",
      compiled: true,
      compiled_code:
        "\n\nwith badgeholders as (\n  select\n    address,\n    fid\n  from `opensource-observer`.`oso`.`stg_farcaster__addresses`\n  where address in (\n    \n      '0x60ca282757ba67f3adbf21f3ba2ebe4ab3eb01fc',\n      \n    \n      '0x9934465ee73beaf148b1b3ff232c8cd86c4c2c63',\n      \n    \n      '0x534631bcf33bdb069fb20a93d2fdb9e4d4dd42cf',\n      \n    \n      '0x5872ce037211233b9f6f5095c25988021f270c21',\n      \n    \n      '0x75cac0ceb8a39ddb4942a83ad2aafaf0c2a3e13f',\n      \n    \n      '0x9c949881084dcbd97237f786710ab8e52a457136',\n      \n    \n      '0x73186b2a81952c2340c4eb2e74e89869e1183df0',\n      \n    \n      '0x288c53a1ba857ead34ad0e79f644087f8174185a',\n      \n    \n      '0x894aa5f1e45454677a8560dde3b45cb5c427ef92',\n      \n    \n      '0x648aa14e4424e0825a5ce739c8c68610e143fb79',\n      \n    \n      '0x34aa3f359a9d614239015126635ce7732c18fdf3',\n      \n    \n      '0x14276eb29e90541831cb94c80331484ae6d2a1d8',\n      \n    \n      '0xc5cd017ce8efd2fefedf114350657394531477ae',\n      \n    \n      '0x7fc80fad32ec41fd5cfcc14eee9c31953b6b4a8b',\n      \n    \n      '0x488b2608a66e5d32e5a91eba21a198bd3fd8bcd9',\n      \n    \n      '0x0331969e189d63fbc31d771bb04ab44227d748d8',\n      \n    \n      '0x17640d0d8c93bf710b6ee4208997bb727b5b7bc2',\n      \n    \n      '0x5a5d9ab7b1bd978f80909503ebb828879daca9c3',\n      \n    \n      '0xe4c3768f48d4e676ae48c189db726edf8c1d401e',\n      \n    \n      '0xdc0a92c350a52b6583e235a57901b8731af8b249',\n      \n    \n      '0x51448923d8a215a5a8cd872a51f22c2f5c43b444',\n      \n    \n      '0xef32eb37f3e8b4bdddf99879b23015f309ed7304',\n      \n    \n      '0x3b60e31cfc48a9074cd5bebb26c9eaa77650a43f',\n      \n    \n      '0xac3a69dd4a8fecc18b172bfa9643d6b0863819c8',\n      \n    \n      '0x57893e666bd15e886d74751b0879361a3383b57a',\n      \n    \n      '0x4fd6b3204a6ab48978018b25821682f090840333',\n      \n    \n      '0xa2bbe92f4e320185dd42261897464f60c9a05a35',\n      \n    \n      '0x634c474a393e4498bc2f0c1dee16a50e9e0ebe2b',\n      \n    \n      '0x308fedfb88f6e85f27b85c8011ccb9b5e15bcbf7',\n      \n    \n      '0xeee718c1e522ecb4b609265db7a83ab48ea0b06f',\n      \n    \n      '0x5507dbd48a5a5bace8a6030e878cc4e0af147c33',\n      \n    \n      '0x64fed9e56b548343e7bb47c49ecd7ffa9f1a34fe',\n      \n    \n      '0x69e271483c38ed4902a55c3ea8aab9e7cc8617e5',\n      \n    \n      '0x146cfed833cc926b16b0da9257e8a281c2add9f3',\n      \n    \n      '0x885c327cad2aebb969dfaab4c928b73ca17e3887',\n      \n    \n      '0x8eb9e5e5375b72ee7c5cb786ce8564d854c26a86',\n      \n    \n      '0x7a48a728d9fd2d5a55c545c4378e5ba909349e90',\n      \n    \n      '0x12681667bb220521c222f50ece5eb752046bc144',\n      \n    \n      '0xda60aceb12a1a61d09b008ae4a60c760db32220f',\n      \n    \n      '0xdca1bb1fc782ea3fa76ea4ada42af10c85766b6a',\n      \n    \n      '0xde2b6860cb3212a6a1f8f8628abfe076723a4b39',\n      \n    \n      '0xe4239eb12c1c6e5a84727db0a7b0507311eb5389',\n      \n    \n      '0x66946def4ba6153c500d743b7a5febfc1654d6bd',\n      \n    \n      '0xdcf7be2ff93e1a7671724598b1526f3a33b1ec25',\n      \n    \n      '0x7ae8b0d6353f0931eb9fac0a3562fa9e4c6ff933',\n      \n    \n      '0x839395e20bbb182fa440d08f850e6c7a8f6f0780',\n      \n    \n      '0x06f455e2c297a4ae015191fa7a4a11c77c5b1b7c',\n      \n    \n      '0x8f07bc36ff569312fdc41f3867d80bbd2fe94b76',\n      \n    \n      '0xd35e119782059a27fead4edda8b555f393650bc8',\n      \n    \n      '0x6dc43be93a8b5fd37dc16f24872babc6da5e5e3e',\n      \n    \n      '0xdb150346155675dd0c93efd960d5985244a34820',\n      \n    \n      '0x6adea326faea1b688af33df59e18f7a819bcaa4f',\n      \n    \n      '0x61b647d3b5a04eec7e78b1d9cfbf9dea593c7865',\n      \n    \n      '0xe422d6c46a69e989ba6468ccd0435cb0c5c243e3',\n      \n    \n      '0x3db5b38ef4b433d9c6a664bd35551be73313189a',\n      \n    \n      '0xb0623c91c65621df716ab8afe5f66656b21a9108',\n      \n    \n      '0x94db037207f6fb697dbd33524aadffd108819dc8',\n      \n    \n      '0x53c61cfb8128ad59244e8c1d26109252ace23d14',\n      \n    \n      '0x75536cf4f01c2bfa528f5c74ddc1232db3af3ee5',\n      \n    \n      '0x66da63b03feca7dd44a5bb023bb3645d3252fa32',\n      \n    \n      '0xa2bf1b0a7e079767b4701b5a1d9d5700eb42d1d1',\n      \n    \n      '0x9194efdf03174a804f3552f4f7b7a4bb74badb7f',\n      \n    \n      '0x00de4b13153673bcae2616b67bf822500d325fc3',\n      \n    \n      '0x28f569cc6c29d804a1720edc16bf1ebab2ea35b4',\n      \n    \n      '0xa142ab9eab9264807a41f0e5cbdab877d204e233',\n      \n    \n      '0xc2e2b715d9e302947ec7e312fd2384b5a1296099',\n      \n    \n      '0x5d36a202687fd6bd0f670545334bf0b4827cc1e2',\n      \n    \n      '0x2b888954421b424c5d3d9ce9bb67c9bd47537d12',\n      \n    \n      '0x1c9a6c17ba87451520cc4aa4ca63db07dc180242',\n      \n    \n      '0x5e349eca2dc61abcd9dd99ce94d04136151a09ee',\n      \n    \n      '0xbc39fb41fe0229352774930c5aa3bf1635c2665f',\n      \n    \n      '0xdd7a79b1b6e8dd444f99d68a7d493a85556944a2',\n      \n    \n      '0x801707059a55d748b23b02043c71b7a3d976f071',\n      \n    \n      '0xe53e89d978ff1da716f80baa6e6d8b3fa23f2284',\n      \n    \n      '0x396a34c10b11e33a4bf6f3e6a419a23c54ad34fb',\n      \n    \n      '0x7f22646e85da79953ac09e9b45ee1b3be3a42abc',\n      \n    \n      '0xf68d2bfcecd7895bba05a7451dd09a1749026454',\n      \n    \n      '0x585639fbf797c1258eba8875c080eb63c833d252',\n      \n    \n      '0x1e6d9f536a5d1cc04fc13b3133efdb90c8ee5ea1',\n      \n    \n      '0xabf28f8d9adfb2255f4a059e37d3bce9104969db',\n      \n    \n      '0x434f5325ddcdbbfcce64be2617c72c4aa33ec3e7',\n      \n    \n      '0xdcf09a83e9cc4611b2215bfb7116bfaf5e906d3d',\n      \n    \n      '0x6eda5acaff7f5964e1ecc3fd61c62570c186ca0c',\n      \n    \n      '0x98ab20307fdaba1ce8b16d69d22461c6dbe85459',\n      \n    \n      '0x7899d9b1181cbb427b0b1be0684c096c260f7474',\n      \n    \n      '0x8c50651d964b1a573ba0cf51980ca51d9e42623c',\n      \n    \n      '0x826976d7c600d45fb8287ca1d7c76fc8eb732030',\n      \n    \n      '0x53e0b897eae600b2f6855fce4a42482e9229d2c2',\n      \n    \n      '0x66810420d110919a0e8b550fde3fe24d50ef0e26',\n      \n    \n      '0x5554672e67ba866b9861701d0e0494ab324ad19a',\n      \n    \n      '0x576f1e53afe5e99b2257258c7e3248d3a1822548',\n      \n    \n      '0xf4b0556b9b6f53e00a1fdd2b0478ce841991d8fa',\n      \n    \n      '0x1de2a056508e0d0dd88a88f1f5cdf9cfa510795c',\n      \n    \n      '0x07bf3cda34aa78d92949bbdce31520714ab5b228',\n      \n    \n      '0xa3eac0016f6581ac34768c0d4b99ddcd88071c3c',\n      \n    \n      '0x925afeb19355e289ed1346ede709633ca8788b25',\n      \n    \n      '0xdadd7c883288cfe2e257b0a361865e5e9349808b',\n      \n    \n      '0x429f9ada43e9f345cbb85ec88681bb70df808892',\n      \n    \n      '0x665d84fffddd72d24df555e6b065b833478dffca',\n      \n    \n      '0x69dc230b06a15796e3f42baf706e0e55d4d5eaa1',\n      \n    \n      '0x5555763613a12d8f3e73be831dff8598089d3dca',\n      \n    \n      '0x842bb1bb84cc8a3d6277b0ff9729d22d55e9c50b',\n      \n    \n      '0xbf430a49c4d85aeed3908619d5387a1fbf8e74a9',\n      \n    \n      '0x48a63097e1ac123b1f5a8bbffafa4afa8192fab0',\n      \n    \n      '0xa50d0e425461ccab26ef30104cdd879b90db3843',\n      \n    \n      '0x1f5d295778796a8b9f29600a585ab73d452acb1c',\n      \n    \n      '0x512fce9b07ce64590849115ee6b32fd40ec0f5f3',\n      \n    \n      '0xaeb99a255c3a243ab3e4f654041e9bf5340cf313',\n      \n    \n      '0x15c6ac4cf1b5e49c44332fb0a1043ccab19db80a',\n      \n    \n      '0x399e0ae23663f27181ebb4e66ec504b3aab25541',\n      \n    \n      '0xebb03f5a580ff088bd4269f88a0cfe5eaf00d2b0',\n      \n    \n      '0x490c91f38ec57e3ab00811e0c51a62bfed7e81f4',\n      \n    \n      '0xcf79c7eaec5bdc1a9e32d099c5d6bdf67e4cf6e8',\n      \n    \n      '0x45a10f35befa4ab841c77860204b133118b7ccae',\n      \n    \n      '0x00409fc839a2ec2e6d12305423d37cd011279c09',\n      \n    \n      '0xf503017d7baf7fbc0fff7492b751025c6a78179b',\n      \n    \n      '0x29c4dbc1a81d06c9aa2faed93bb8b4a78f3eabdb',\n      \n    \n      '0x006a8a496889e9983a5256f34b608ee9569ba319',\n      \n    \n      '0x55aed0ce035883626e536254dda2f23a5b5d977f',\n      \n    \n      '0x616cad18642f45d3fa5fcaad0a2d81764a9cba84',\n      \n    \n      '0x07fda67513ec0897866098a11dc3858089d4a505',\n      \n    \n      '0x91031dcfdea024b4d51e775486111d2b2a715871',\n      \n    \n      '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n      \n    \n      '0x0f2ce18919b4eb9838760cfdda65e4c8766e9c19',\n      \n    \n      '0xb8c6da1c1e8a4473f290941278e66bfdbe4fd6c8',\n      \n    \n      '0xd31b671f1a398b519222fdaba5ab5464b9f2a3fa',\n      \n    \n      '0xbc3ed6b537f2980e66f396fe14210a56ba3f72c4',\n      \n    \n      '0xdb5781a835b60110298ff7205d8ef9678ff1f800',\n      \n    \n      '0x378c23b326504df4d29c81ba6757f53b2c59f315',\n      \n    \n      '0x23936429fc179da0e1300644fb3b489c736d562f',\n      \n    \n      '0x1d3bf13f8f7a83390d03db5e23a950778e1d1309',\n      \n    \n      \n        '0x92bf20563e747b2f8711549be17a9d7b876c4053'\n      \n    \n  )\n),\n\nlocal_trust_fids as (\n  select cast(peer_farcaster_id as string) as fid\n  from `opensource-observer`.`oso`.`stg_karma3__localtrust`\n  where\n    cast(farcaster_id as string) in (select fid from badgeholders)\n    and eigentrust_rank < 100\n    and strategy_id = 1\n),\n\nweb_of_trust as (\n  select fid from local_trust_fids\n  union all\n  select fid from badgeholders\n),\n\ntrusted_addresses as (\n  select\n    address,\n    fid\n  from `opensource-observer`.`oso`.`stg_farcaster__addresses`\n  where fid in (\n    select fid\n    from web_of_trust\n  )\n)\n\nselect\n  events.project_id,\n  'openrank_trusted_users_count' as metric,\n  count(distinct trusted_addresses.fid) as amount\nfrom `opensource-observer`.`oso`.`rf4_events_daily_to_project` as events\nleft join trusted_addresses\n  on events.from_artifact_name = trusted_addresses.address\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  and events.bucket_day >= '2023-10-01'\n  and trusted_addresses.fid is not null\ngroup by\n  events.project_id",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_trusted_transaction_count": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_trusted_transaction_count",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/metrics/rf4_trusted_transaction_count.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/metrics/rf4_trusted_transaction_count.sql",
      unique_id: "model.opensource_observer.rf4_trusted_transaction_count",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "metrics",
        "rf4_trusted_transaction_count",
      ],
      alias: "rf4_trusted_transaction_count",
      checksum: {
        name: "sha256",
        checksum:
          "c6348a08f7aac2d190493e505c45b87bb2fcb10f746caa23a12520030580e77b",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.4455116,
      relation_name:
        "`opensource-observer`.`oso`.`rf4_trusted_transaction_count`",
      raw_code:
        "select\n  project_id,\n  'trusted_transaction_count' as metric,\n  SUM(amount) as amount\nfrom {{ ref('rf4_events_daily_to_project') }}\nwhere\n  event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  and bucket_day >= '2023-10-01'\n  and trusted_user_id is not null\ngroup by\n  project_id",
      language: "sql",
      refs: [
        { name: "rf4_events_daily_to_project", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.rf4_events_daily_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/metrics/rf4_trusted_transaction_count.sql",
      compiled: true,
      compiled_code:
        "select\n  project_id,\n  'trusted_transaction_count' as metric,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`rf4_events_daily_to_project`\nwhere\n  event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  and bucket_day >= '2023-10-01'\n  and trusted_user_id is not null\ngroup by\n  project_id",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_trusted_daily_active_users": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_trusted_daily_active_users",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/metrics/rf4_trusted_daily_active_users.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/metrics/rf4_trusted_daily_active_users.sql",
      unique_id: "model.opensource_observer.rf4_trusted_daily_active_users",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "metrics",
        "rf4_trusted_daily_active_users",
      ],
      alias: "rf4_trusted_daily_active_users",
      checksum: {
        name: "sha256",
        checksum:
          "4220cdf8320a2da67a0e90ab7b6d0dc978656d498d6e639d072e20db8fa30e28",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.4475522,
      relation_name:
        "`opensource-observer`.`oso`.`rf4_trusted_daily_active_users`",
      raw_code:
        "with txns as (\n  select\n    project_id,\n    trusted_user_id,\n    bucket_day\n  from {{ ref('rf4_events_daily_to_project') }}\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and bucket_day >= '2023-10-01'\n    and trusted_user_id is not null\n),\n\ndaus as (\n  select\n    project_id,\n    bucket_day,\n    COUNT(distinct trusted_user_id) as trusted_users\n  from txns\n  group by\n    project_id,\n    bucket_day\n),\n\ntotal_days as (\n  select DATE_DIFF(max_day, min_day, day) + 1 as days\n  from (\n    select\n      MIN(bucket_day) as min_day,\n      MAX(bucket_day) as max_day\n    from txns\n  )\n)\n\nselect\n  project_id,\n  'trusted_daily_active_users' as metric,\n  SUM(trusted_users) / (select days from total_days) as amount\nfrom daus\ngroup by\n  project_id",
      language: "sql",
      refs: [
        { name: "rf4_events_daily_to_project", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.rf4_events_daily_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/metrics/rf4_trusted_daily_active_users.sql",
      compiled: true,
      compiled_code:
        "with txns as (\n  select\n    project_id,\n    trusted_user_id,\n    bucket_day\n  from `opensource-observer`.`oso`.`rf4_events_daily_to_project`\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and bucket_day >= '2023-10-01'\n    and trusted_user_id is not null\n),\n\ndaus as (\n  select\n    project_id,\n    bucket_day,\n    COUNT(distinct trusted_user_id) as trusted_users\n  from txns\n  group by\n    project_id,\n    bucket_day\n),\n\ntotal_days as (\n  select DATE_DIFF(max_day, min_day, day) + 1 as days\n  from (\n    select\n      MIN(bucket_day) as min_day,\n      MAX(bucket_day) as max_day\n    from txns\n  )\n)\n\nselect\n  project_id,\n  'trusted_daily_active_users' as metric,\n  SUM(trusted_users) / (select days from total_days) as amount\nfrom daus\ngroup by\n  project_id",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_transactions": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_transactions",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/metrics/rf4_transactions.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/metrics/rf4_transactions.sql",
      unique_id: "model.opensource_observer.rf4_transactions",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "metrics",
        "rf4_transactions",
      ],
      alias: "rf4_transactions",
      checksum: {
        name: "sha256",
        checksum:
          "63c54f63fe0b4b5f98c985dc53fa0b63d56195718c57d9857fed02900f5fa6d6",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.4496834,
      relation_name: "`opensource-observer`.`oso`.`rf4_transactions`",
      raw_code:
        "with transactions_std as (\n  select\n    project_id,\n    SUM(amount) as amount\n  from {{ ref('rf4_events_daily_to_project') }}\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and bucket_day >= '2023-10-01'\n  group by\n    project_id\n),\n\ntransactions_4337 as (\n  select\n    project_id,\n    SUM(amount) as amount\n  from {{ ref('rf4_4337_events') }}\n  where\n    event_type = '4337_INTERACTION'\n    and bucket_day >= '2023-10-01'\n  group by\n    project_id\n),\n\ntransactions as (\n  select\n    project_id,\n    amount\n  from transactions_std\n  union all\n  select\n    project_id,\n    amount\n  from transactions_4337\n)\n\nselect\n  project_id,\n  'transaction_count' as metric,\n  SUM(amount) as amount\nfrom transactions\ngroup by\n  project_id",
      language: "sql",
      refs: [
        { name: "rf4_events_daily_to_project", package: null, version: null },
        { name: "rf4_4337_events", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.rf4_events_daily_to_project",
          "model.opensource_observer.rf4_4337_events",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/metrics/rf4_transactions.sql",
      compiled: true,
      compiled_code:
        "with transactions_std as (\n  select\n    project_id,\n    SUM(amount) as amount\n  from `opensource-observer`.`oso`.`rf4_events_daily_to_project`\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and bucket_day >= '2023-10-01'\n  group by\n    project_id\n),\n\ntransactions_4337 as (\n  select\n    project_id,\n    SUM(amount) as amount\n  from `opensource-observer`.`oso`.`rf4_4337_events`\n  where\n    event_type = '4337_INTERACTION'\n    and bucket_day >= '2023-10-01'\n  group by\n    project_id\n),\n\ntransactions as (\n  select\n    project_id,\n    amount\n  from transactions_std\n  union all\n  select\n    project_id,\n    amount\n  from transactions_4337\n)\n\nselect\n  project_id,\n  'transaction_count' as metric,\n  SUM(amount) as amount\nfrom transactions\ngroup by\n  project_id",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_trusted_users_share_of_transactions": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_trusted_users_share_of_transactions",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/metrics/rf4_trusted_users_share_of_transactions.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/metrics/rf4_trusted_users_share_of_transactions.sql",
      unique_id:
        "model.opensource_observer.rf4_trusted_users_share_of_transactions",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "metrics",
        "rf4_trusted_users_share_of_transactions",
      ],
      alias: "rf4_trusted_users_share_of_transactions",
      checksum: {
        name: "sha256",
        checksum:
          "646cd7fdc285394cf0528ec9936db06fe706c587250ce77ba39cf0c3aa8dce9f",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.4521925,
      relation_name:
        "`opensource-observer`.`oso`.`rf4_trusted_users_share_of_transactions`",
      raw_code:
        "with txns as (\n  select\n    project_id,\n    SUM(\n      case\n        when trusted_user_id is not null then amount\n        else 0\n      end\n    ) as trusted_txns,\n    SUM(amount) as all_txns,\n    COUNT(distinct trusted_user_id) as trusted_users\n  from {{ ref('rf4_events_daily_to_project') }}\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and bucket_day >= '2023-10-01'\n  group by\n    project_id\n)\n\nselect\n  project_id,\n  'trusted_transaction_share' as metric,\n  trusted_txns / all_txns as amount\nfrom txns\nwhere trusted_users >= 100",
      language: "sql",
      refs: [
        { name: "rf4_events_daily_to_project", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.rf4_events_daily_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/metrics/rf4_trusted_users_share_of_transactions.sql",
      compiled: true,
      compiled_code:
        "with txns as (\n  select\n    project_id,\n    SUM(\n      case\n        when trusted_user_id is not null then amount\n        else 0\n      end\n    ) as trusted_txns,\n    SUM(amount) as all_txns,\n    COUNT(distinct trusted_user_id) as trusted_users\n  from `opensource-observer`.`oso`.`rf4_events_daily_to_project`\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and bucket_day >= '2023-10-01'\n  group by\n    project_id\n)\n\nselect\n  project_id,\n  'trusted_transaction_share' as metric,\n  trusted_txns / all_txns as amount\nfrom txns\nwhere trusted_users >= 100",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_gas_fees": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_gas_fees",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/metrics/rf4_gas_fees.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/metrics/rf4_gas_fees.sql",
      unique_id: "model.opensource_observer.rf4_gas_fees",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "metrics",
        "rf4_gas_fees",
      ],
      alias: "rf4_gas_fees",
      checksum: {
        name: "sha256",
        checksum:
          "101da945d5b5c2773bc4f7f1c173502cec5b5c99e8cbe202fb5ddd1c8ee9a0dc",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.4542017,
      relation_name: "`opensource-observer`.`oso`.`rf4_gas_fees`",
      raw_code:
        "select\n  project_id,\n  'gas_fees' as metric,\n  SUM(amount / 1e18) as amount\nfrom {{ ref('rf4_events_daily_to_project') }}\nwhere\n  event_type = 'CONTRACT_INVOCATION_DAILY_L2_GAS_USED'\n  and bucket_day >= '2023-10-01'\ngroup by\n  project_id",
      language: "sql",
      refs: [
        { name: "rf4_events_daily_to_project", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.rf4_events_daily_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/metrics/rf4_gas_fees.sql",
      compiled: true,
      compiled_code:
        "select\n  project_id,\n  'gas_fees' as metric,\n  SUM(amount / 1e18) as amount\nfrom `opensource-observer`.`oso`.`rf4_events_daily_to_project`\nwhere\n  event_type = 'CONTRACT_INVOCATION_DAILY_L2_GAS_USED'\n  and bucket_day >= '2023-10-01'\ngroup by\n  project_id",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_recurring_addresses": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_recurring_addresses",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/metrics/rf4_recurring_addresses.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/metrics/rf4_recurring_addresses.sql",
      unique_id: "model.opensource_observer.rf4_recurring_addresses",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "metrics",
        "rf4_recurring_addresses",
      ],
      alias: "rf4_recurring_addresses",
      checksum: {
        name: "sha256",
        checksum:
          "ce8fa364d87c6e4a635ddd73c973d454223e0eee4b063e37af7ef9d9f7a0e447",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.4562213,
      relation_name: "`opensource-observer`.`oso`.`rf4_recurring_addresses`",
      raw_code:
        "with transactions_std as (\n  select\n    bucket_day,\n    project_id,\n    from_artifact_name as address,\n    TIMESTAMP_TRUNC(bucket_day, month) as bucket_month\n  from {{ ref('rf4_events_daily_to_project') }}\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and bucket_day >= '2023-10-01'\n),\n\ntransactions_4337 as (\n  select\n    bucket_day,\n    project_id,\n    to_artifact_name as address,\n    TIMESTAMP_TRUNC(bucket_day, month) as bucket_month\n  from {{ ref('rf4_4337_events') }}\n  where\n    event_type = '4337_INTERACTION'\n    and bucket_day >= '2023-10-01'\n),\n\ntxns as (\n  select * from transactions_std\n  union all\n  select * from transactions_4337\n),\n\naddress_stats as (\n  select\n    project_id,\n    address,\n    COUNT(distinct bucket_month) as months,\n    MAX(bucket_day) as last_day\n  from txns\n  group by\n    project_id,\n    address\n)\n\nselect\n  project_id,\n  'recurring_addresses' as metric,\n  COUNT(distinct address) as amount\nfrom address_stats\nwhere\n  months >= 3\n  -- and last_day >= '2024-04-01'\ngroup by\n  project_id",
      language: "sql",
      refs: [
        { name: "rf4_events_daily_to_project", package: null, version: null },
        { name: "rf4_4337_events", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.rf4_events_daily_to_project",
          "model.opensource_observer.rf4_4337_events",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/metrics/rf4_recurring_addresses.sql",
      compiled: true,
      compiled_code:
        "with transactions_std as (\n  select\n    bucket_day,\n    project_id,\n    from_artifact_name as address,\n    TIMESTAMP_TRUNC(bucket_day, month) as bucket_month\n  from `opensource-observer`.`oso`.`rf4_events_daily_to_project`\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and bucket_day >= '2023-10-01'\n),\n\ntransactions_4337 as (\n  select\n    bucket_day,\n    project_id,\n    to_artifact_name as address,\n    TIMESTAMP_TRUNC(bucket_day, month) as bucket_month\n  from `opensource-observer`.`oso`.`rf4_4337_events`\n  where\n    event_type = '4337_INTERACTION'\n    and bucket_day >= '2023-10-01'\n),\n\ntxns as (\n  select * from transactions_std\n  union all\n  select * from transactions_4337\n),\n\naddress_stats as (\n  select\n    project_id,\n    address,\n    COUNT(distinct bucket_month) as months,\n    MAX(bucket_day) as last_day\n  from txns\n  group by\n    project_id,\n    address\n)\n\nselect\n  project_id,\n  'recurring_addresses' as metric,\n  COUNT(distinct address) as amount\nfrom address_stats\nwhere\n  months >= 3\n  -- and last_day >= '2024-04-01'\ngroup by\n  project_id",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_agora_contract_discovery": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_agora_contract_discovery",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/verification/rf4_agora_contract_discovery.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/verification/rf4_agora_contract_discovery.sql",
      unique_id: "model.opensource_observer.rf4_agora_contract_discovery",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "verification",
        "rf4_agora_contract_discovery",
      ],
      alias: "rf4_agora_contract_discovery",
      checksum: {
        name: "sha256",
        checksum:
          "6c42a6c3e064e7057052a0137899eeeeff0e2388888a2cbd9609906dd79e05fe",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.4587414,
      relation_name:
        "`opensource-observer`.`oso`.`rf4_agora_contract_discovery`",
      raw_code:
        "with agora as (\n  select\n    application_id,\n    project_name,\n    artifact as address,\n    artifact_source as network,\n    artifact_type,\n    'agora_verification' as discovery_method\n  from {{ source('static_data_sources', 'agora_rf4_artifacts_by_app') }}\n  where artifact_type in ('CONTRACT', 'DEPLOYER')\n),\n\ndiscovered_contracts as (\n  select\n    agora.application_id,\n    agora.project_name,\n    derived_contracts.contract_address as address,\n    derived_contracts.network,\n    --derived_contracts.factory_deployer_address,\n    'CONTRACT' as artifact_type,\n    'discovered_contract_from_agora_verified_deployer' as discovery_method\n  from agora\n  inner join {{ ref('int_derived_contracts') }} as derived_contracts\n    on\n      agora.address = derived_contracts.deployer_address\n      and agora.network = derived_contracts.network\n  where\n    agora.address != derived_contracts.contract_address\n)\n\nselect\n  application_id,\n  project_name,\n  address,\n  network,\n  artifact_type,\n  discovery_method\nfrom discovered_contracts\nunion all\nselect\n  application_id,\n  project_name,\n  address,\n  network,\n  artifact_type,\n  discovery_method\nfrom agora",
      language: "sql",
      refs: [{ name: "int_derived_contracts", package: null, version: null }],
      sources: [["static_data_sources", "agora_rf4_artifacts_by_app"]],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "source.opensource_observer.static_data_sources.agora_rf4_artifacts_by_app",
          "model.opensource_observer.int_derived_contracts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/verification/rf4_agora_contract_discovery.sql",
      compiled: true,
      compiled_code:
        "with agora as (\n  select\n    application_id,\n    project_name,\n    artifact as address,\n    artifact_source as network,\n    artifact_type,\n    'agora_verification' as discovery_method\n  from `opensource-observer`.`static_data_sources`.`agora_rf4_artifacts_by_app`\n  where artifact_type in ('CONTRACT', 'DEPLOYER')\n),\n\ndiscovered_contracts as (\n  select\n    agora.application_id,\n    agora.project_name,\n    derived_contracts.contract_address as address,\n    derived_contracts.network,\n    --derived_contracts.factory_deployer_address,\n    'CONTRACT' as artifact_type,\n    'discovered_contract_from_agora_verified_deployer' as discovery_method\n  from agora\n  inner join `opensource-observer`.`oso`.`int_derived_contracts` as derived_contracts\n    on\n      agora.address = derived_contracts.deployer_address\n      and agora.network = derived_contracts.network\n  where\n    agora.address != derived_contracts.contract_address\n)\n\nselect\n  application_id,\n  project_name,\n  address,\n  network,\n  artifact_type,\n  discovery_method\nfrom discovered_contracts\nunion all\nselect\n  application_id,\n  project_name,\n  address,\n  network,\n  artifact_type,\n  discovery_method\nfrom agora",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_oso_contract_discovery": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_oso_contract_discovery",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/verification/rf4_oso_contract_discovery.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/verification/rf4_oso_contract_discovery.sql",
      unique_id: "model.opensource_observer.rf4_oso_contract_discovery",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "verification",
        "rf4_oso_contract_discovery",
      ],
      alias: "rf4_oso_contract_discovery",
      checksum: {
        name: "sha256",
        checksum:
          "74ded6f4ef6381c13a99da99645a2f5631454279b782c6c84a1240958cb53a2e",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.462476,
      relation_name: "`opensource-observer`.`oso`.`rf4_oso_contract_discovery`",
      raw_code:
        "with projects as (\n  select\n    apps.application_id,\n    apps.oso_name as project_name,\n    current_projects.blockchain\n  from {{ source('static_data_sources', 'rf4_project_eligibility') }} as apps\n  left join\n    {{ ref('stg_ossd__current_projects') }} as current_projects\n    on apps.oso_name = current_projects.project_name\n),\n\noso_blockchain_artifacts as (\n  select\n    projects.application_id,\n    projects.project_name,\n    'oso_verification' as discovery_method,\n    UPPER(tag) as artifact_type,\n    UPPER(network) as network,\n    LOWER(JSON_VALUE(blockchains.address)) as address\n  from projects\n  cross join\n    UNNEST(JSON_QUERY_ARRAY(projects.blockchain)) as blockchains\n  cross join\n    UNNEST(JSON_VALUE_ARRAY(blockchains.networks)) as network\n  cross join\n    UNNEST(JSON_VALUE_ARRAY(blockchains.tags)) as tag\n  where tag in ('contract', 'deployer')\n),\n\nnetworks as (\n  select *\n  from UNNEST([\n    struct('OPTIMISM' as network),\n    struct('BASE' as network),\n    struct('FRAX' as network),\n    struct('METAL' as network),\n    struct('MODE' as network),\n    struct('ZORA' as network)\n  ])\n),\n\noso_any_evm_deployers as (\n  select\n    oso_blockchain_artifacts.application_id,\n    oso_blockchain_artifacts.project_name,\n    oso_blockchain_artifacts.artifact_type,\n    networks.network,\n    oso_blockchain_artifacts.address,\n    oso_blockchain_artifacts.discovery_method\n  from oso_blockchain_artifacts\n  cross join networks\n  where\n    oso_blockchain_artifacts.artifact_type = 'DEPLOYER'\n    and oso_blockchain_artifacts.network = 'ANY_EVM'\n),\n\noso_other_addresses as (\n  select\n    application_id,\n    project_name,\n    artifact_type,\n    network,\n    address,\n    discovery_method\n  from oso_blockchain_artifacts\n  where\n    network in (select network from networks)\n),\n\noso_addresses as (\n  select *\n  from oso_any_evm_deployers\n  union all\n  select *\n  from oso_other_addresses\n),\n\ndiscovered_contracts as (\n  select\n    oso_addresses.application_id,\n    oso_addresses.project_name,\n    derived_contracts.contract_address as address,\n    derived_contracts.network,\n    --derived_contracts.factory_deployer_address,\n    'CONTRACT' as artifact_type,\n    'discovered_contract_from_oso_verified_deployer' as discovery_method\n  from oso_addresses\n  inner join {{ ref('int_derived_contracts') }} as derived_contracts\n    on\n      oso_addresses.address = derived_contracts.deployer_address\n      and oso_addresses.network = derived_contracts.network\n  where\n    oso_addresses.address != derived_contracts.contract_address\n)\n\nselect\n  application_id,\n  project_name,\n  address,\n  network,\n  artifact_type,\n  discovery_method\nfrom discovered_contracts\nunion all\nselect\n  application_id,\n  project_name,\n  address,\n  network,\n  artifact_type,\n  discovery_method\nfrom oso_addresses",
      language: "sql",
      refs: [
        { name: "stg_ossd__current_projects", package: null, version: null },
        { name: "int_derived_contracts", package: null, version: null },
      ],
      sources: [["static_data_sources", "rf4_project_eligibility"]],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "source.opensource_observer.static_data_sources.rf4_project_eligibility",
          "model.opensource_observer.stg_ossd__current_projects",
          "model.opensource_observer.int_derived_contracts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/verification/rf4_oso_contract_discovery.sql",
      compiled: true,
      compiled_code:
        "with projects as (\n  select\n    apps.application_id,\n    apps.oso_name as project_name,\n    current_projects.blockchain\n  from `opensource-observer`.`static_data_sources`.`rf4_project_eligibility` as apps\n  left join\n    `opensource-observer`.`oso`.`stg_ossd__current_projects` as current_projects\n    on apps.oso_name = current_projects.project_name\n),\n\noso_blockchain_artifacts as (\n  select\n    projects.application_id,\n    projects.project_name,\n    'oso_verification' as discovery_method,\n    UPPER(tag) as artifact_type,\n    UPPER(network) as network,\n    LOWER(JSON_VALUE(blockchains.address)) as address\n  from projects\n  cross join\n    UNNEST(JSON_QUERY_ARRAY(projects.blockchain)) as blockchains\n  cross join\n    UNNEST(JSON_VALUE_ARRAY(blockchains.networks)) as network\n  cross join\n    UNNEST(JSON_VALUE_ARRAY(blockchains.tags)) as tag\n  where tag in ('contract', 'deployer')\n),\n\nnetworks as (\n  select *\n  from UNNEST([\n    struct('OPTIMISM' as network),\n    struct('BASE' as network),\n    struct('FRAX' as network),\n    struct('METAL' as network),\n    struct('MODE' as network),\n    struct('ZORA' as network)\n  ])\n),\n\noso_any_evm_deployers as (\n  select\n    oso_blockchain_artifacts.application_id,\n    oso_blockchain_artifacts.project_name,\n    oso_blockchain_artifacts.artifact_type,\n    networks.network,\n    oso_blockchain_artifacts.address,\n    oso_blockchain_artifacts.discovery_method\n  from oso_blockchain_artifacts\n  cross join networks\n  where\n    oso_blockchain_artifacts.artifact_type = 'DEPLOYER'\n    and oso_blockchain_artifacts.network = 'ANY_EVM'\n),\n\noso_other_addresses as (\n  select\n    application_id,\n    project_name,\n    artifact_type,\n    network,\n    address,\n    discovery_method\n  from oso_blockchain_artifacts\n  where\n    network in (select network from networks)\n),\n\noso_addresses as (\n  select *\n  from oso_any_evm_deployers\n  union all\n  select *\n  from oso_other_addresses\n),\n\ndiscovered_contracts as (\n  select\n    oso_addresses.application_id,\n    oso_addresses.project_name,\n    derived_contracts.contract_address as address,\n    derived_contracts.network,\n    --derived_contracts.factory_deployer_address,\n    'CONTRACT' as artifact_type,\n    'discovered_contract_from_oso_verified_deployer' as discovery_method\n  from oso_addresses\n  inner join `opensource-observer`.`oso`.`int_derived_contracts` as derived_contracts\n    on\n      oso_addresses.address = derived_contracts.deployer_address\n      and oso_addresses.network = derived_contracts.network\n  where\n    oso_addresses.address != derived_contracts.contract_address\n)\n\nselect\n  application_id,\n  project_name,\n  address,\n  network,\n  artifact_type,\n  discovery_method\nfrom discovered_contracts\nunion all\nselect\n  application_id,\n  project_name,\n  address,\n  network,\n  artifact_type,\n  discovery_method\nfrom oso_addresses",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_transactions_by_app": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_transactions_by_app",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/verification/rf4_transactions_by_app.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/verification/rf4_transactions_by_app.sql",
      unique_id: "model.opensource_observer.rf4_transactions_by_app",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "verification",
        "rf4_transactions_by_app",
      ],
      alias: "rf4_transactions_by_app",
      checksum: {
        name: "sha256",
        checksum:
          "9dee347dde298ff92866d4553e8555215a315caab64ed81a5f5bf0dd547e46fc",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "txn_date",
          granularity: "day",
          data_type: "timestamp",
        },
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "table",
        partition_by: {
          field: "txn_date",
          granularity: "day",
          data_type: "timestamp",
        },
      },
      created_at: 1719978675.4658759,
      relation_name: "`opensource-observer`.`oso`.`rf4_transactions_by_app`",
      raw_code:
        '{{\n  config(\n    materialized=\'table\',\n    partition_by={\n      "field": "txn_date",\n      "data_type": "timestamp",\n      "granularity": "day",\n    }\n  )\n}}\n\nwith all_txns as (\n  select\n    txn_date,\n    from_address,\n    to_address,\n    network\n  from {{ ref(\'rf4_transactions_window\') }}\n),\n\ncontracts as (\n  select distinct\n    application_id,\n    contract_address,\n    network\n  from {{ ref(\'rf4_contracts_by_app\') }}\n)\n\nselect\n  contracts.application_id,\n  all_txns.txn_date,\n  all_txns.from_address,\n  all_txns.to_address,\n  all_txns.network\nfrom all_txns\nleft join contracts\n  on\n    all_txns.to_address = contracts.contract_address\n    and all_txns.network = contracts.network\nwhere contracts.application_id is not null',
      language: "sql",
      refs: [
        { name: "rf4_transactions_window", package: null, version: null },
        { name: "rf4_contracts_by_app", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.rf4_transactions_window",
          "model.opensource_observer.rf4_contracts_by_app",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/verification/rf4_transactions_by_app.sql",
      compiled: true,
      compiled_code:
        "\n\nwith all_txns as (\n  select\n    txn_date,\n    from_address,\n    to_address,\n    network\n  from `opensource-observer`.`oso`.`rf4_transactions_window`\n),\n\ncontracts as (\n  select distinct\n    application_id,\n    contract_address,\n    network\n  from `opensource-observer`.`oso`.`rf4_contracts_by_app`\n)\n\nselect\n  contracts.application_id,\n  all_txns.txn_date,\n  all_txns.from_address,\n  all_txns.to_address,\n  all_txns.network\nfrom all_txns\nleft join contracts\n  on\n    all_txns.to_address = contracts.contract_address\n    and all_txns.network = contracts.network\nwhere contracts.application_id is not null",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_transactions_window": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_transactions_window",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/verification/rf4_transactions_window.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/verification/rf4_transactions_window.sql",
      unique_id: "model.opensource_observer.rf4_transactions_window",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "verification",
        "rf4_transactions_window",
      ],
      alias: "rf4_transactions_window",
      checksum: {
        name: "sha256",
        checksum:
          "fca3a9db7b37bd2738e440ff06a6f20bfe34b10f462ba76970a4b9c969987ede",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "txn_date",
          data_type: "timestamp",
          granularity: "day",
        },
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "txn_date",
          data_type: "timestamp",
          granularity: "day",
        },
      },
      created_at: 1719978675.4691896,
      relation_name: "`opensource-observer`.`oso`.`rf4_transactions_window`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "txn_date",\n      "data_type": "timestamp",\n      "granularity": "day",\n    }\n  )\n}}\n\n{% set networks = ["base", "frax", "metal", "mode", "zora"] %}\n{% set start_date = \'2023-10-01\' %}\n{% set end_date = \'2024-06-01\' %}\n{% set union_queries = [] %}\n\n{% for network in networks %}\n  {% set network_upper = network.upper() %}\n\n  {% set query %}\n  select\n    date_trunc(block_timestamp, day) as txn_date,\n    lower(from_address) as from_address,\n    lower(to_address) as to_address,\n    \'{{ network_upper }}\' as network,\n  from {{ source(network, "transactions") }}\n  where\n    block_timestamp > \'{{ start_date }}\'\n    and block_timestamp < \'{{ end_date }}\'\n    and `receipt_status` = 1\n  {% endset %}\n\n  {% do union_queries.append(query) %}\n{% endfor %}\n\n{% set final_query = union_queries | join(\' union all \') %}\n\nwith superchain_txns as (\n  {{ final_query }}\n),\n\nop_txns as (\n  select\n    \'OPTIMISM\' as network,\n    lower(from_address) as from_address,\n    lower(to_address) as to_address,\n    date_trunc(block_timestamp, day) as txn_date\n  from {{ source("optimism", "receipts") }}\n  where\n    block_timestamp > \'{{ start_date }}\'\n    and block_timestamp < \'{{ end_date }}\'\n    and status = 1\n),\n\ntxns as (\n  select\n    txn_date,\n    from_address,\n    to_address,\n    network\n  from superchain_txns\n  union all\n  select\n    txn_date,\n    from_address,\n    to_address,\n    network\n  from op_txns\n)\n\nselect distinct\n  txn_date,\n  from_address,\n  to_address,\n  network\nfrom txns',
      language: "sql",
      refs: [],
      sources: [
        ["base", "transactions"],
        ["frax", "transactions"],
        ["metal", "transactions"],
        ["mode", "transactions"],
        ["zora", "transactions"],
        ["optimism", "receipts"],
      ],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "source.opensource_observer.base.transactions",
          "source.opensource_observer.frax.transactions",
          "source.opensource_observer.metal.transactions",
          "source.opensource_observer.mode.transactions",
          "source.opensource_observer.zora.transactions",
          "source.opensource_observer.optimism.receipts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/verification/rf4_transactions_window.sql",
      compiled: true,
      compiled_code:
        "\n\n\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\nwith superchain_txns as (\n  \n  select\n    date_trunc(block_timestamp, day) as txn_date,\n    lower(from_address) as from_address,\n    lower(to_address) as to_address,\n    'BASE' as network,\n  from `opensource-observer`.`superchain`.`base_transactions`\n  where\n    block_timestamp > '2023-10-01'\n    and block_timestamp < '2024-06-01'\n    and `receipt_status` = 1\n   union all \n  select\n    date_trunc(block_timestamp, day) as txn_date,\n    lower(from_address) as from_address,\n    lower(to_address) as to_address,\n    'FRAX' as network,\n  from `opensource-observer`.`superchain`.`frax_transactions`\n  where\n    block_timestamp > '2023-10-01'\n    and block_timestamp < '2024-06-01'\n    and `receipt_status` = 1\n   union all \n  select\n    date_trunc(block_timestamp, day) as txn_date,\n    lower(from_address) as from_address,\n    lower(to_address) as to_address,\n    'METAL' as network,\n  from `opensource-observer`.`superchain`.`metal_transactions`\n  where\n    block_timestamp > '2023-10-01'\n    and block_timestamp < '2024-06-01'\n    and `receipt_status` = 1\n   union all \n  select\n    date_trunc(block_timestamp, day) as txn_date,\n    lower(from_address) as from_address,\n    lower(to_address) as to_address,\n    'MODE' as network,\n  from `opensource-observer`.`superchain`.`mode_transactions`\n  where\n    block_timestamp > '2023-10-01'\n    and block_timestamp < '2024-06-01'\n    and `receipt_status` = 1\n   union all \n  select\n    date_trunc(block_timestamp, day) as txn_date,\n    lower(from_address) as from_address,\n    lower(to_address) as to_address,\n    'ZORA' as network,\n  from `opensource-observer`.`superchain`.`zora_transactions`\n  where\n    block_timestamp > '2023-10-01'\n    and block_timestamp < '2024-06-01'\n    and `receipt_status` = 1\n  \n),\n\nop_txns as (\n  select\n    'OPTIMISM' as network,\n    lower(from_address) as from_address,\n    lower(to_address) as to_address,\n    date_trunc(block_timestamp, day) as txn_date\n  from `bigquery-public-data`.`goog_blockchain_optimism_mainnet_us`.`receipts`\n  where\n    block_timestamp > '2023-10-01'\n    and block_timestamp < '2024-06-01'\n    and status = 1\n),\n\ntxns as (\n  select\n    txn_date,\n    from_address,\n    to_address,\n    network\n  from superchain_txns\n  union all\n  select\n    txn_date,\n    from_address,\n    to_address,\n    network\n  from op_txns\n)\n\nselect distinct\n  txn_date,\n  from_address,\n  to_address,\n  network\nfrom txns",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_repos_by_app": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_repos_by_app",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/verification/rf4_repos_by_app.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/verification/rf4_repos_by_app.sql",
      unique_id: "model.opensource_observer.rf4_repos_by_app",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "verification",
        "rf4_repos_by_app",
      ],
      alias: "rf4_repos_by_app",
      checksum: {
        name: "sha256",
        checksum:
          "bb4499b9d02bec68bf106de17550ae66cb7c3bd911f954bd119c0d1924bf50b6",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.4786944,
      relation_name: "`opensource-observer`.`oso`.`rf4_repos_by_app`",
      raw_code:
        "with repos as (\n  select\n    a.application_id,\n    a.project_name,\n    a.artifact,\n    (r.application_id is not null) as has_contracts\n  from {{ source('static_data_sources', 'agora_rf4_artifacts_by_app') }} as a\n  left join\n    {{ source('static_data_sources', 'agora_rf4_repos_with_contracts') }} as r\n    on a.artifact = r.artifact\n  where a.artifact_source = 'GITHUB'\n),\n\nrepos_w_contracts_by_app as (\n  select\n    application_id,\n    max(has_contracts) as has_contracts\n  from repos\n  group by application_id\n),\n\nrepos_by_app as (\n  select\n    repos.application_id,\n    repos.project_name,\n    repos.artifact,\n    repos.has_contracts,\n    (\n      repos.has_contracts = true\n      or repos_w_contracts_by_app.has_contracts = false\n    ) as scan\n  from repos\n  inner join repos_w_contracts_by_app\n    on repos.application_id = repos_w_contracts_by_app.application_id\n)\n\nselect distinct\n  application_id,\n  project_name,\n  artifact as url,\n  has_contracts,\n  scan,\n  lower(replace(artifact, 'https://github.com/', '')) as repo\nfrom repos_by_app",
      language: "sql",
      refs: [],
      sources: [
        ["static_data_sources", "agora_rf4_artifacts_by_app"],
        ["static_data_sources", "agora_rf4_repos_with_contracts"],
      ],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "source.opensource_observer.static_data_sources.agora_rf4_artifacts_by_app",
          "source.opensource_observer.static_data_sources.agora_rf4_repos_with_contracts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/verification/rf4_repos_by_app.sql",
      compiled: true,
      compiled_code:
        "with repos as (\n  select\n    a.application_id,\n    a.project_name,\n    a.artifact,\n    (r.application_id is not null) as has_contracts\n  from `opensource-observer`.`static_data_sources`.`agora_rf4_artifacts_by_app` as a\n  left join\n    `opensource-observer`.`static_data_sources`.`agora_rf4_repos_with_contracts` as r\n    on a.artifact = r.artifact\n  where a.artifact_source = 'GITHUB'\n),\n\nrepos_w_contracts_by_app as (\n  select\n    application_id,\n    max(has_contracts) as has_contracts\n  from repos\n  group by application_id\n),\n\nrepos_by_app as (\n  select\n    repos.application_id,\n    repos.project_name,\n    repos.artifact,\n    repos.has_contracts,\n    (\n      repos.has_contracts = true\n      or repos_w_contracts_by_app.has_contracts = false\n    ) as scan\n  from repos\n  inner join repos_w_contracts_by_app\n    on repos.application_id = repos_w_contracts_by_app.application_id\n)\n\nselect distinct\n  application_id,\n  project_name,\n  artifact as url,\n  has_contracts,\n  scan,\n  lower(replace(artifact, 'https://github.com/', '')) as repo\nfrom repos_by_app",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_contracts_by_app": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_contracts_by_app",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/verification/rf4_contracts_by_app.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/verification/rf4_contracts_by_app.sql",
      unique_id: "model.opensource_observer.rf4_contracts_by_app",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "verification",
        "rf4_contracts_by_app",
      ],
      alias: "rf4_contracts_by_app",
      checksum: {
        name: "sha256",
        checksum:
          "ba87c137db68ee3f543d59fb4c48d0390799893c845fc590cbff79e05f2ff7dc",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.4809518,
      relation_name: "`opensource-observer`.`oso`.`rf4_contracts_by_app`",
      raw_code:
        "with factories as (\n  select\n    factory_address,\n    contract_address,\n    network\n  from {{ ref('int_factories') }}\n),\n\napp_contracts as (\n  select\n    application_id,\n    project_name,\n    address,\n    network,\n    artifact_type,\n    discovery_method\n  from {{ ref('rf4_oso_contract_discovery') }}\n  where artifact_type = 'CONTRACT'\n  union all\n  select\n    application_id,\n    project_name,\n    address,\n    network,\n    artifact_type,\n    discovery_method\n  from {{ ref('rf4_agora_contract_discovery') }}\n  where artifact_type = 'CONTRACT'\n),\n\ndiscovered_contracts as (\n  select\n    app_contracts.application_id,\n    app_contracts.project_name,\n    factories.contract_address as address,\n    factories.network,\n    'CONTRACT' as artifact_type,\n    'discovered_contract_from_verified_factory' as discovery_method\n  from factories\n  left join app_contracts\n    on\n      factories.factory_address = app_contracts.address\n      and factories.network = app_contracts.network\n),\n\ncontracts as (\n  select\n    application_id,\n    address,\n    network,\n    discovery_method\n  from discovered_contracts\n  union all\n  select\n    application_id,\n    address,\n    network,\n    discovery_method\n  from app_contracts\n)\n\nselect distinct\n  application_id,\n  address as contract_address,\n  network,\n  discovery_method\nfrom contracts\nwhere application_id is not null",
      language: "sql",
      refs: [
        { name: "int_factories", package: null, version: null },
        { name: "rf4_oso_contract_discovery", package: null, version: null },
        { name: "rf4_agora_contract_discovery", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_factories",
          "model.opensource_observer.rf4_oso_contract_discovery",
          "model.opensource_observer.rf4_agora_contract_discovery",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/verification/rf4_contracts_by_app.sql",
      compiled: true,
      compiled_code:
        "with factories as (\n  select\n    factory_address,\n    contract_address,\n    network\n  from `opensource-observer`.`oso`.`int_factories`\n),\n\napp_contracts as (\n  select\n    application_id,\n    project_name,\n    address,\n    network,\n    artifact_type,\n    discovery_method\n  from `opensource-observer`.`oso`.`rf4_oso_contract_discovery`\n  where artifact_type = 'CONTRACT'\n  union all\n  select\n    application_id,\n    project_name,\n    address,\n    network,\n    artifact_type,\n    discovery_method\n  from `opensource-observer`.`oso`.`rf4_agora_contract_discovery`\n  where artifact_type = 'CONTRACT'\n),\n\ndiscovered_contracts as (\n  select\n    app_contracts.application_id,\n    app_contracts.project_name,\n    factories.contract_address as address,\n    factories.network,\n    'CONTRACT' as artifact_type,\n    'discovered_contract_from_verified_factory' as discovery_method\n  from factories\n  left join app_contracts\n    on\n      factories.factory_address = app_contracts.address\n      and factories.network = app_contracts.network\n),\n\ncontracts as (\n  select\n    application_id,\n    address,\n    network,\n    discovery_method\n  from discovered_contracts\n  union all\n  select\n    application_id,\n    address,\n    network,\n    discovery_method\n  from app_contracts\n)\n\nselect distinct\n  application_id,\n  address as contract_address,\n  network,\n  discovery_method\nfrom contracts\nwhere application_id is not null",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.rf4_onchain_eligibility_checks": {
      database: "opensource-observer",
      schema: "oso",
      name: "rf4_onchain_eligibility_checks",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/superchain/verification/rf4_onchain_eligibility_checks.sql",
      original_file_path:
        "warehouse/dbt/models/marts/superchain/verification/rf4_onchain_eligibility_checks.sql",
      unique_id: "model.opensource_observer.rf4_onchain_eligibility_checks",
      fqn: [
        "opensource_observer",
        "marts",
        "superchain",
        "verification",
        "rf4_onchain_eligibility_checks",
      ],
      alias: "rf4_onchain_eligibility_checks",
      checksum: {
        name: "sha256",
        checksum:
          "9e9c0fb2b38c2f090b9b6a591b329243cd314773e5d97ddc44d72278f5afe2c0",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.4833343,
      relation_name:
        "`opensource-observer`.`oso`.`rf4_onchain_eligibility_checks`",
      raw_code:
        "with projects as (\n  select\n    app.application_id,\n    app.project_name,\n    ossd.oso_name as oso_project_name\n  from {{ source('static_data_sources', 'agora_rf4_applications') }} as app\n  left join\n    {{ source('static_data_sources', 'rf4_project_eligibility') }} as ossd\n    on app.application_id = ossd.application_id\n),\n\ncontracts as (\n  select\n    application_id,\n    count(distinct contract_address) as count_linked_addresses\n  from {{ ref('rf4_contracts_by_app') }}\n  group by application_id\n),\n\ntxns as (\n  select\n    application_id,\n    txn_date,\n    from_address,\n    to_address,\n    (txn_date > '2023-12-30' and txn_date < '2024-05-02') as txn_in_tight_window\n  from {{ ref('rf4_transactions_by_app') }}\n)\n\nselect\n  projects.application_id,\n  projects.project_name,\n  projects.oso_project_name,\n  contracts.count_linked_addresses,\n  min(txns.txn_date) as first_transaction,\n  count(\n    distinct\n    case when txns.txn_in_tight_window is true then txns.txn_date end\n  ) as num_active_days,\n  count(\n    distinct\n    case when txns.txn_in_tight_window is true then txns.from_address end\n  ) as num_unique_addresses_in_tight_window,\n  count(distinct txns.from_address) as num_unique_addresses_in_wide_window\nfrom projects\nleft join contracts on projects.application_id = contracts.application_id\nleft join txns on projects.application_id = txns.application_id\ngroup by\n  projects.application_id,\n  projects.project_name,\n  projects.oso_project_name,\n  contracts.count_linked_addresses\norder by\n  projects.oso_project_name",
      language: "sql",
      refs: [
        { name: "rf4_contracts_by_app", package: null, version: null },
        { name: "rf4_transactions_by_app", package: null, version: null },
      ],
      sources: [
        ["static_data_sources", "agora_rf4_applications"],
        ["static_data_sources", "rf4_project_eligibility"],
      ],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "source.opensource_observer.static_data_sources.agora_rf4_applications",
          "source.opensource_observer.static_data_sources.rf4_project_eligibility",
          "model.opensource_observer.rf4_contracts_by_app",
          "model.opensource_observer.rf4_transactions_by_app",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/superchain/verification/rf4_onchain_eligibility_checks.sql",
      compiled: true,
      compiled_code:
        "with projects as (\n  select\n    app.application_id,\n    app.project_name,\n    ossd.oso_name as oso_project_name\n  from `opensource-observer`.`static_data_sources`.`agora_rf4_applications` as app\n  left join\n    `opensource-observer`.`static_data_sources`.`rf4_project_eligibility` as ossd\n    on app.application_id = ossd.application_id\n),\n\ncontracts as (\n  select\n    application_id,\n    count(distinct contract_address) as count_linked_addresses\n  from `opensource-observer`.`oso`.`rf4_contracts_by_app`\n  group by application_id\n),\n\ntxns as (\n  select\n    application_id,\n    txn_date,\n    from_address,\n    to_address,\n    (txn_date > '2023-12-30' and txn_date < '2024-05-02') as txn_in_tight_window\n  from `opensource-observer`.`oso`.`rf4_transactions_by_app`\n)\n\nselect\n  projects.application_id,\n  projects.project_name,\n  projects.oso_project_name,\n  contracts.count_linked_addresses,\n  min(txns.txn_date) as first_transaction,\n  count(\n    distinct\n    case when txns.txn_in_tight_window is true then txns.txn_date end\n  ) as num_active_days,\n  count(\n    distinct\n    case when txns.txn_in_tight_window is true then txns.from_address end\n  ) as num_unique_addresses_in_tight_window,\n  count(distinct txns.from_address) as num_unique_addresses_in_wide_window\nfrom projects\nleft join contracts on projects.application_id = contracts.application_id\nleft join txns on projects.application_id = txns.application_id\ngroup by\n  projects.application_id,\n  projects.project_name,\n  projects.oso_project_name,\n  contracts.count_linked_addresses\norder by\n  projects.oso_project_name",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.event_indexing_status_by_project_v1": {
      database: "opensource-observer",
      schema: "oso",
      name: "event_indexing_status_by_project_v1",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/events/event_indexing_status_by_project_v1.sql",
      original_file_path:
        "warehouse/dbt/models/marts/events/event_indexing_status_by_project_v1.sql",
      unique_id:
        "model.opensource_observer.event_indexing_status_by_project_v1",
      fqn: [
        "opensource_observer",
        "marts",
        "events",
        "event_indexing_status_by_project_v1",
      ],
      alias: "event_indexing_status_by_project_v1",
      checksum: {
        name: "sha256",
        checksum:
          "78855474a547b8d10d91a96a0969233f84f14b136303786a5d8bd1fa423572d5",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: { sync_to_db: true },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: { sync_to_db: true },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table", meta: { sync_to_db: true } },
      created_at: 1719978675.4855282,
      relation_name:
        "`opensource-observer`.`oso`.`event_indexing_status_by_project_v1`",
      raw_code:
        "{{ \n  config(meta = {\n    'sync_to_db': True\n  }) \n}}\n\nselect\n  events.project_id,\n  projects.project_source,\n  projects.project_namespace,\n  projects.project_name,\n  events.event_source,\n  events.event_type,\n  MIN(events.bucket_day) as first_event_date,\n  MAX(events.bucket_day) as last_event_date,\n  COUNT(distinct events.bucket_day) as eventful_day_count\nfrom {{ ref('events_daily_to_project_by_source') }} as events\ninner join {{ ref('projects_v1') }} as projects\n  on events.project_id = projects.project_id\ngroup by\n  events.project_id,\n  projects.project_source,\n  projects.project_namespace,\n  projects.project_name,\n  events.event_source,\n  events.event_type",
      language: "sql",
      refs: [
        {
          name: "events_daily_to_project_by_source",
          package: null,
          version: null,
        },
        { name: "projects_v1", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.events_daily_to_project_by_source",
          "model.opensource_observer.projects_v1",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/events/event_indexing_status_by_project_v1.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  events.project_id,\n  projects.project_source,\n  projects.project_namespace,\n  projects.project_name,\n  events.event_source,\n  events.event_type,\n  MIN(events.bucket_day) as first_event_date,\n  MAX(events.bucket_day) as last_event_date,\n  COUNT(distinct events.bucket_day) as eventful_day_count\nfrom `opensource-observer`.`oso`.`events_daily_to_project_by_source` as events\ninner join `opensource-observer`.`oso`.`projects_v1` as projects\n  on events.project_id = projects.project_id\ngroup by\n  events.project_id,\n  projects.project_source,\n  projects.project_namespace,\n  projects.project_name,\n  events.event_source,\n  events.event_type",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.event_types_v1": {
      database: "opensource-observer",
      schema: "oso",
      name: "event_types_v1",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/events/event_types_v1.sql",
      original_file_path:
        "warehouse/dbt/models/marts/events/event_types_v1.sql",
      unique_id: "model.opensource_observer.event_types_v1",
      fqn: ["opensource_observer", "marts", "events", "event_types_v1"],
      alias: "event_types_v1",
      checksum: {
        name: "sha256",
        checksum:
          "e6e7d30793e3ba739a17274bf8e94ccd380515a9fc221423311ab67bed133a62",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: { sync_to_db: true },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: { sync_to_db: true },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table", meta: { sync_to_db: true } },
      created_at: 1719978675.4887161,
      relation_name: "`opensource-observer`.`oso`.`event_types_v1`",
      raw_code:
        "{#\n  Gather all available event types (for the UI)\n#}\n{{ \n  config(meta = {\n    'sync_to_db': True\n  }) \n}}\n\nselect distinct events.event_type\nfrom {{ ref('int_events') }} as events",
      language: "sql",
      refs: [{ name: "int_events", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_events"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/events/event_types_v1.sql",
      compiled: true,
      compiled_code:
        "\n\n\nselect distinct events.event_type\nfrom `opensource-observer`.`oso`.`int_events` as events",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.events_weekly_to_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "events_weekly_to_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/events/weekly/events_weekly_to_project.sql",
      original_file_path:
        "warehouse/dbt/models/marts/events/weekly/events_weekly_to_project.sql",
      unique_id: "model.opensource_observer.events_weekly_to_project",
      fqn: [
        "opensource_observer",
        "marts",
        "events",
        "weekly",
        "events_weekly_to_project",
      ],
      alias: "events_weekly_to_project",
      checksum: {
        name: "sha256",
        checksum:
          "ef36db8c141628b15fd36d87eaabc730bdb83772eb9f4ffc2c2dc70f911f799c",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: { sync_to_db: true },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: { sync_to_db: true },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table", meta: { sync_to_db: true } },
      created_at: 1719978675.4918647,
      relation_name: "`opensource-observer`.`oso`.`events_weekly_to_project`",
      raw_code:
        "{# \n  All events weekly to a project\n#}\n{{ \n  config(meta = {\n    'sync_to_db': True\n  }) \n}}\n\nselect\n  project_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week) as bucket_week,\n  SUM(amount) as amount\nfrom {{ ref('events_daily_to_project') }}\ngroup by\n  project_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week)",
      language: "sql",
      refs: [{ name: "events_daily_to_project", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.events_daily_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/events/weekly/events_weekly_to_project.sql",
      compiled: true,
      compiled_code:
        "\n\n\nselect\n  project_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week) as bucket_week,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`events_daily_to_project`\ngroup by\n  project_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.events_weekly_to_artifact": {
      database: "opensource-observer",
      schema: "oso",
      name: "events_weekly_to_artifact",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/events/weekly/events_weekly_to_artifact.sql",
      original_file_path:
        "warehouse/dbt/models/marts/events/weekly/events_weekly_to_artifact.sql",
      unique_id: "model.opensource_observer.events_weekly_to_artifact",
      fqn: [
        "opensource_observer",
        "marts",
        "events",
        "weekly",
        "events_weekly_to_artifact",
      ],
      alias: "events_weekly_to_artifact",
      checksum: {
        name: "sha256",
        checksum:
          "23c7cbd88fce66dd3ebaf6bad845645b4c705a56545146b120c4686646d12751",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: { sync_to_db: true },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: { sync_to_db: true },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table", meta: { sync_to_db: true } },
      created_at: 1719978675.4941518,
      relation_name: "`opensource-observer`.`oso`.`events_weekly_to_artifact`",
      raw_code:
        "{# \n  All events weekly to an artifact\n#}\n{{ \n  config(meta = {\n    'sync_to_db': True\n  }) \n}}\n\nselect\n  artifact_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week) as bucket_week,\n  SUM(amount) as amount\nfrom {{ ref('events_daily_to_artifact') }}\ngroup by\n  artifact_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week)",
      language: "sql",
      refs: [
        { name: "events_daily_to_artifact", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.events_daily_to_artifact"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/events/weekly/events_weekly_to_artifact.sql",
      compiled: true,
      compiled_code:
        "\n\n\nselect\n  artifact_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week) as bucket_week,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`events_daily_to_artifact`\ngroup by\n  artifact_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.events_weekly_to_project_by_source": {
      database: "opensource-observer",
      schema: "oso",
      name: "events_weekly_to_project_by_source",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/events/weekly/events_weekly_to_project_by_source.sql",
      original_file_path:
        "warehouse/dbt/models/marts/events/weekly/events_weekly_to_project_by_source.sql",
      unique_id: "model.opensource_observer.events_weekly_to_project_by_source",
      fqn: [
        "opensource_observer",
        "marts",
        "events",
        "weekly",
        "events_weekly_to_project_by_source",
      ],
      alias: "events_weekly_to_project_by_source",
      checksum: {
        name: "sha256",
        checksum:
          "5f24078135521da3d7d174e748bba6e56ef02eea12c96d014450dd1b7fb39324",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.4964893,
      relation_name:
        "`opensource-observer`.`oso`.`events_weekly_to_project_by_source`",
      raw_code:
        "{# \n  All events weekly to a project by source\n#}\n\nselect\n  project_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week) as bucket_week,\n  SUM(amount) as amount\nfrom {{ ref('events_daily_to_project_by_source') }}\ngroup by\n  project_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week)",
      language: "sql",
      refs: [
        {
          name: "events_daily_to_project_by_source",
          package: null,
          version: null,
        },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.events_daily_to_project_by_source"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/events/weekly/events_weekly_to_project_by_source.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  project_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week) as bucket_week,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`events_daily_to_project_by_source`\ngroup by\n  project_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.events_weekly_to_collection": {
      database: "opensource-observer",
      schema: "oso",
      name: "events_weekly_to_collection",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/events/weekly/events_weekly_to_collection.sql",
      original_file_path:
        "warehouse/dbt/models/marts/events/weekly/events_weekly_to_collection.sql",
      unique_id: "model.opensource_observer.events_weekly_to_collection",
      fqn: [
        "opensource_observer",
        "marts",
        "events",
        "weekly",
        "events_weekly_to_collection",
      ],
      alias: "events_weekly_to_collection",
      checksum: {
        name: "sha256",
        checksum:
          "8815e465e1dcb55e5646963d128dbcecb036277885f44ef888ca985cb2e17aa8",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: { sync_to_db: true },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: { sync_to_db: true },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table", meta: { sync_to_db: true } },
      created_at: 1719978675.4984741,
      relation_name:
        "`opensource-observer`.`oso`.`events_weekly_to_collection`",
      raw_code:
        "{# \n  All events monthly to a collection\n#}\n{{ \n  config(meta = {\n    'sync_to_db': True\n  }) \n}}\n\nselect\n  collection_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week) as bucket_week,\n  SUM(amount) as amount\nfrom {{ ref('events_daily_to_collection') }}\ngroup by\n  collection_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week)",
      language: "sql",
      refs: [
        { name: "events_daily_to_collection", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.events_daily_to_collection"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/events/weekly/events_weekly_to_collection.sql",
      compiled: true,
      compiled_code:
        "\n\n\nselect\n  collection_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week) as bucket_week,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`events_daily_to_collection`\ngroup by\n  collection_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.events_weekly_to_collection_by_source": {
      database: "opensource-observer",
      schema: "oso",
      name: "events_weekly_to_collection_by_source",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/events/weekly/events_weekly_to_collection_by_source.sql",
      original_file_path:
        "warehouse/dbt/models/marts/events/weekly/events_weekly_to_collection_by_source.sql",
      unique_id:
        "model.opensource_observer.events_weekly_to_collection_by_source",
      fqn: [
        "opensource_observer",
        "marts",
        "events",
        "weekly",
        "events_weekly_to_collection_by_source",
      ],
      alias: "events_weekly_to_collection_by_source",
      checksum: {
        name: "sha256",
        checksum:
          "43181a7f2674a2e76ed9224ba2562b0bdc05d3387fb60d06dcbf33c35019a8fe",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: { sync_to_db: false },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: { sync_to_db: false },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table", meta: { sync_to_db: false } },
      created_at: 1719978675.500934,
      relation_name:
        "`opensource-observer`.`oso`.`events_weekly_to_collection_by_source`",
      raw_code:
        "{# \n  All events weekly to a collection by source\n#}\n{{ \n  config(meta = {\n    'sync_to_db': False\n  }) \n}}\n\nselect\n  collection_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week) as bucket_week,\n  SUM(amount) as amount\nfrom {{ ref('events_daily_to_collection_by_source') }}\ngroup by\n  collection_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week)",
      language: "sql",
      refs: [
        {
          name: "events_daily_to_collection_by_source",
          package: null,
          version: null,
        },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.events_daily_to_collection_by_source",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/events/weekly/events_weekly_to_collection_by_source.sql",
      compiled: true,
      compiled_code:
        "\n\n\nselect\n  collection_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week) as bucket_week,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`events_daily_to_collection_by_source`\ngroup by\n  collection_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, week)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.events_daily_to_collection_by_source": {
      database: "opensource-observer",
      schema: "oso",
      name: "events_daily_to_collection_by_source",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/events/daily/events_daily_to_collection_by_source.sql",
      original_file_path:
        "warehouse/dbt/models/marts/events/daily/events_daily_to_collection_by_source.sql",
      unique_id:
        "model.opensource_observer.events_daily_to_collection_by_source",
      fqn: [
        "opensource_observer",
        "marts",
        "events",
        "daily",
        "events_daily_to_collection_by_source",
      ],
      alias: "events_daily_to_collection_by_source",
      checksum: {
        name: "sha256",
        checksum:
          "4e1a1e9891e275fecd61e9942a7fab09e552e39fde50f2b04d35d63c11c6bbed",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: { sync_to_db: false },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: { sync_to_db: false },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table", meta: { sync_to_db: false } },
      created_at: 1719978675.5031402,
      relation_name:
        "`opensource-observer`.`oso`.`events_daily_to_collection_by_source`",
      raw_code:
        "{# \n  All events daily to a collection by source\n#}\n{{ \n  config(meta = {\n    'sync_to_db': False\n  }) \n}}\n\nselect\n  collection_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(time, day) as bucket_day,\n  SUM(amount) as amount\nfrom {{ ref('int_events_to_collection') }}\ngroup by\n  collection_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(time, day)",
      language: "sql",
      refs: [
        { name: "int_events_to_collection", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_events_to_collection"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/events/daily/events_daily_to_collection_by_source.sql",
      compiled: true,
      compiled_code:
        "\n\n\nselect\n  collection_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(time, day) as bucket_day,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`int_events_to_collection`\ngroup by\n  collection_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(time, day)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.events_daily_to_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "events_daily_to_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/events/daily/events_daily_to_project.sql",
      original_file_path:
        "warehouse/dbt/models/marts/events/daily/events_daily_to_project.sql",
      unique_id: "model.opensource_observer.events_daily_to_project",
      fqn: [
        "opensource_observer",
        "marts",
        "events",
        "daily",
        "events_daily_to_project",
      ],
      alias: "events_daily_to_project",
      checksum: {
        name: "sha256",
        checksum:
          "1222fecb08119731f1615db0c77d4a98e8be70eddee622050a84ecfa3c6d0b85",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: { sync_to_db: true },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: { sync_to_db: true },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table", meta: { sync_to_db: true } },
      created_at: 1719978675.50531,
      relation_name: "`opensource-observer`.`oso`.`events_daily_to_project`",
      raw_code:
        "{# \n  All events daily to a project\n#}\n{{ \n  config(meta = {\n    'sync_to_db': True\n  }) \n}}\n\nselect\n  project_id,\n  event_type,\n  TIMESTAMP_TRUNC(time, day) as bucket_day,\n  SUM(amount) as amount\nfrom {{ ref('int_events_to_project') }}\ngroup by\n  project_id,\n  event_type,\n  TIMESTAMP_TRUNC(time, day)",
      language: "sql",
      refs: [{ name: "int_events_to_project", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_events_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/events/daily/events_daily_to_project.sql",
      compiled: true,
      compiled_code:
        "\n\n\nselect\n  project_id,\n  event_type,\n  TIMESTAMP_TRUNC(time, day) as bucket_day,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`int_events_to_project`\ngroup by\n  project_id,\n  event_type,\n  TIMESTAMP_TRUNC(time, day)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.events_daily_to_artifact": {
      database: "opensource-observer",
      schema: "oso",
      name: "events_daily_to_artifact",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/events/daily/events_daily_to_artifact.sql",
      original_file_path:
        "warehouse/dbt/models/marts/events/daily/events_daily_to_artifact.sql",
      unique_id: "model.opensource_observer.events_daily_to_artifact",
      fqn: [
        "opensource_observer",
        "marts",
        "events",
        "daily",
        "events_daily_to_artifact",
      ],
      alias: "events_daily_to_artifact",
      checksum: {
        name: "sha256",
        checksum:
          "9d87f1803fc5bc7c6760d86d35d178ec922194b4451d52c47189fde1e1783c97",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: { sync_to_db: true },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: { sync_to_db: true },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table", meta: { sync_to_db: true } },
      created_at: 1719978675.5076118,
      relation_name: "`opensource-observer`.`oso`.`events_daily_to_artifact`",
      raw_code:
        "{# \n  All events daily to an artifact\n#}\n{{ \n  config(meta = {\n    'sync_to_db': True\n  }) \n}}\n\nselect\n  to_artifact_id as artifact_id,\n  event_type,\n  TIMESTAMP_TRUNC(time, day) as bucket_day,\n  SUM(amount) as amount\nfrom {{ ref('int_events_to_project') }}\ngroup by\n  to_artifact_id,\n  event_type,\n  TIMESTAMP_TRUNC(time, day)",
      language: "sql",
      refs: [{ name: "int_events_to_project", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_events_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/events/daily/events_daily_to_artifact.sql",
      compiled: true,
      compiled_code:
        "\n\n\nselect\n  to_artifact_id as artifact_id,\n  event_type,\n  TIMESTAMP_TRUNC(time, day) as bucket_day,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`int_events_to_project`\ngroup by\n  to_artifact_id,\n  event_type,\n  TIMESTAMP_TRUNC(time, day)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.events_daily_to_project_by_source": {
      database: "opensource-observer",
      schema: "oso",
      name: "events_daily_to_project_by_source",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/events/daily/events_daily_to_project_by_source.sql",
      original_file_path:
        "warehouse/dbt/models/marts/events/daily/events_daily_to_project_by_source.sql",
      unique_id: "model.opensource_observer.events_daily_to_project_by_source",
      fqn: [
        "opensource_observer",
        "marts",
        "events",
        "daily",
        "events_daily_to_project_by_source",
      ],
      alias: "events_daily_to_project_by_source",
      checksum: {
        name: "sha256",
        checksum:
          "b24506204defcf1104ef4c1d6ee2efa197dbbb16172b5330415ddc6806252377",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: { sync_to_db: false },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: { sync_to_db: false },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table", meta: { sync_to_db: false } },
      created_at: 1719978675.5104148,
      relation_name:
        "`opensource-observer`.`oso`.`events_daily_to_project_by_source`",
      raw_code:
        "{# \n  All events daily to a project by source\n#}\n{{ \n  config(meta = {\n    'sync_to_db': False\n  }) \n}}\n\nselect\n  project_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(time, day) as bucket_day,\n  SUM(amount) as amount\nfrom {{ ref('int_events_to_project') }}\ngroup by\n  project_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(time, day)",
      language: "sql",
      refs: [{ name: "int_events_to_project", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_events_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/events/daily/events_daily_to_project_by_source.sql",
      compiled: true,
      compiled_code:
        "\n\n\nselect\n  project_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(time, day) as bucket_day,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`int_events_to_project`\ngroup by\n  project_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(time, day)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.events_daily_to_collection": {
      database: "opensource-observer",
      schema: "oso",
      name: "events_daily_to_collection",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/events/daily/events_daily_to_collection.sql",
      original_file_path:
        "warehouse/dbt/models/marts/events/daily/events_daily_to_collection.sql",
      unique_id: "model.opensource_observer.events_daily_to_collection",
      fqn: [
        "opensource_observer",
        "marts",
        "events",
        "daily",
        "events_daily_to_collection",
      ],
      alias: "events_daily_to_collection",
      checksum: {
        name: "sha256",
        checksum:
          "f9cbf8f733027062fccbd845d85deb12a7991706ac6eafb0a5eb0bca86933d20",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: { sync_to_db: true },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: { sync_to_db: true },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table", meta: { sync_to_db: true } },
      created_at: 1719978675.5128033,
      relation_name: "`opensource-observer`.`oso`.`events_daily_to_collection`",
      raw_code:
        "{{ \n  config(meta = {\n    'sync_to_db': True\n  }) \n}}\n\nselect\n  collection_id,\n  event_type,\n  TIMESTAMP_TRUNC(time, day) as bucket_day,\n  SUM(amount) as amount\nfrom {{ ref('int_events_to_collection') }}\ngroup by\n  collection_id,\n  event_type,\n  TIMESTAMP_TRUNC(time, day)",
      language: "sql",
      refs: [
        { name: "int_events_to_collection", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_events_to_collection"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/events/daily/events_daily_to_collection.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  collection_id,\n  event_type,\n  TIMESTAMP_TRUNC(time, day) as bucket_day,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`int_events_to_collection`\ngroup by\n  collection_id,\n  event_type,\n  TIMESTAMP_TRUNC(time, day)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.events_monthly_to_project_by_source": {
      database: "opensource-observer",
      schema: "oso",
      name: "events_monthly_to_project_by_source",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/events/monthly/events_monthly_to_project_by_source.sql",
      original_file_path:
        "warehouse/dbt/models/marts/events/monthly/events_monthly_to_project_by_source.sql",
      unique_id:
        "model.opensource_observer.events_monthly_to_project_by_source",
      fqn: [
        "opensource_observer",
        "marts",
        "events",
        "monthly",
        "events_monthly_to_project_by_source",
      ],
      alias: "events_monthly_to_project_by_source",
      checksum: {
        name: "sha256",
        checksum:
          "1499fa594e76f627438e2a529bb968b8d25df424e4a3290932fca49e483f2d1c",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: { sync_to_db: false },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: { sync_to_db: false },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table", meta: { sync_to_db: false } },
      created_at: 1719978675.514968,
      relation_name:
        "`opensource-observer`.`oso`.`events_monthly_to_project_by_source`",
      raw_code:
        "{# \n  All events monthly to a project by source\n#}\n{{ \n  config(meta = {\n    'sync_to_db': False\n  }) \n}}\n\nselect\n  project_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month) as bucket_month,\n  SUM(amount) as amount\nfrom {{ ref('events_daily_to_project_by_source') }}\ngroup by\n  project_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month)",
      language: "sql",
      refs: [
        {
          name: "events_daily_to_project_by_source",
          package: null,
          version: null,
        },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.events_daily_to_project_by_source"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/events/monthly/events_monthly_to_project_by_source.sql",
      compiled: true,
      compiled_code:
        "\n\n\nselect\n  project_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month) as bucket_month,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`events_daily_to_project_by_source`\ngroup by\n  project_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.events_monthly_to_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "events_monthly_to_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/events/monthly/events_monthly_to_project.sql",
      original_file_path:
        "warehouse/dbt/models/marts/events/monthly/events_monthly_to_project.sql",
      unique_id: "model.opensource_observer.events_monthly_to_project",
      fqn: [
        "opensource_observer",
        "marts",
        "events",
        "monthly",
        "events_monthly_to_project",
      ],
      alias: "events_monthly_to_project",
      checksum: {
        name: "sha256",
        checksum:
          "b8fbb3dcd4522c06776d5648fd874f31a030bce8253a07b6589cb55a733aad57",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: { sync_to_db: true },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: { sync_to_db: true },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table", meta: { sync_to_db: true } },
      created_at: 1719978675.5171878,
      relation_name: "`opensource-observer`.`oso`.`events_monthly_to_project`",
      raw_code:
        "{# \n  All events monthly to a project\n#}\n{{ \n  config(meta = {\n    'sync_to_db': True\n  }) \n}}\n\nselect\n  project_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month) as bucket_month,\n  SUM(amount) as amount\nfrom {{ ref('events_daily_to_project') }}\ngroup by\n  project_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month)",
      language: "sql",
      refs: [{ name: "events_daily_to_project", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.events_daily_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/events/monthly/events_monthly_to_project.sql",
      compiled: true,
      compiled_code:
        "\n\n\nselect\n  project_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month) as bucket_month,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`events_daily_to_project`\ngroup by\n  project_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.events_monthly_to_collection": {
      database: "opensource-observer",
      schema: "oso",
      name: "events_monthly_to_collection",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/events/monthly/events_monthly_to_collection.sql",
      original_file_path:
        "warehouse/dbt/models/marts/events/monthly/events_monthly_to_collection.sql",
      unique_id: "model.opensource_observer.events_monthly_to_collection",
      fqn: [
        "opensource_observer",
        "marts",
        "events",
        "monthly",
        "events_monthly_to_collection",
      ],
      alias: "events_monthly_to_collection",
      checksum: {
        name: "sha256",
        checksum:
          "042884a16bac62be8892b93e663dfcf5b87ae92f76c59d60c9f28fb7186af7ec",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: { sync_to_db: true },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: { sync_to_db: true },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table", meta: { sync_to_db: true } },
      created_at: 1719978675.5201027,
      relation_name:
        "`opensource-observer`.`oso`.`events_monthly_to_collection`",
      raw_code:
        "{# \n  All events monthly to a collection\n#}\n{{ \n  config(meta = {\n    'sync_to_db': True\n  }) \n}}\n\nselect\n  collection_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month) as bucket_month,\n  SUM(amount) as amount\nfrom {{ ref('events_daily_to_collection') }}\ngroup by\n  collection_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month)",
      language: "sql",
      refs: [
        { name: "events_daily_to_collection", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.events_daily_to_collection"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/events/monthly/events_monthly_to_collection.sql",
      compiled: true,
      compiled_code:
        "\n\n\nselect\n  collection_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month) as bucket_month,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`events_daily_to_collection`\ngroup by\n  collection_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.events_monthly_to_artifact": {
      database: "opensource-observer",
      schema: "oso",
      name: "events_monthly_to_artifact",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/events/monthly/events_monthly_to_artifact.sql",
      original_file_path:
        "warehouse/dbt/models/marts/events/monthly/events_monthly_to_artifact.sql",
      unique_id: "model.opensource_observer.events_monthly_to_artifact",
      fqn: [
        "opensource_observer",
        "marts",
        "events",
        "monthly",
        "events_monthly_to_artifact",
      ],
      alias: "events_monthly_to_artifact",
      checksum: {
        name: "sha256",
        checksum:
          "7a18ef0aef8f823885d0c2f7eda97575628d20ab0d9e9c75ab124bb84912dbe9",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: { sync_to_db: true },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: { sync_to_db: true },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table", meta: { sync_to_db: true } },
      created_at: 1719978675.5222948,
      relation_name: "`opensource-observer`.`oso`.`events_monthly_to_artifact`",
      raw_code:
        "{# \n  All events monthly to an artifact\n#}\n{{ \n  config(meta = {\n    'sync_to_db': True\n  }) \n}}\n\nselect\n  artifact_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month) as bucket_month,\n  SUM(amount) as amount\nfrom {{ ref('events_daily_to_artifact') }}\ngroup by\n  artifact_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month)",
      language: "sql",
      refs: [
        { name: "events_daily_to_artifact", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.events_daily_to_artifact"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/events/monthly/events_monthly_to_artifact.sql",
      compiled: true,
      compiled_code:
        "\n\n\nselect\n  artifact_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month) as bucket_month,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`events_daily_to_artifact`\ngroup by\n  artifact_id,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.events_monthly_to_collection_by_source": {
      database: "opensource-observer",
      schema: "oso",
      name: "events_monthly_to_collection_by_source",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "marts/events/monthly/events_monthly_to_collection_by_source.sql",
      original_file_path:
        "warehouse/dbt/models/marts/events/monthly/events_monthly_to_collection_by_source.sql",
      unique_id:
        "model.opensource_observer.events_monthly_to_collection_by_source",
      fqn: [
        "opensource_observer",
        "marts",
        "events",
        "monthly",
        "events_monthly_to_collection_by_source",
      ],
      alias: "events_monthly_to_collection_by_source",
      checksum: {
        name: "sha256",
        checksum:
          "87b182418c19550886c214da62230efdf24a5b81007b00d57334f70da26f35e7",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: { sync_to_db: false },
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: { sync_to_db: false },
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table", meta: { sync_to_db: false } },
      created_at: 1719978675.5244815,
      relation_name:
        "`opensource-observer`.`oso`.`events_monthly_to_collection_by_source`",
      raw_code:
        "{# \n  All events monthly to a collection by source\n#}\n{{ \n  config(meta = {\n    'sync_to_db': False\n  }) \n}}\n\nselect\n  collection_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month) as bucket_month,\n  SUM(amount) as amount\nfrom {{ ref('events_daily_to_collection_by_source') }}\ngroup by\n  collection_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month)",
      language: "sql",
      refs: [
        {
          name: "events_daily_to_collection_by_source",
          package: null,
          version: null,
        },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.events_daily_to_collection_by_source",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/marts/events/monthly/events_monthly_to_collection_by_source.sql",
      compiled: true,
      compiled_code:
        "\n\n\nselect\n  collection_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month) as bucket_month,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`events_daily_to_collection_by_source`\ngroup by\n  collection_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.base_playground__ossd_repositories": {
      database: "opensource-observer",
      schema: "oso",
      name: "base_playground__ossd_repositories",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "base_playground/base_playground__ossd_repositories.sql",
      original_file_path:
        "warehouse/dbt/models/base_playground/base_playground__ossd_repositories.sql",
      unique_id: "model.opensource_observer.base_playground__ossd_repositories",
      fqn: [
        "opensource_observer",
        "base_playground",
        "base_playground__ossd_repositories",
      ],
      alias: "base_playground__ossd_repositories",
      checksum: {
        name: "sha256",
        checksum:
          "e765ab204acb73ed8ff0da69f11223ea73130498ce2d3c142d193ddfca2f2f7a",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.526636,
      relation_name:
        "`opensource-observer`.`oso`.`base_playground__ossd_repositories`",
      raw_code:
        '{#\n  This filters at the oss-directory level to ensure that the playground is very\n  minimal. It only includes a small number of projects.\n#}\n{{\n  config(\n    materialized=\'table\',\n  ) if target.name in [\'production\', \'base_playground\'] else config(\n    enabled=false,\n  )\n}}\nwith filtered_project_ids as (\n  select distinct\n    projects.project_id as `project_id`\n  from {{ ref("stg_ossd__current_projects") }} as projects\n  inner join {{ ref("base_playground__project_filter") }} as filtered\n    on filtered.project_name = projects.project_name\n), filtered_repositories as (\n  select distinct \n    repos.id as `id`, \n    repos.sync_time as `sync_time`\n  from {{ ref("stg_ossd__current_repositories") }} as repos\n  inner join {{ ref("int_artifacts_by_project") }} as artifacts_by_project\n    on CAST(repos.id as string) = artifacts_by_project.artifact_source_id\n  inner join filtered_project_ids as filtered\n    on artifacts_by_project.project_id = filtered.project_id\n)\n\nselect \n  repos.*\nfrom {{ oso_source("ossd", "repositories") }} as repos\ninner join filtered_repositories as filtered\n  on filtered.id = repos.id\n    and repos._cq_sync_time = filtered.sync_time',
      language: "sql",
      refs: [
        { name: "stg_ossd__current_projects", package: null, version: null },
        {
          name: "base_playground__project_filter",
          package: null,
          version: null,
        },
        {
          name: "stg_ossd__current_repositories",
          package: null,
          version: null,
        },
        { name: "int_artifacts_by_project", package: null, version: null },
      ],
      sources: [["ossd", "repositories"]],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.oso_source"],
        nodes: [
          "source.opensource_observer.ossd.repositories",
          "model.opensource_observer.stg_ossd__current_projects",
          "model.opensource_observer.base_playground__project_filter",
          "model.opensource_observer.stg_ossd__current_repositories",
          "model.opensource_observer.int_artifacts_by_project",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/base_playground/base_playground__ossd_repositories.sql",
      compiled: true,
      compiled_code:
        '\n\nwith  __dbt__cte__base_playground__project_filter as (\n\n\nSELECT * FROM UNNEST([\n  "gitcoin",\n  "opensource-observer",\n  "uniswap",\n  "velodrome",\n  "ethereum-attestation-service",\n  "zora",\n  "libp2p",\n  "rabbit-hole",\n  "safe-global",\n  "aave"\n]) as project_name\n), filtered_project_ids as (\n  select distinct\n    projects.project_id as `project_id`\n  from `opensource-observer`.`oso`.`stg_ossd__current_projects` as projects\n  inner join __dbt__cte__base_playground__project_filter as filtered\n    on filtered.project_name = projects.project_name\n), filtered_repositories as (\n  select distinct \n    repos.id as `id`, \n    repos.sync_time as `sync_time`\n  from `opensource-observer`.`oso`.`stg_ossd__current_repositories` as repos\n  inner join `opensource-observer`.`oso`.`int_artifacts_by_project` as artifacts_by_project\n    on CAST(repos.id as string) = artifacts_by_project.artifact_source_id\n  inner join filtered_project_ids as filtered\n    on artifacts_by_project.project_id = filtered.project_id\n)\n\nselect \n  repos.*\nfrom `opensource-observer`.`oso`.`repositories_ossd` as repos\ninner join filtered_repositories as filtered\n  on filtered.id = repos.id\n    and repos._cq_sync_time = filtered.sync_time',
      extra_ctes_injected: true,
      extra_ctes: [
        {
          id: "model.opensource_observer.base_playground__project_filter",
          sql: ' __dbt__cte__base_playground__project_filter as (\n\n\nSELECT * FROM UNNEST([\n  "gitcoin",\n  "opensource-observer",\n  "uniswap",\n  "velodrome",\n  "ethereum-attestation-service",\n  "zora",\n  "libp2p",\n  "rabbit-hole",\n  "safe-global",\n  "aave"\n]) as project_name\n)',
        },
      ],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.base_playground__ossd_projects": {
      database: "opensource-observer",
      schema: "oso",
      name: "base_playground__ossd_projects",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "base_playground/base_playground__ossd_projects.sql",
      original_file_path:
        "warehouse/dbt/models/base_playground/base_playground__ossd_projects.sql",
      unique_id: "model.opensource_observer.base_playground__ossd_projects",
      fqn: [
        "opensource_observer",
        "base_playground",
        "base_playground__ossd_projects",
      ],
      alias: "base_playground__ossd_projects",
      checksum: {
        name: "sha256",
        checksum:
          "018860f6e2473422cf2feeffc47caf9d6df3ccacd8f39e0185ce01189d6a4e18",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.5352194,
      relation_name:
        "`opensource-observer`.`oso`.`base_playground__ossd_projects`",
      raw_code:
        "{#\n  This filters at the oss-directory level to ensure that the playground is very\n  minimal. It only includes a small number of projects.\n#}\n{{\n  config(\n    materialized='table',\n  ) if target.name in ['production', 'base_playground'] else config(\n    enabled=false,\n  )\n}}\nwith filtered_projects as (\n  select distinct \n    projects.project_name as `name`, \n    projects.sync_time as `sync_time`\n  from {{ ref('stg_ossd__current_projects') }} as projects \n  inner join {{ ref(\"base_playground__project_filter\") }} as filtered\n    on filtered.project_name = projects.project_name\n)\n\nselect projects.*\nfrom {{ oso_source(\"ossd\", \"projects\") }} as projects\ninner join filtered_projects as filtered\n  on filtered.name = projects.name\n    and projects.sync_time = filtered.sync_time",
      language: "sql",
      refs: [
        { name: "stg_ossd__current_projects", package: null, version: null },
        {
          name: "base_playground__project_filter",
          package: null,
          version: null,
        },
      ],
      sources: [["ossd", "projects"]],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.oso_source"],
        nodes: [
          "source.opensource_observer.ossd.projects",
          "model.opensource_observer.stg_ossd__current_projects",
          "model.opensource_observer.base_playground__project_filter",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/base_playground/base_playground__ossd_projects.sql",
      compiled: true,
      compiled_code:
        '\n\nwith  __dbt__cte__base_playground__project_filter as (\n\n\nSELECT * FROM UNNEST([\n  "gitcoin",\n  "opensource-observer",\n  "uniswap",\n  "velodrome",\n  "ethereum-attestation-service",\n  "zora",\n  "libp2p",\n  "rabbit-hole",\n  "safe-global",\n  "aave"\n]) as project_name\n), filtered_projects as (\n  select distinct \n    projects.project_name as `name`, \n    projects.sync_time as `sync_time`\n  from `opensource-observer`.`oso`.`stg_ossd__current_projects` as projects \n  inner join __dbt__cte__base_playground__project_filter as filtered\n    on filtered.project_name = projects.project_name\n)\n\nselect projects.*\nfrom `opensource-observer`.`oso`.`projects_ossd` as projects\ninner join filtered_projects as filtered\n  on filtered.name = projects.name\n    and projects.sync_time = filtered.sync_time',
      extra_ctes_injected: true,
      extra_ctes: [
        {
          id: "model.opensource_observer.base_playground__project_filter",
          sql: ' __dbt__cte__base_playground__project_filter as (\n\n\nSELECT * FROM UNNEST([\n  "gitcoin",\n  "opensource-observer",\n  "uniswap",\n  "velodrome",\n  "ethereum-attestation-service",\n  "zora",\n  "libp2p",\n  "rabbit-hole",\n  "safe-global",\n  "aave"\n]) as project_name\n)',
        },
      ],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.base_playground__project_filter": {
      database: "opensource-observer",
      schema: "oso",
      name: "base_playground__project_filter",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "base_playground/base_playground__project_filter.sql",
      original_file_path:
        "warehouse/dbt/models/base_playground/base_playground__project_filter.sql",
      unique_id: "model.opensource_observer.base_playground__project_filter",
      fqn: [
        "opensource_observer",
        "base_playground",
        "base_playground__project_filter",
      ],
      alias: "base_playground__project_filter",
      checksum: {
        name: "sha256",
        checksum:
          "7cf665af0b09fdee905674bb8f9a02b734e2a930746d385cd2807aba5ef1926b",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "ephemeral",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "ephemeral" },
      created_at: 1719978675.5405354,
      relation_name: null,
      raw_code:
        '{#\n  This is a base model one can import into other to filter for the playground\n#}\n{{\n  config(\n    materialized="ephemeral"\n  ) if target.name in [\'production\', \'base_playground\'] else config(\n    enabled=false,\n  )\n}}\nSELECT * FROM UNNEST([\n  "gitcoin",\n  "opensource-observer",\n  "uniswap",\n  "velodrome",\n  "ethereum-attestation-service",\n  "zora",\n  "libp2p",\n  "rabbit-hole",\n  "safe-global",\n  "aave"\n]) as project_name',
      language: "sql",
      refs: [],
      sources: [],
      metrics: [],
      depends_on: { macros: [], nodes: [] },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/base_playground/base_playground__project_filter.sql",
      compiled: true,
      compiled_code:
        '\n\nSELECT * FROM UNNEST([\n  "gitcoin",\n  "opensource-observer",\n  "uniswap",\n  "velodrome",\n  "ethereum-attestation-service",\n  "zora",\n  "libp2p",\n  "rabbit-hole",\n  "safe-global",\n  "aave"\n]) as project_name',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.base_playground__ossd_collections": {
      database: "opensource-observer",
      schema: "oso",
      name: "base_playground__ossd_collections",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "base_playground/base_playground__ossd_collections.sql",
      original_file_path:
        "warehouse/dbt/models/base_playground/base_playground__ossd_collections.sql",
      unique_id: "model.opensource_observer.base_playground__ossd_collections",
      fqn: [
        "opensource_observer",
        "base_playground",
        "base_playground__ossd_collections",
      ],
      alias: "base_playground__ossd_collections",
      checksum: {
        name: "sha256",
        checksum:
          "99b97bf58fe43692b873fd8f8cc30c81428de0fec35ae1002075aa6312aef232",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.5448303,
      relation_name:
        "`opensource-observer`.`oso`.`base_playground__ossd_collections`",
      raw_code:
        "{#\n  This filters at the oss-directory level to ensure that the playground is very\n  minimal. It only includes a small number of projects.\n#}\n{{\n  config(\n    materialized='table',\n  ) if target.name in ['production', 'base_playground'] else config(\n    enabled=false,\n  )\n}}\nwith filtered_collections as (\n  select distinct \n    collections.collection_name as `name`, \n    collections.sync_time as `sync_time`\n  from {{ ref('stg_ossd__current_collections') }} as collections\n  cross join UNNEST(collections.projects) as project_name\n  inner join {{ ref('stg_ossd__current_projects') }} as projects\n    on projects.project_name = project_name\n  where project_name IN (select * from {{ ref(\"base_playground__project_filter\") }})\n)\n\nselect collections.*\nfrom {{ oso_source(\"ossd\", \"collections\") }} as collections\ninner join filtered_collections as filtered\n  on filtered.name = collections.name\n    and collections.sync_time = filtered.sync_time",
      language: "sql",
      refs: [
        { name: "stg_ossd__current_collections", package: null, version: null },
        { name: "stg_ossd__current_projects", package: null, version: null },
        {
          name: "base_playground__project_filter",
          package: null,
          version: null,
        },
      ],
      sources: [["ossd", "collections"]],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.oso_source"],
        nodes: [
          "source.opensource_observer.ossd.collections",
          "model.opensource_observer.stg_ossd__current_collections",
          "model.opensource_observer.stg_ossd__current_projects",
          "model.opensource_observer.base_playground__project_filter",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/base_playground/base_playground__ossd_collections.sql",
      compiled: true,
      compiled_code:
        '\n\nwith  __dbt__cte__base_playground__project_filter as (\n\n\nSELECT * FROM UNNEST([\n  "gitcoin",\n  "opensource-observer",\n  "uniswap",\n  "velodrome",\n  "ethereum-attestation-service",\n  "zora",\n  "libp2p",\n  "rabbit-hole",\n  "safe-global",\n  "aave"\n]) as project_name\n), filtered_collections as (\n  select distinct \n    collections.collection_name as `name`, \n    collections.sync_time as `sync_time`\n  from `opensource-observer`.`oso`.`stg_ossd__current_collections` as collections\n  cross join UNNEST(collections.projects) as project_name\n  inner join `opensource-observer`.`oso`.`stg_ossd__current_projects` as projects\n    on projects.project_name = project_name\n  where project_name IN (select * from __dbt__cte__base_playground__project_filter)\n)\n\nselect collections.*\nfrom `opensource-observer`.`oso`.`collections_ossd` as collections\ninner join filtered_collections as filtered\n  on filtered.name = collections.name\n    and collections.sync_time = filtered.sync_time',
      extra_ctes_injected: true,
      extra_ctes: [
        {
          id: "model.opensource_observer.base_playground__project_filter",
          sql: ' __dbt__cte__base_playground__project_filter as (\n\n\nSELECT * FROM UNNEST([\n  "gitcoin",\n  "opensource-observer",\n  "uniswap",\n  "velodrome",\n  "ethereum-attestation-service",\n  "zora",\n  "libp2p",\n  "rabbit-hole",\n  "safe-global",\n  "aave"\n]) as project_name\n)',
        },
      ],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_artifacts_by_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_artifacts_by_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/directory/int_artifacts_by_project.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/directory/int_artifacts_by_project.sql",
      unique_id: "model.opensource_observer.int_artifacts_by_project",
      fqn: [
        "opensource_observer",
        "intermediate",
        "directory",
        "int_artifacts_by_project",
      ],
      alias: "int_artifacts_by_project",
      checksum: {
        name: "sha256",
        checksum:
          "7a4320bf483131b6036a158d89d791e0f40ee22867320c84d25e15a33ec7ca4e",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: ["oss-directory", "artifact", "project"],
        meta: { contributors: "oso-team, tomfutago" },
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: ["oss-directory", "artifact", "project"],
      description: "Artifacts by associated list of projects",
      columns: {
        project_id: {
          name: "project_id",
          description: "project id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        artifact_namespace: {
          name: "artifact_namespace",
          description: "artifact namespace",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        artifact_type: {
          name: "artifact_type",
          description: "artifact type",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        artifact_name: {
          name: "artifact_name",
          description:
            "artifact name (e.g. GitHub repo, npm package url, blockchain address)",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        artifact_url: {
          name: "artifact_url",
          description: "artifact url",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        artifact_source_id: {
          name: "artifact_source_id",
          description:
            "artifact source id (e.g. internal GitHub repo ID, npm package url, blockchain address)",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        artifact_id: {
          name: "artifact_id",
          description:
            "artifact id - SHA256 hash derived from artifact_namespace, artifact_type and artifact_source_id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
      },
      meta: { contributors: "oso-team, tomfutago" },
      group: null,
      docs: { show: true, node_color: null },
      patch_path:
        "opensource_observer://warehouse/dbt/models/staging/oss-directory/stg_ossd__schema.yml",
      build_path: null,
      unrendered_config: {
        materialized: "view",
        tags: ["oss-directory", "artifact", "project"],
        meta: { contributors: "oso-team, tomfutago" },
      },
      created_at: 1719978676.3489661,
      relation_name: "`opensource-observer`.`oso`.`int_artifacts_by_project`",
      raw_code:
        "select distinct\n  artifacts.artifact_id,\n  artifacts.artifact_source_id,\n  artifacts.artifact_source,\n  artifacts.artifact_namespace,\n  artifacts.artifact_name,\n  artifacts.artifact_url,\n  artifacts.project_id,\n  projects.project_source,\n  projects.project_namespace,\n  projects.project_name\nfrom {{ ref('int_all_artifacts') }} as artifacts\nleft join {{ ref('int_projects') }} as projects\n  on artifacts.project_id = projects.project_id\nwhere artifacts.project_id is not null",
      language: "sql",
      refs: [
        { name: "int_all_artifacts", package: null, version: null },
        { name: "int_projects", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_all_artifacts",
          "model.opensource_observer.int_projects",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/directory/int_artifacts_by_project.sql",
      compiled: true,
      compiled_code:
        "select distinct\n  artifacts.artifact_id,\n  artifacts.artifact_source_id,\n  artifacts.artifact_source,\n  artifacts.artifact_namespace,\n  artifacts.artifact_name,\n  artifacts.artifact_url,\n  artifacts.project_id,\n  projects.project_source,\n  projects.project_namespace,\n  projects.project_name\nfrom `opensource-observer`.`oso`.`int_all_artifacts` as artifacts\nleft join `opensource-observer`.`oso`.`int_projects` as projects\n  on artifacts.project_id = projects.project_id\nwhere artifacts.project_id is not null",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_artifacts_in_ossd_by_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_artifacts_in_ossd_by_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/directory/int_artifacts_in_ossd_by_project.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/directory/int_artifacts_in_ossd_by_project.sql",
      unique_id: "model.opensource_observer.int_artifacts_in_ossd_by_project",
      fqn: [
        "opensource_observer",
        "intermediate",
        "directory",
        "int_artifacts_in_ossd_by_project",
      ],
      alias: "int_artifacts_in_ossd_by_project",
      checksum: {
        name: "sha256",
        checksum:
          "1fc8285f4e203030db0decab161cbf5bf2f9f784b8c51eb598e1f43fe7c2d58e",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.5524962,
      relation_name:
        "`opensource-observer`.`oso`.`int_artifacts_in_ossd_by_project`",
      raw_code:
        'with projects as (\n  select\n    project_id,\n    github,\n    npm,\n    blockchain\n  from {{ ref(\'stg_ossd__current_projects\') }}\n),\n\ngithub_repos as (\n  select\n    "GITHUB" as artifact_source,\n    "REPOSITORY" as artifact_type,\n    projects.project_id,\n    repos.owner as artifact_namespace,\n    repos.name as artifact_name,\n    repos.url as artifact_url,\n    CAST(repos.id as STRING) as artifact_source_id\n  from projects\n  cross join\n    UNNEST(JSON_QUERY_ARRAY(projects.github)) as github\n  inner join\n    {{ ref(\'stg_ossd__current_repositories\') }} as repos\n    on\n      LOWER(CONCAT("https://github.com/", repos.owner))\n      = LOWER(JSON_VALUE(github.url))\n      or LOWER(repos.url) = LOWER(JSON_VALUE(github.url))\n),\n\nall_npm_raw as (\n  select\n    "NPM" as artifact_source,\n    "PACKAGE" as artifact_type,\n    projects.project_id,\n    JSON_VALUE(npm.url) as artifact_source_id,\n    case\n      when\n        JSON_VALUE(npm.url) like "https://npmjs.com/package/%"\n        then SUBSTR(JSON_VALUE(npm.url), 28)\n      when\n        JSON_VALUE(npm.url) like "https://www.npmjs.com/package/%"\n        then SUBSTR(JSON_VALUE(npm.url), 31)\n    end as artifact_name,\n    JSON_VALUE(npm.url) as artifact_url\n  from projects\n  cross join\n    UNNEST(JSON_QUERY_ARRAY(projects.npm)) as npm\n),\n\nall_npm as (\n  select\n    project_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_name,\n    artifact_url,\n    SPLIT(REPLACE(artifact_name, "@", ""), "/")[SAFE_OFFSET(0)]\n      as artifact_namespace\n  from all_npm_raw\n),\n\nossd_blockchain as (\n  select\n    projects.project_id,\n    tag as artifact_type,\n    network as artifact_namespace,\n    network as artifact_source,\n    JSON_VALUE(blockchains.address) as artifact_source_id,\n    JSON_VALUE(blockchains.address) as artifact_name,\n    JSON_VALUE(blockchains.address) as artifact_url\n  from projects\n  cross join\n    UNNEST(JSON_QUERY_ARRAY(projects.blockchain)) as blockchains\n  cross join\n    UNNEST(JSON_VALUE_ARRAY(blockchains.networks)) as network\n  cross join\n    UNNEST(JSON_VALUE_ARRAY(blockchains.tags)) as tag\n),\n\nall_artifacts as (\n  select\n    project_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_url\n  from\n    github_repos\n  union all\n  select\n    project_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_url\n  from\n    ossd_blockchain\n  union all\n  select\n    project_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_url\n  from\n    all_npm\n),\n\nall_normalized_artifacts as (\n  select distinct\n    project_id,\n    LOWER(artifact_source_id) as artifact_source_id,\n    {# \n      artifact_source and artifact_type are considered internal constants hence\n      we apply an UPPER transform\n    #}\n    UPPER(artifact_source) as artifact_source,\n    UPPER(artifact_type) as artifact_type,\n    LOWER(artifact_namespace) as artifact_namespace,\n    LOWER(artifact_name) as artifact_name,\n    LOWER(artifact_url) as artifact_url\n  from all_artifacts\n)\n\nselect\n  project_id,\n  {{ oso_id("artifact_source", "artifact_source_id") }} as `artifact_id`,\n  artifact_source_id,\n  artifact_source,\n  artifact_namespace,\n  artifact_name,\n  artifact_url,\n  artifact_type\nfrom all_normalized_artifacts',
      language: "sql",
      refs: [
        { name: "stg_ossd__current_projects", package: null, version: null },
        {
          name: "stg_ossd__current_repositories",
          package: null,
          version: null,
        },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.oso_id"],
        nodes: [
          "model.opensource_observer.stg_ossd__current_projects",
          "model.opensource_observer.stg_ossd__current_repositories",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/directory/int_artifacts_in_ossd_by_project.sql",
      compiled: true,
      compiled_code:
        'with projects as (\n  select\n    project_id,\n    github,\n    npm,\n    blockchain\n  from `opensource-observer`.`oso`.`stg_ossd__current_projects`\n),\n\ngithub_repos as (\n  select\n    "GITHUB" as artifact_source,\n    "REPOSITORY" as artifact_type,\n    projects.project_id,\n    repos.owner as artifact_namespace,\n    repos.name as artifact_name,\n    repos.url as artifact_url,\n    CAST(repos.id as STRING) as artifact_source_id\n  from projects\n  cross join\n    UNNEST(JSON_QUERY_ARRAY(projects.github)) as github\n  inner join\n    `opensource-observer`.`oso`.`stg_ossd__current_repositories` as repos\n    on\n      LOWER(CONCAT("https://github.com/", repos.owner))\n      = LOWER(JSON_VALUE(github.url))\n      or LOWER(repos.url) = LOWER(JSON_VALUE(github.url))\n),\n\nall_npm_raw as (\n  select\n    "NPM" as artifact_source,\n    "PACKAGE" as artifact_type,\n    projects.project_id,\n    JSON_VALUE(npm.url) as artifact_source_id,\n    case\n      when\n        JSON_VALUE(npm.url) like "https://npmjs.com/package/%"\n        then SUBSTR(JSON_VALUE(npm.url), 28)\n      when\n        JSON_VALUE(npm.url) like "https://www.npmjs.com/package/%"\n        then SUBSTR(JSON_VALUE(npm.url), 31)\n    end as artifact_name,\n    JSON_VALUE(npm.url) as artifact_url\n  from projects\n  cross join\n    UNNEST(JSON_QUERY_ARRAY(projects.npm)) as npm\n),\n\nall_npm as (\n  select\n    project_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_name,\n    artifact_url,\n    SPLIT(REPLACE(artifact_name, "@", ""), "/")[SAFE_OFFSET(0)]\n      as artifact_namespace\n  from all_npm_raw\n),\n\nossd_blockchain as (\n  select\n    projects.project_id,\n    tag as artifact_type,\n    network as artifact_namespace,\n    network as artifact_source,\n    JSON_VALUE(blockchains.address) as artifact_source_id,\n    JSON_VALUE(blockchains.address) as artifact_name,\n    JSON_VALUE(blockchains.address) as artifact_url\n  from projects\n  cross join\n    UNNEST(JSON_QUERY_ARRAY(projects.blockchain)) as blockchains\n  cross join\n    UNNEST(JSON_VALUE_ARRAY(blockchains.networks)) as network\n  cross join\n    UNNEST(JSON_VALUE_ARRAY(blockchains.tags)) as tag\n),\n\nall_artifacts as (\n  select\n    project_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_url\n  from\n    github_repos\n  union all\n  select\n    project_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_url\n  from\n    ossd_blockchain\n  union all\n  select\n    project_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_url\n  from\n    all_npm\n),\n\nall_normalized_artifacts as (\n  select distinct\n    project_id,\n    LOWER(artifact_source_id) as artifact_source_id,\n    \n    UPPER(artifact_source) as artifact_source,\n    UPPER(artifact_type) as artifact_type,\n    LOWER(artifact_namespace) as artifact_namespace,\n    LOWER(artifact_name) as artifact_name,\n    LOWER(artifact_url) as artifact_url\n  from all_artifacts\n)\n\nselect\n  project_id,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(artifact_source, artifact_source_id))), \'+\', \'-\'), \'/\', \'_\') as `artifact_id`,\n  artifact_source_id,\n  artifact_source,\n  artifact_namespace,\n  artifact_name,\n  artifact_url,\n  artifact_type\nfrom all_normalized_artifacts',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_artifacts_history": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_artifacts_history",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/directory/int_artifacts_history.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/directory/int_artifacts_history.sql",
      unique_id: "model.opensource_observer.int_artifacts_history",
      fqn: [
        "opensource_observer",
        "intermediate",
        "directory",
        "int_artifacts_history",
      ],
      alias: "int_artifacts_history",
      checksum: {
        name: "sha256",
        checksum:
          "1510f38b65d33467e1c0124141a1072bd7668acdaa9f9364ae29f32b3a98be2b",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.559395,
      relation_name: "`opensource-observer`.`oso`.`int_artifacts_history`",
      raw_code:
        "{# \n  Currently this only captures the history of git_users.\n  It does not capture git_repo naming histories.\n#}\n\nwith user_events as (\n  {# `from` actor artifacts derived from all events #}\n  select\n    event_source as artifact_source,\n    from_artifact_source_id as artifact_source_id,\n    from_artifact_type as artifact_type,\n    from_artifact_namespace as artifact_namespace,\n    from_artifact_name as artifact_name,\n    \"\" as artifact_url,\n    time\n  from {{ ref('int_events') }}\n)\n\nselect\n  LOWER(artifact_source_id) as artifact_source_id,\n  UPPER(artifact_source) as artifact_source,\n  UPPER(artifact_type) as artifact_type,\n  LOWER(artifact_namespace) as artifact_namespace,\n  LOWER(artifact_url) as artifact_url,\n  LOWER(artifact_name) as artifact_name,\n  MAX(time) as last_used,\n  MIN(time) as first_used\nfrom user_events\ngroup by\n  artifact_source_id,\n  artifact_source,\n  artifact_type,\n  artifact_namespace,\n  artifact_url,\n  artifact_name",
      language: "sql",
      refs: [{ name: "int_events", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_events"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/directory/int_artifacts_history.sql",
      compiled: true,
      compiled_code:
        '\n\nwith user_events as (\n  \n  select\n    event_source as artifact_source,\n    from_artifact_source_id as artifact_source_id,\n    from_artifact_type as artifact_type,\n    from_artifact_namespace as artifact_namespace,\n    from_artifact_name as artifact_name,\n    "" as artifact_url,\n    time\n  from `opensource-observer`.`oso`.`int_events`\n)\n\nselect\n  LOWER(artifact_source_id) as artifact_source_id,\n  UPPER(artifact_source) as artifact_source,\n  UPPER(artifact_type) as artifact_type,\n  LOWER(artifact_namespace) as artifact_namespace,\n  LOWER(artifact_url) as artifact_url,\n  LOWER(artifact_name) as artifact_name,\n  MAX(time) as last_used,\n  MIN(time) as first_used\nfrom user_events\ngroup by\n  artifact_source_id,\n  artifact_source,\n  artifact_type,\n  artifact_namespace,\n  artifact_url,\n  artifact_name',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_collections": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_collections",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/directory/int_collections.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/directory/int_collections.sql",
      unique_id: "model.opensource_observer.int_collections",
      fqn: [
        "opensource_observer",
        "intermediate",
        "directory",
        "int_collections",
      ],
      alias: "int_collections",
      checksum: {
        name: "sha256",
        checksum:
          "162858c4c373d7f95d5a05c7e75216bf798d58f6fab6841ad97df8f21aa67201",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.5615525,
      relation_name: "`opensource-observer`.`oso`.`int_collections`",
      raw_code:
        "select\n  collections.collection_id,\n  collections.collection_source,\n  collections.collection_namespace,\n  collections.collection_name,\n  collections.display_name,\n  collections.description\nfrom {{ ref('stg_ossd__current_collections') }} as collections",
      language: "sql",
      refs: [
        { name: "stg_ossd__current_collections", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.stg_ossd__current_collections"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/directory/int_collections.sql",
      compiled: true,
      compiled_code:
        "select\n  collections.collection_id,\n  collections.collection_source,\n  collections.collection_namespace,\n  collections.collection_name,\n  collections.display_name,\n  collections.description\nfrom `opensource-observer`.`oso`.`stg_ossd__current_collections` as collections",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_artifact_types": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_artifact_types",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/directory/int_artifact_types.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/directory/int_artifact_types.sql",
      unique_id: "model.opensource_observer.int_artifact_types",
      fqn: [
        "opensource_observer",
        "intermediate",
        "directory",
        "int_artifact_types",
      ],
      alias: "int_artifact_types",
      checksum: {
        name: "sha256",
        checksum:
          "cb11ca51d7dea21cd4ae8e65d6f5aa4d8e5063ea02e2e94c4b0f9aed9ba6a845",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.5635445,
      relation_name: "`opensource-observer`.`oso`.`int_artifact_types`",
      raw_code:
        "select distinct\n  artifact_id,\n  artifact_source_id,\n  artifact_source,\n  artifact_namespace,\n  artifact_name,\n  artifact_type\nfrom {{ ref('int_all_artifacts') }}",
      language: "sql",
      refs: [{ name: "int_all_artifacts", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_all_artifacts"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/directory/int_artifact_types.sql",
      compiled: true,
      compiled_code:
        "select distinct\n  artifact_id,\n  artifact_source_id,\n  artifact_source,\n  artifact_namespace,\n  artifact_name,\n  artifact_type\nfrom `opensource-observer`.`oso`.`int_all_artifacts`",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_users": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_users",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/directory/int_users.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/directory/int_users.sql",
      unique_id: "model.opensource_observer.int_users",
      fqn: ["opensource_observer", "intermediate", "directory", "int_users"],
      alias: "int_users",
      checksum: {
        name: "sha256",
        checksum:
          "f36c30bae02a1e6165bee453f804bed9fa46b5bae06fb0d1b17239879758a4a8",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.5655062,
      relation_name: "`opensource-observer`.`oso`.`int_users`",
      raw_code:
        'with farcaster_users as (\n  select\n    user_id,\n    farcaster_id as user_source_id,\n    "FARCASTER" as user_source,\n    display_name,\n    profile_picture_url,\n    bio,\n    url\n  from {{ ref(\'stg_farcaster__profiles\') }}\n),\n\nlens_users as (\n  select\n    user_id,\n    lens_profile_id as user_source_id,\n    "LENS" as user_source,\n    full_name as display_name,\n    profile_picture_url,\n    bio,\n    "" as url\n  from {{ ref(\'stg_lens__profiles\') }}\n)\n\nselect * from farcaster_users\nunion all\nselect * from lens_users',
      language: "sql",
      refs: [
        { name: "stg_farcaster__profiles", package: null, version: null },
        { name: "stg_lens__profiles", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.stg_farcaster__profiles",
          "model.opensource_observer.stg_lens__profiles",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/directory/int_users.sql",
      compiled: true,
      compiled_code:
        'with farcaster_users as (\n  select\n    user_id,\n    farcaster_id as user_source_id,\n    "FARCASTER" as user_source,\n    display_name,\n    profile_picture_url,\n    bio,\n    url\n  from `opensource-observer`.`oso`.`stg_farcaster__profiles`\n),\n\nlens_users as (\n  select\n    user_id,\n    lens_profile_id as user_source_id,\n    "LENS" as user_source,\n    full_name as display_name,\n    profile_picture_url,\n    bio,\n    "" as url\n  from `opensource-observer`.`oso`.`stg_lens__profiles`\n)\n\nselect * from farcaster_users\nunion all\nselect * from lens_users',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_deployers_by_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_deployers_by_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/directory/int_deployers_by_project.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/directory/int_deployers_by_project.sql",
      unique_id: "model.opensource_observer.int_deployers_by_project",
      fqn: [
        "opensource_observer",
        "intermediate",
        "directory",
        "int_deployers_by_project",
      ],
      alias: "int_deployers_by_project",
      checksum: {
        name: "sha256",
        checksum:
          "8188155328fe5399aef3f8eb441c8c82eb5c28479ba073478b6eb3671581c9d5",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.567738,
      relation_name: "`opensource-observer`.`oso`.`int_deployers_by_project`",
      raw_code:
        '{# TODO: Add Ethereum / Mainnet and Arbitrum (One) to list of networks #}\n\n{% set networks = ["optimism", "base", "frax", "metal", "mode", "zora"] %}\n\n{% set union_queries = [] %}\n\n{% for network in networks %}\n  {% set table_name = "stg_" ~ network ~ "__deployers" %}\n  {% set network_upper = network.upper() %}\n\n  {% set query %}\n  select distinct\n    deployer_address,\n    \'{{ network_upper }}\' as network\n  from {{ ref(table_name) }}\n  {% endset %}\n\n  {% do union_queries.append(query) %}\n{% endfor %}\n\n{% set final_query = union_queries | join(\' union all \') %}\n\nwith all_deployers as (\n  {{ final_query }}\n),\n\nknown_deployers as (\n  select distinct\n    project_id,\n    artifact_source,\n    artifact_name\n  from {{ ref(\'int_artifacts_in_ossd_by_project\') }}\n  where artifact_type = \'DEPLOYER\'\n),\n\nany_evm_deployers as (\n  select\n    known_deployers.project_id,\n    all_deployers.deployer_address,\n    all_deployers.network\n  from all_deployers\n  left join known_deployers\n    on all_deployers.deployer_address = known_deployers.artifact_name\n  where\n    known_deployers.project_id is not null\n    and known_deployers.artifact_source = \'ANY_EVM\'\n),\n\nchain_specific_deployers as (\n  select\n    known_deployers.project_id,\n    all_deployers.deployer_address,\n    all_deployers.network\n  from all_deployers\n  left join known_deployers\n    on\n      all_deployers.deployer_address = known_deployers.artifact_name\n      and all_deployers.network = known_deployers.artifact_source\n  where\n    known_deployers.project_id is not null\n    and known_deployers.artifact_source != \'ANY_EVM\'\n),\n\nverified_deployers as (\n  select\n    project_id,\n    deployer_address,\n    network\n  from any_evm_deployers\n  union all\n  select\n    project_id,\n    deployer_address,\n    network\n  from chain_specific_deployers\n),\n\ndeployers as (\n  select distinct\n    project_id,\n    deployer_address as artifact_name,\n    network as artifact_source\n  from verified_deployers\n)\n\nselect\n  project_id,\n  {{ oso_id("artifact_source", "artifact_name") }} as artifact_id,\n  artifact_source,\n  artifact_name as artifact_source_id,\n  LOWER(artifact_source) as artifact_namespace,\n  artifact_name\nfrom deployers',
      language: "sql",
      refs: [
        { name: "stg_optimism__deployers", package: null, version: null },
        { name: "stg_base__deployers", package: null, version: null },
        { name: "stg_frax__deployers", package: null, version: null },
        { name: "stg_metal__deployers", package: null, version: null },
        { name: "stg_mode__deployers", package: null, version: null },
        { name: "stg_zora__deployers", package: null, version: null },
        {
          name: "int_artifacts_in_ossd_by_project",
          package: null,
          version: null,
        },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.oso_id"],
        nodes: [
          "model.opensource_observer.stg_optimism__deployers",
          "model.opensource_observer.stg_base__deployers",
          "model.opensource_observer.stg_frax__deployers",
          "model.opensource_observer.stg_metal__deployers",
          "model.opensource_observer.stg_mode__deployers",
          "model.opensource_observer.stg_zora__deployers",
          "model.opensource_observer.int_artifacts_in_ossd_by_project",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/directory/int_deployers_by_project.sql",
      compiled: true,
      compiled_code:
        "\n\n\n\n\n\n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n\n\n\nwith all_deployers as (\n  \n  select distinct\n    deployer_address,\n    'OPTIMISM' as network\n  from `opensource-observer`.`oso`.`stg_optimism__deployers`\n   union all \n  select distinct\n    deployer_address,\n    'BASE' as network\n  from `opensource-observer`.`oso`.`stg_base__deployers`\n   union all \n  select distinct\n    deployer_address,\n    'FRAX' as network\n  from `opensource-observer`.`oso`.`stg_frax__deployers`\n   union all \n  select distinct\n    deployer_address,\n    'METAL' as network\n  from `opensource-observer`.`oso`.`stg_metal__deployers`\n   union all \n  select distinct\n    deployer_address,\n    'MODE' as network\n  from `opensource-observer`.`oso`.`stg_mode__deployers`\n   union all \n  select distinct\n    deployer_address,\n    'ZORA' as network\n  from `opensource-observer`.`oso`.`stg_zora__deployers`\n  \n),\n\nknown_deployers as (\n  select distinct\n    project_id,\n    artifact_source,\n    artifact_name\n  from `opensource-observer`.`oso`.`int_artifacts_in_ossd_by_project`\n  where artifact_type = 'DEPLOYER'\n),\n\nany_evm_deployers as (\n  select\n    known_deployers.project_id,\n    all_deployers.deployer_address,\n    all_deployers.network\n  from all_deployers\n  left join known_deployers\n    on all_deployers.deployer_address = known_deployers.artifact_name\n  where\n    known_deployers.project_id is not null\n    and known_deployers.artifact_source = 'ANY_EVM'\n),\n\nchain_specific_deployers as (\n  select\n    known_deployers.project_id,\n    all_deployers.deployer_address,\n    all_deployers.network\n  from all_deployers\n  left join known_deployers\n    on\n      all_deployers.deployer_address = known_deployers.artifact_name\n      and all_deployers.network = known_deployers.artifact_source\n  where\n    known_deployers.project_id is not null\n    and known_deployers.artifact_source != 'ANY_EVM'\n),\n\nverified_deployers as (\n  select\n    project_id,\n    deployer_address,\n    network\n  from any_evm_deployers\n  union all\n  select\n    project_id,\n    deployer_address,\n    network\n  from chain_specific_deployers\n),\n\ndeployers as (\n  select distinct\n    project_id,\n    deployer_address as artifact_name,\n    network as artifact_source\n  from verified_deployers\n)\n\nselect\n  project_id,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(artifact_source, artifact_name))), '+', '-'), '/', '_') as artifact_id,\n  artifact_source,\n  artifact_name as artifact_source_id,\n  LOWER(artifact_source) as artifact_namespace,\n  artifact_name\nfrom deployers",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_contracts_by_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_contracts_by_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/directory/int_contracts_by_project.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/directory/int_contracts_by_project.sql",
      unique_id: "model.opensource_observer.int_contracts_by_project",
      fqn: [
        "opensource_observer",
        "intermediate",
        "directory",
        "int_contracts_by_project",
      ],
      alias: "int_contracts_by_project",
      checksum: {
        name: "sha256",
        checksum:
          "6ef5f7f6d8816108e2d223b15d29f352a1def73ae336ccedd2d4932e6ecfd6b3",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.5751388,
      relation_name: "`opensource-observer`.`oso`.`int_contracts_by_project`",
      raw_code:
        "{{\n  config(\n    materialized=\"table\"\n  )\n}}\nwith contracts_in_ossd as (\n  select\n    project_id,\n    artifact_source as network,\n    artifact_name as contract_address\n  from {{ ref('int_artifacts_in_ossd_by_project') }}\n  where artifact_type = 'CONTRACT'\n),\n\nderived_contracts_by_project as (\n  select\n    deployers_by_project.project_id,\n    derived_contracts.network,\n    derived_contracts.contract_address\n  from {{ ref('int_derived_contracts') }} as derived_contracts\n  left join {{ ref('int_deployers_by_project') }} as deployers_by_project\n    on\n      derived_contracts.deployer_address = deployers_by_project.artifact_name\n      and derived_contracts.network = deployers_by_project.artifact_source\n  where deployers_by_project.artifact_name is not null\n),\n\nunified_contracts as (\n  select distinct *\n  from (\n    select\n      project_id,\n      network,\n      contract_address\n    from contracts_in_ossd\n    union all\n    select\n      project_id,\n      network,\n      contract_address\n    from derived_contracts_by_project\n  )\n),\n\ndiscovered_contracts as (\n  select\n    unified_contracts.project_id,\n    unified_contracts.network,\n    factories.contract_address\n  from {{ ref('int_factories') }} as factories\n  left join unified_contracts\n    on\n      factories.factory_address = unified_contracts.contract_address\n      and factories.network = unified_contracts.network\n  where unified_contracts.project_id is not null\n),\n\ncontracts_by_project as (\n  select distinct *\n  from (\n    select\n      project_id,\n      network,\n      contract_address\n    from discovered_contracts\n    union all\n    select\n      project_id,\n      network,\n      contract_address\n    from unified_contracts\n  )\n)\n\nselect\n  project_id,\n  {{ oso_id(\"network\", \"contract_address\") }} as artifact_id,\n  network as artifact_source,\n  contract_address as artifact_source_id,\n  LOWER(network) as artifact_namespace,\n  contract_address as artifact_name\nfrom contracts_by_project",
      language: "sql",
      refs: [
        {
          name: "int_artifacts_in_ossd_by_project",
          package: null,
          version: null,
        },
        { name: "int_derived_contracts", package: null, version: null },
        { name: "int_deployers_by_project", package: null, version: null },
        { name: "int_factories", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.oso_id"],
        nodes: [
          "model.opensource_observer.int_artifacts_in_ossd_by_project",
          "model.opensource_observer.int_derived_contracts",
          "model.opensource_observer.int_deployers_by_project",
          "model.opensource_observer.int_factories",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/directory/int_contracts_by_project.sql",
      compiled: true,
      compiled_code:
        "\nwith contracts_in_ossd as (\n  select\n    project_id,\n    artifact_source as network,\n    artifact_name as contract_address\n  from `opensource-observer`.`oso`.`int_artifacts_in_ossd_by_project`\n  where artifact_type = 'CONTRACT'\n),\n\nderived_contracts_by_project as (\n  select\n    deployers_by_project.project_id,\n    derived_contracts.network,\n    derived_contracts.contract_address\n  from `opensource-observer`.`oso`.`int_derived_contracts` as derived_contracts\n  left join `opensource-observer`.`oso`.`int_deployers_by_project` as deployers_by_project\n    on\n      derived_contracts.deployer_address = deployers_by_project.artifact_name\n      and derived_contracts.network = deployers_by_project.artifact_source\n  where deployers_by_project.artifact_name is not null\n),\n\nunified_contracts as (\n  select distinct *\n  from (\n    select\n      project_id,\n      network,\n      contract_address\n    from contracts_in_ossd\n    union all\n    select\n      project_id,\n      network,\n      contract_address\n    from derived_contracts_by_project\n  )\n),\n\ndiscovered_contracts as (\n  select\n    unified_contracts.project_id,\n    unified_contracts.network,\n    factories.contract_address\n  from `opensource-observer`.`oso`.`int_factories` as factories\n  left join unified_contracts\n    on\n      factories.factory_address = unified_contracts.contract_address\n      and factories.network = unified_contracts.network\n  where unified_contracts.project_id is not null\n),\n\ncontracts_by_project as (\n  select distinct *\n  from (\n    select\n      project_id,\n      network,\n      contract_address\n    from discovered_contracts\n    union all\n    select\n      project_id,\n      network,\n      contract_address\n    from unified_contracts\n  )\n)\n\nselect\n  project_id,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(network, contract_address))), '+', '-'), '/', '_') as artifact_id,\n  network as artifact_source,\n  contract_address as artifact_source_id,\n  LOWER(network) as artifact_namespace,\n  contract_address as artifact_name\nfrom contracts_by_project",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_projects_by_collection": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_projects_by_collection",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/directory/int_projects_by_collection.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/directory/int_projects_by_collection.sql",
      unique_id: "model.opensource_observer.int_projects_by_collection",
      fqn: [
        "opensource_observer",
        "intermediate",
        "directory",
        "int_projects_by_collection",
      ],
      alias: "int_projects_by_collection",
      checksum: {
        name: "sha256",
        checksum:
          "dd39969856ee38f7629b7572a5aafe5430b722b4816a4d04516c78d9711ebee1",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: ["staging", "oss-directory", "project", "collection"],
        meta: { contributors: "oso-team, tomfutago" },
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: ["staging", "oss-directory", "project", "collection"],
      description: "Projects by collection (referencial list of IDs)",
      columns: {
        collection_id: {
          name: "collection_id",
          description: "collection id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        project_id: {
          name: "project_id",
          description: "project id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
      },
      meta: { contributors: "oso-team, tomfutago" },
      group: null,
      docs: { show: true, node_color: null },
      patch_path:
        "opensource_observer://warehouse/dbt/models/staging/oss-directory/stg_ossd__schema.yml",
      build_path: null,
      unrendered_config: {
        materialized: "view",
        tags: ["staging", "oss-directory", "project", "collection"],
        meta: { contributors: "oso-team, tomfutago" },
      },
      created_at: 1719978676.3589299,
      relation_name: "`opensource-observer`.`oso`.`int_projects_by_collection`",
      raw_code:
        "{#\n  Many to many relationship table for collections\n#}\n\nselect\n  stg_ossd__current_collections.collection_id,\n  stg_ossd__current_collections.collection_source,\n  stg_ossd__current_collections.collection_namespace,\n  stg_ossd__current_collections.collection_name,\n  stg_ossd__current_projects.project_id,\n  stg_ossd__current_projects.project_source,\n  stg_ossd__current_projects.project_namespace,\n  stg_ossd__current_projects.project_name\nfrom {{ ref('stg_ossd__current_collections') }}\ncross join UNNEST(stg_ossd__current_collections.projects) as project_name\ninner join {{ ref('stg_ossd__current_projects') }}\n  on stg_ossd__current_projects.project_name = project_name",
      language: "sql",
      refs: [
        { name: "stg_ossd__current_collections", package: null, version: null },
        { name: "stg_ossd__current_projects", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.stg_ossd__current_collections",
          "model.opensource_observer.stg_ossd__current_projects",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/directory/int_projects_by_collection.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  stg_ossd__current_collections.collection_id,\n  stg_ossd__current_collections.collection_source,\n  stg_ossd__current_collections.collection_namespace,\n  stg_ossd__current_collections.collection_name,\n  stg_ossd__current_projects.project_id,\n  stg_ossd__current_projects.project_source,\n  stg_ossd__current_projects.project_namespace,\n  stg_ossd__current_projects.project_name\nfrom `opensource-observer`.`oso`.`stg_ossd__current_collections`\ncross join UNNEST(stg_ossd__current_collections.projects) as project_name\ninner join `opensource-observer`.`oso`.`stg_ossd__current_projects`\n  on stg_ossd__current_projects.project_name = project_name",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_artifacts_by_user": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_artifacts_by_user",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/directory/int_artifacts_by_user.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/directory/int_artifacts_by_user.sql",
      unique_id: "model.opensource_observer.int_artifacts_by_user",
      fqn: [
        "opensource_observer",
        "intermediate",
        "directory",
        "int_artifacts_by_user",
      ],
      alias: "int_artifacts_by_user",
      checksum: {
        name: "sha256",
        checksum:
          "4a12f24c640791097584bbc484c987a8c6caf2da348bc62411a63f4e72afba8c",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.5827017,
      relation_name: "`opensource-observer`.`oso`.`int_artifacts_by_user`",
      raw_code:
        "{#\n  Many to many relationship table for users and artifacts\n  Note: Currently this does not make any assumptions about\n  whether the artifact is an EOA address.\n#}\n\n\nwith farcaster_users as (\n  select\n    int_users.user_id,\n    int_users.user_source,\n    int_users.user_source_id,\n    int_users.display_name,\n    int_artifacts.artifact_id,\n    int_artifacts.artifact_source,\n    int_artifacts.artifact_namespace,\n    stg_farcaster__addresses.address as artifact_name\n  from {{ ref('int_users') }}\n  inner join {{ ref('stg_farcaster__addresses') }}\n    on int_users.user_source_id = stg_farcaster__addresses.fid\n  inner join {{ ref('int_artifacts') }}\n    on stg_farcaster__addresses.address = int_artifacts.artifact_name\n  where int_users.user_source = 'FARCASTER'\n)\n\nselect\n  user_id,\n  user_source,\n  user_source_id,\n  display_name,\n  artifact_id,\n  artifact_source,\n  artifact_namespace,\n  artifact_name\nfrom farcaster_users",
      language: "sql",
      refs: [
        { name: "int_users", package: null, version: null },
        { name: "stg_farcaster__addresses", package: null, version: null },
        { name: "int_artifacts", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_users",
          "model.opensource_observer.stg_farcaster__addresses",
          "model.opensource_observer.int_artifacts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/directory/int_artifacts_by_user.sql",
      compiled: true,
      compiled_code:
        "\n\n\nwith farcaster_users as (\n  select\n    int_users.user_id,\n    int_users.user_source,\n    int_users.user_source_id,\n    int_users.display_name,\n    int_artifacts.artifact_id,\n    int_artifacts.artifact_source,\n    int_artifacts.artifact_namespace,\n    stg_farcaster__addresses.address as artifact_name\n  from `opensource-observer`.`oso`.`int_users`\n  inner join `opensource-observer`.`oso`.`stg_farcaster__addresses`\n    on int_users.user_source_id = stg_farcaster__addresses.fid\n  inner join `opensource-observer`.`oso`.`int_artifacts`\n    on stg_farcaster__addresses.address = int_artifacts.artifact_name\n  where int_users.user_source = 'FARCASTER'\n)\n\nselect\n  user_id,\n  user_source,\n  user_source_id,\n  display_name,\n  artifact_id,\n  artifact_source,\n  artifact_namespace,\n  artifact_name\nfrom farcaster_users",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_projects": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_projects",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/directory/int_projects.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/directory/int_projects.sql",
      unique_id: "model.opensource_observer.int_projects",
      fqn: ["opensource_observer", "intermediate", "directory", "int_projects"],
      alias: "int_projects",
      checksum: {
        name: "sha256",
        checksum:
          "240c5b23bf9d0282d418311882abcadb1640342af14912284bde48bff484aa47",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.5848963,
      relation_name: "`opensource-observer`.`oso`.`int_projects`",
      raw_code:
        "select\n  project_id,\n  project_source,\n  project_namespace,\n  project_name,\n  display_name,\n  description,\n  ARRAY_LENGTH(JSON_EXTRACT_ARRAY(github))\n    as github_artifact_count,\n  ARRAY_LENGTH(JSON_EXTRACT_ARRAY(blockchain))\n    as blockchain_artifact_count,\n  ARRAY_LENGTH(JSON_EXTRACT_ARRAY(npm))\n    as npm_artifact_count\nfrom {{ ref('stg_ossd__current_projects') }}",
      language: "sql",
      refs: [
        { name: "stg_ossd__current_projects", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.stg_ossd__current_projects"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/directory/int_projects.sql",
      compiled: true,
      compiled_code:
        "select\n  project_id,\n  project_source,\n  project_namespace,\n  project_name,\n  display_name,\n  description,\n  ARRAY_LENGTH(JSON_EXTRACT_ARRAY(github))\n    as github_artifact_count,\n  ARRAY_LENGTH(JSON_EXTRACT_ARRAY(blockchain))\n    as blockchain_artifact_count,\n  ARRAY_LENGTH(JSON_EXTRACT_ARRAY(npm))\n    as npm_artifact_count\nfrom `opensource-observer`.`oso`.`stg_ossd__current_projects`",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_artifacts": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_artifacts",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/directory/int_artifacts.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/directory/int_artifacts.sql",
      unique_id: "model.opensource_observer.int_artifacts",
      fqn: [
        "opensource_observer",
        "intermediate",
        "directory",
        "int_artifacts",
      ],
      alias: "int_artifacts",
      checksum: {
        name: "sha256",
        checksum:
          "ea4a3224cbf031a99a5eb21263374e95b0ae75196ba568efae6964fa6c9f5ab3",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.5868497,
      relation_name: "`opensource-observer`.`oso`.`int_artifacts`",
      raw_code:
        "with all_artifacts as (\n\n  {#\n    This grabs all the artifacts we know about from OSSD and from the contract discovery process.\n  #}\n\n  select\n    artifact_source_id,\n    artifact_source,\n    artifact_namespace,\n    artifact_url,\n    artifact_name\n  from {{ ref('int_artifacts_by_project') }}\n\n  union all\n\n  {#\n    This grabs the universe of blockchain artifacts that have interacted with the contracts we care about from the events table.\n    TODO: this should be refactored when we \"index the universe\"\n  #}\n\n  select distinct\n    artifact_source_id,\n    artifact_source,\n    lower(artifact_source) as artifact_namespace,\n    artifact_source_id as artifact_name,\n    artifact_source_id as artifact_url\n  from (\n    select\n      from_artifact_source_id as artifact_source_id,\n      event_source as artifact_source\n    from {{ ref('int_events') }}\n    where event_type = 'CONTRACT_INVOCATION_DAILY_COUNT'\n    union all\n    select\n      to_artifact_source_id as artifact_source_id,\n      event_source as artifact_source\n    from {{ ref('int_events') }}\n    where event_type = 'CONTRACT_INVOCATION_DAILY_COUNT'\n  )\n\n  union all\n\n  {# \n    This grabs the universe of GitHub users that have interacted with the repos we care about.\n    The `last_used` value is later used in this query to determine what the most _current_ name is. However, oss-directory names are considered canonical so `last_used` is only relevent for `git_user` artifacts.\n  #}\n\n  select\n    artifact_source_id,\n    artifact_source,\n    artifact_namespace,\n    artifact_url,\n    max_by(artifact_name, last_used) as artifact_name\n  from {{ ref('int_artifacts_history') }}\n  group by\n    artifact_source_id,\n    artifact_source,\n    artifact_namespace,\n    artifact_url\n)\n\nselect distinct\n  {{ oso_id(\"artifact_source\", \"artifact_source_id\") }} as artifact_id,\n  artifact_source_id,\n  artifact_source,\n  artifact_namespace,\n  artifact_name,\n  artifact_url\nfrom all_artifacts",
      language: "sql",
      refs: [
        { name: "int_artifacts_by_project", package: null, version: null },
        { name: "int_events", package: null, version: null },
        { name: "int_events", package: null, version: null },
        { name: "int_artifacts_history", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.oso_id"],
        nodes: [
          "model.opensource_observer.int_artifacts_by_project",
          "model.opensource_observer.int_events",
          "model.opensource_observer.int_artifacts_history",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/directory/int_artifacts.sql",
      compiled: true,
      compiled_code:
        "with all_artifacts as (\n\n  \n\n  select\n    artifact_source_id,\n    artifact_source,\n    artifact_namespace,\n    artifact_url,\n    artifact_name\n  from `opensource-observer`.`oso`.`int_artifacts_by_project`\n\n  union all\n\n  \n\n  select distinct\n    artifact_source_id,\n    artifact_source,\n    lower(artifact_source) as artifact_namespace,\n    artifact_source_id as artifact_name,\n    artifact_source_id as artifact_url\n  from (\n    select\n      from_artifact_source_id as artifact_source_id,\n      event_source as artifact_source\n    from `opensource-observer`.`oso`.`int_events`\n    where event_type = 'CONTRACT_INVOCATION_DAILY_COUNT'\n    union all\n    select\n      to_artifact_source_id as artifact_source_id,\n      event_source as artifact_source\n    from `opensource-observer`.`oso`.`int_events`\n    where event_type = 'CONTRACT_INVOCATION_DAILY_COUNT'\n  )\n\n  union all\n\n  \n\n  select\n    artifact_source_id,\n    artifact_source,\n    artifact_namespace,\n    artifact_url,\n    max_by(artifact_name, last_used) as artifact_name\n  from `opensource-observer`.`oso`.`int_artifacts_history`\n  group by\n    artifact_source_id,\n    artifact_source,\n    artifact_namespace,\n    artifact_url\n)\n\nselect distinct\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(artifact_source, artifact_source_id))), '+', '-'), '/', '_') as artifact_id,\n  artifact_source_id,\n  artifact_source,\n  artifact_namespace,\n  artifact_name,\n  artifact_url\nfrom all_artifacts",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_all_artifacts": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_all_artifacts",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/directory/int_all_artifacts.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/directory/int_all_artifacts.sql",
      unique_id: "model.opensource_observer.int_all_artifacts",
      fqn: [
        "opensource_observer",
        "intermediate",
        "directory",
        "int_all_artifacts",
      ],
      alias: "int_all_artifacts",
      checksum: {
        name: "sha256",
        checksum:
          "056a3c2168d75609479040a88ac5bec07f2832e14a0e67e3436044fc93b3920b",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.591934,
      relation_name: "`opensource-observer`.`oso`.`int_all_artifacts`",
      raw_code:
        "{#\n  This model is responsible for generating a list of all artifacts associated with a project.\n  This includes repositories, npm packages, blockchain addresses, and contracts.\n\n  Note: This will create a separate row for each artifact_type, which is de-duplicated\n    in int_artifacts_by_project\n  Note: Currently, the source and namespace for blockchain artifacts are the same. This may change\n  in the future.\n#}\n\nwith ossd_artifacts as (\n  select\n    project_id,\n    artifact_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_url\n  from {{ ref(\"int_artifacts_in_ossd_by_project\") }}\n  where artifact_type not in ('DEPLOYER', 'CONTRACT')\n),\n\nverified_deployers as (\n  select\n    project_id,\n    artifact_id,\n    artifact_source_id,\n    artifact_source,\n    'DEPLOYER' as artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_name as artifact_url\n  from {{ ref(\"int_deployers_by_project\") }}\n),\n\nverified_contracts as (\n  select\n    project_id,\n    artifact_id,\n    artifact_source_id,\n    artifact_source,\n    'CONTRACT' as artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_name as artifact_url\n  from {{ ref(\"int_contracts_by_project\") }}\n),\n\nonchain_artifacts as (\n  select\n    project_id,\n    artifact_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_url\n  from verified_deployers\n  union all\n  select\n    project_id,\n    artifact_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_url\n  from verified_contracts\n),\n\nother_artifacts as (\n  select\n    project_id,\n    artifact_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_url\n  from ossd_artifacts\n  where artifact_id not in (select artifact_id from onchain_artifacts)\n),\n\nall_normalized_artifacts as (\n  select\n    project_id,\n    artifact_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_url\n  from other_artifacts\n  union all\n  select\n    project_id,\n    artifact_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_url\n  from onchain_artifacts\n)\n\nselect distinct\n  project_id,\n  artifact_id,\n  artifact_source_id,\n  artifact_source,\n  artifact_namespace,\n  artifact_name,\n  artifact_url,\n  artifact_type\nfrom all_normalized_artifacts",
      language: "sql",
      refs: [
        {
          name: "int_artifacts_in_ossd_by_project",
          package: null,
          version: null,
        },
        { name: "int_deployers_by_project", package: null, version: null },
        { name: "int_contracts_by_project", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_artifacts_in_ossd_by_project",
          "model.opensource_observer.int_deployers_by_project",
          "model.opensource_observer.int_contracts_by_project",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/directory/int_all_artifacts.sql",
      compiled: true,
      compiled_code:
        "\n\nwith ossd_artifacts as (\n  select\n    project_id,\n    artifact_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_url\n  from `opensource-observer`.`oso`.`int_artifacts_in_ossd_by_project`\n  where artifact_type not in ('DEPLOYER', 'CONTRACT')\n),\n\nverified_deployers as (\n  select\n    project_id,\n    artifact_id,\n    artifact_source_id,\n    artifact_source,\n    'DEPLOYER' as artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_name as artifact_url\n  from `opensource-observer`.`oso`.`int_deployers_by_project`\n),\n\nverified_contracts as (\n  select\n    project_id,\n    artifact_id,\n    artifact_source_id,\n    artifact_source,\n    'CONTRACT' as artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_name as artifact_url\n  from `opensource-observer`.`oso`.`int_contracts_by_project`\n),\n\nonchain_artifacts as (\n  select\n    project_id,\n    artifact_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_url\n  from verified_deployers\n  union all\n  select\n    project_id,\n    artifact_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_url\n  from verified_contracts\n),\n\nother_artifacts as (\n  select\n    project_id,\n    artifact_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_url\n  from ossd_artifacts\n  where artifact_id not in (select artifact_id from onchain_artifacts)\n),\n\nall_normalized_artifacts as (\n  select\n    project_id,\n    artifact_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_url\n  from other_artifacts\n  union all\n  select\n    project_id,\n    artifact_id,\n    artifact_source_id,\n    artifact_source,\n    artifact_type,\n    artifact_namespace,\n    artifact_name,\n    artifact_url\n  from onchain_artifacts\n)\n\nselect distinct\n  project_id,\n  artifact_id,\n  artifact_source_id,\n  artifact_source,\n  artifact_namespace,\n  artifact_name,\n  artifact_url,\n  artifact_type\nfrom all_normalized_artifacts",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_repo_metrics_by_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_repo_metrics_by_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/metrics/int_repo_metrics_by_project.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/metrics/int_repo_metrics_by_project.sql",
      unique_id: "model.opensource_observer.int_repo_metrics_by_project",
      fqn: [
        "opensource_observer",
        "intermediate",
        "metrics",
        "int_repo_metrics_by_project",
      ],
      alias: "int_repo_metrics_by_project",
      checksum: {
        name: "sha256",
        checksum:
          "3c3370f12ab31a0f77018e1881f23a6948eacbc9b7beb40d29ea2e779d84faac",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.5953977,
      relation_name:
        "`opensource-observer`.`oso`.`int_repo_metrics_by_project`",
      raw_code:
        "{{\n  config(\n    materialized='table'\n  )\n}}\n\nwith repo_artifact as (\n  select\n    'GITHUB' as artifact_source,\n    is_fork,\n    fork_count,\n    star_count,\n    license_spdx_id,\n    language,\n    watcher_count,\n    CAST(id as STRING) as artifact_source_id,\n    LOWER(owner) as artifact_namespace,\n    LOWER(name) as artifact_name\n  from {{ ref('stg_ossd__current_repositories') }}\n),\n\nrepo_snapshot as (\n  select\n    {{ oso_id(\"a.artifact_source\", \"a.artifact_source_id\") }} as `artifact_id`,\n    artifact_namespace,\n    artifact_name,\n    license_spdx_id,\n    language,\n    is_fork,\n    fork_count,\n    star_count,\n    watcher_count\n  from repo_artifact as a\n),\n\nrepo_stats as (\n  select\n    project_id,\n    to_artifact_id as artifact_id,\n    MIN(time) as first_commit_time,\n    MAX(time) as last_commit_time,\n    COUNT(distinct TIMESTAMP_TRUNC(time, day)) as days_with_commits_count,\n    COUNT(distinct from_artifact_id) as contributors_to_repo_count,\n    SUM(amount) as commit_count\n  from {{ ref('int_events_to_project') }}\n  where event_type = 'COMMIT_CODE'\n  group by\n    project_id,\n    to_artifact_id\n)\n\n\nselect\n  int_artifacts_in_ossd_by_project.project_id,\n  int_artifacts_in_ossd_by_project.artifact_id,\n  int_artifacts_in_ossd_by_project.artifact_namespace,\n  int_artifacts_in_ossd_by_project.artifact_name,\n  int_artifacts_in_ossd_by_project.artifact_source,\n  repo_snapshot.is_fork,\n  repo_snapshot.fork_count,\n  repo_snapshot.star_count,\n  repo_snapshot.watcher_count,\n  repo_snapshot.language,\n  repo_snapshot.license_spdx_id,\n  repo_stats.first_commit_time,\n  repo_stats.last_commit_time,\n  repo_stats.days_with_commits_count,\n  repo_stats.contributors_to_repo_count,\n  repo_stats.commit_count\nfrom {{ ref('int_artifacts_in_ossd_by_project') }}\nleft join repo_snapshot\n  on int_artifacts_in_ossd_by_project.artifact_id = repo_snapshot.artifact_id\nleft join repo_stats\n  on int_artifacts_in_ossd_by_project.artifact_id = repo_stats.artifact_id\nwhere\n  int_artifacts_in_ossd_by_project.artifact_source = 'GITHUB'\n  and int_artifacts_in_ossd_by_project.artifact_type = 'REPOSITORY'",
      language: "sql",
      refs: [
        {
          name: "stg_ossd__current_repositories",
          package: null,
          version: null,
        },
        { name: "int_events_to_project", package: null, version: null },
        {
          name: "int_artifacts_in_ossd_by_project",
          package: null,
          version: null,
        },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.oso_id"],
        nodes: [
          "model.opensource_observer.stg_ossd__current_repositories",
          "model.opensource_observer.int_events_to_project",
          "model.opensource_observer.int_artifacts_in_ossd_by_project",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/metrics/int_repo_metrics_by_project.sql",
      compiled: true,
      compiled_code:
        "\n\nwith repo_artifact as (\n  select\n    'GITHUB' as artifact_source,\n    is_fork,\n    fork_count,\n    star_count,\n    license_spdx_id,\n    language,\n    watcher_count,\n    CAST(id as STRING) as artifact_source_id,\n    LOWER(owner) as artifact_namespace,\n    LOWER(name) as artifact_name\n  from `opensource-observer`.`oso`.`stg_ossd__current_repositories`\n),\n\nrepo_snapshot as (\n  select\n    REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(a.artifact_source, a.artifact_source_id))), '+', '-'), '/', '_') as `artifact_id`,\n    artifact_namespace,\n    artifact_name,\n    license_spdx_id,\n    language,\n    is_fork,\n    fork_count,\n    star_count,\n    watcher_count\n  from repo_artifact as a\n),\n\nrepo_stats as (\n  select\n    project_id,\n    to_artifact_id as artifact_id,\n    MIN(time) as first_commit_time,\n    MAX(time) as last_commit_time,\n    COUNT(distinct TIMESTAMP_TRUNC(time, day)) as days_with_commits_count,\n    COUNT(distinct from_artifact_id) as contributors_to_repo_count,\n    SUM(amount) as commit_count\n  from `opensource-observer`.`oso`.`int_events_to_project`\n  where event_type = 'COMMIT_CODE'\n  group by\n    project_id,\n    to_artifact_id\n)\n\n\nselect\n  int_artifacts_in_ossd_by_project.project_id,\n  int_artifacts_in_ossd_by_project.artifact_id,\n  int_artifacts_in_ossd_by_project.artifact_namespace,\n  int_artifacts_in_ossd_by_project.artifact_name,\n  int_artifacts_in_ossd_by_project.artifact_source,\n  repo_snapshot.is_fork,\n  repo_snapshot.fork_count,\n  repo_snapshot.star_count,\n  repo_snapshot.watcher_count,\n  repo_snapshot.language,\n  repo_snapshot.license_spdx_id,\n  repo_stats.first_commit_time,\n  repo_stats.last_commit_time,\n  repo_stats.days_with_commits_count,\n  repo_stats.contributors_to_repo_count,\n  repo_stats.commit_count\nfrom `opensource-observer`.`oso`.`int_artifacts_in_ossd_by_project`\nleft join repo_snapshot\n  on int_artifacts_in_ossd_by_project.artifact_id = repo_snapshot.artifact_id\nleft join repo_stats\n  on int_artifacts_in_ossd_by_project.artifact_id = repo_stats.artifact_id\nwhere\n  int_artifacts_in_ossd_by_project.artifact_source = 'GITHUB'\n  and int_artifacts_in_ossd_by_project.artifact_type = 'REPOSITORY'",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_onchain_metrics_by_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_onchain_metrics_by_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/metrics/int_onchain_metrics_by_project.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/metrics/int_onchain_metrics_by_project.sql",
      unique_id: "model.opensource_observer.int_onchain_metrics_by_project",
      fqn: [
        "opensource_observer",
        "intermediate",
        "metrics",
        "int_onchain_metrics_by_project",
      ],
      alias: "int_onchain_metrics_by_project",
      checksum: {
        name: "sha256",
        checksum:
          "7d5e1df0dfc6ae2ee61cf4b5905e5f36b4a0b627871e9337c021622e6bcac363",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.6006272,
      relation_name:
        "`opensource-observer`.`oso`.`int_onchain_metrics_by_project`",
      raw_code:
        "{{ \n  config(\n    materialized='table'\n  )\n}}\n\nwith metrics as (\n  select * from {{ ref('int_onchain_metric__active_addresses') }}\n  union all\n  select * from {{ ref('int_onchain_metric__active_contracts') }}\n  union all\n  select * from {{ ref('int_onchain_metric__gas_fees') }}\n  union all\n  select *\n  from {{ ref('int_onchain_metric__days_since_first_transaction') }}\n  union all\n  select *\n  from {{ ref('int_onchain_metric__high_low_activity_addresses') }}\n  union all\n  select *\n  from {{ ref('int_onchain_metric__multi_project_addresses') }}\n  union all\n  select *\n  from {{ ref('int_onchain_metric__new_addresses') }}\n  union all\n  select *\n  from {{ ref('int_onchain_metric__returning_addresses') }}\n  union all\n  select * from {{ ref('int_onchain_metric__transactions') }}\n),\n\naggs as (\n  select\n    project_id,\n    event_source,\n    SUM(\n      case\n        when\n          metric = 'days_since_first_transaction'\n          and time_interval = 'ALL'\n          then amount\n        else 0\n      end\n    ) as days_since_first_transaction,\n    SUM(\n      case\n        when\n          metric = 'active_contract_count'\n          and time_interval = '90 DAYS'\n          then amount\n        else 0\n      end\n    ) as active_contract_count_90_days,\n    SUM(\n      case\n        when\n          metric = 'transaction_count'\n          and time_interval = 'ALL'\n          then amount\n        else 0\n      end\n    ) as transaction_count,\n    SUM(\n      case\n        when\n          metric = 'transaction_count'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as transaction_count_6_months,\n    SUM(\n      case\n        when\n          metric = 'gas_fees'\n          and time_interval = 'ALL'\n          then amount\n        else 0\n      end\n    ) as gas_fees_sum,\n    SUM(\n      case\n        when\n          metric = 'gas_fees'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as gas_fees_sum_6_months,\n    SUM(\n      case\n        when\n          metric = 'address_count'\n          and time_interval = 'ALL'\n          then amount\n        else 0\n      end\n    ) as address_count,\n    SUM(\n      case\n        when\n          metric = 'address_count'\n          and time_interval = '90 DAYS'\n          then amount\n        else 0\n      end\n    ) as address_count_90_days,\n    SUM(\n      case\n        when\n          metric = 'new_address_count'\n          and time_interval = '90 DAYS'\n          then amount\n        else 0\n      end\n    ) as new_address_count_90_days,\n    SUM(\n      case\n        when\n          metric = 'returning_address_count'\n          and time_interval = '90 DAYS'\n          then amount\n        else 0\n      end\n    ) as returning_address_count_90_days,\n    SUM(\n      case\n        when\n          metric = 'high_activity_address_count'\n          and time_interval = '90 DAYS'\n          then amount\n        else 0\n      end\n    ) as high_activity_address_count_90_days,\n    SUM(\n      case\n        when\n          metric = 'medium_activity_address_count'\n          and time_interval = '90 DAYS'\n          then amount\n        else 0\n      end\n    ) as medium_activity_address_count_90_days,\n    SUM(\n      case\n        when\n          metric = 'low_activity_address_count'\n          and time_interval = '90 DAYS'\n          then amount\n        else 0\n      end\n    ) as low_activity_address_count_90_days,\n    SUM(\n      case\n        when\n          metric = 'multi_project_address_count'\n          and time_interval = '90 DAYS'\n          then amount\n        else 0\n      end\n    ) as multi_project_address_count_90_days\n  from metrics\n  group by\n    project_id,\n    event_source\n)\n\nselect\n  aggs.* except (project_id),\n  int_projects.project_source,\n  int_projects.project_namespace,\n  int_projects.project_name,\n  int_projects.display_name,\n  int_projects.project_id\nfrom\n  {{ ref('int_projects') }}\nleft join aggs\n  on int_projects.project_id = aggs.project_id\nwhere aggs.event_source is not null",
      language: "sql",
      refs: [
        {
          name: "int_onchain_metric__active_addresses",
          package: null,
          version: null,
        },
        {
          name: "int_onchain_metric__active_contracts",
          package: null,
          version: null,
        },
        { name: "int_onchain_metric__gas_fees", package: null, version: null },
        {
          name: "int_onchain_metric__days_since_first_transaction",
          package: null,
          version: null,
        },
        {
          name: "int_onchain_metric__high_low_activity_addresses",
          package: null,
          version: null,
        },
        {
          name: "int_onchain_metric__multi_project_addresses",
          package: null,
          version: null,
        },
        {
          name: "int_onchain_metric__new_addresses",
          package: null,
          version: null,
        },
        {
          name: "int_onchain_metric__returning_addresses",
          package: null,
          version: null,
        },
        {
          name: "int_onchain_metric__transactions",
          package: null,
          version: null,
        },
        { name: "int_projects", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_onchain_metric__active_addresses",
          "model.opensource_observer.int_onchain_metric__active_contracts",
          "model.opensource_observer.int_onchain_metric__gas_fees",
          "model.opensource_observer.int_onchain_metric__days_since_first_transaction",
          "model.opensource_observer.int_onchain_metric__high_low_activity_addresses",
          "model.opensource_observer.int_onchain_metric__multi_project_addresses",
          "model.opensource_observer.int_onchain_metric__new_addresses",
          "model.opensource_observer.int_onchain_metric__returning_addresses",
          "model.opensource_observer.int_onchain_metric__transactions",
          "model.opensource_observer.int_projects",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/metrics/int_onchain_metrics_by_project.sql",
      compiled: true,
      compiled_code:
        "\n\nwith metrics as (\n  select * from `opensource-observer`.`oso`.`int_onchain_metric__active_addresses`\n  union all\n  select * from `opensource-observer`.`oso`.`int_onchain_metric__active_contracts`\n  union all\n  select * from `opensource-observer`.`oso`.`int_onchain_metric__gas_fees`\n  union all\n  select *\n  from `opensource-observer`.`oso`.`int_onchain_metric__days_since_first_transaction`\n  union all\n  select *\n  from `opensource-observer`.`oso`.`int_onchain_metric__high_low_activity_addresses`\n  union all\n  select *\n  from `opensource-observer`.`oso`.`int_onchain_metric__multi_project_addresses`\n  union all\n  select *\n  from `opensource-observer`.`oso`.`int_onchain_metric__new_addresses`\n  union all\n  select *\n  from `opensource-observer`.`oso`.`int_onchain_metric__returning_addresses`\n  union all\n  select * from `opensource-observer`.`oso`.`int_onchain_metric__transactions`\n),\n\naggs as (\n  select\n    project_id,\n    event_source,\n    SUM(\n      case\n        when\n          metric = 'days_since_first_transaction'\n          and time_interval = 'ALL'\n          then amount\n        else 0\n      end\n    ) as days_since_first_transaction,\n    SUM(\n      case\n        when\n          metric = 'active_contract_count'\n          and time_interval = '90 DAYS'\n          then amount\n        else 0\n      end\n    ) as active_contract_count_90_days,\n    SUM(\n      case\n        when\n          metric = 'transaction_count'\n          and time_interval = 'ALL'\n          then amount\n        else 0\n      end\n    ) as transaction_count,\n    SUM(\n      case\n        when\n          metric = 'transaction_count'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as transaction_count_6_months,\n    SUM(\n      case\n        when\n          metric = 'gas_fees'\n          and time_interval = 'ALL'\n          then amount\n        else 0\n      end\n    ) as gas_fees_sum,\n    SUM(\n      case\n        when\n          metric = 'gas_fees'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as gas_fees_sum_6_months,\n    SUM(\n      case\n        when\n          metric = 'address_count'\n          and time_interval = 'ALL'\n          then amount\n        else 0\n      end\n    ) as address_count,\n    SUM(\n      case\n        when\n          metric = 'address_count'\n          and time_interval = '90 DAYS'\n          then amount\n        else 0\n      end\n    ) as address_count_90_days,\n    SUM(\n      case\n        when\n          metric = 'new_address_count'\n          and time_interval = '90 DAYS'\n          then amount\n        else 0\n      end\n    ) as new_address_count_90_days,\n    SUM(\n      case\n        when\n          metric = 'returning_address_count'\n          and time_interval = '90 DAYS'\n          then amount\n        else 0\n      end\n    ) as returning_address_count_90_days,\n    SUM(\n      case\n        when\n          metric = 'high_activity_address_count'\n          and time_interval = '90 DAYS'\n          then amount\n        else 0\n      end\n    ) as high_activity_address_count_90_days,\n    SUM(\n      case\n        when\n          metric = 'medium_activity_address_count'\n          and time_interval = '90 DAYS'\n          then amount\n        else 0\n      end\n    ) as medium_activity_address_count_90_days,\n    SUM(\n      case\n        when\n          metric = 'low_activity_address_count'\n          and time_interval = '90 DAYS'\n          then amount\n        else 0\n      end\n    ) as low_activity_address_count_90_days,\n    SUM(\n      case\n        when\n          metric = 'multi_project_address_count'\n          and time_interval = '90 DAYS'\n          then amount\n        else 0\n      end\n    ) as multi_project_address_count_90_days\n  from metrics\n  group by\n    project_id,\n    event_source\n)\n\nselect\n  aggs.* except (project_id),\n  int_projects.project_source,\n  int_projects.project_namespace,\n  int_projects.project_name,\n  int_projects.display_name,\n  int_projects.project_id\nfrom\n  `opensource-observer`.`oso`.`int_projects`\nleft join aggs\n  on int_projects.project_id = aggs.project_id\nwhere aggs.event_source is not null",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_code_metrics_by_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_code_metrics_by_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/metrics/int_code_metrics_by_project.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/metrics/int_code_metrics_by_project.sql",
      unique_id: "model.opensource_observer.int_code_metrics_by_project",
      fqn: [
        "opensource_observer",
        "intermediate",
        "metrics",
        "int_code_metrics_by_project",
      ],
      alias: "int_code_metrics_by_project",
      checksum: {
        name: "sha256",
        checksum:
          "1b6f98a0a700ebbfb552539439b869f7e0c5579ee520577a880058ed21abdd75",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.6030266,
      relation_name:
        "`opensource-observer`.`oso`.`int_code_metrics_by_project`",
      raw_code:
        "{{\n  config(\n    materialized='table'\n  )\n}}\n\nwith metrics as (\n  select * from {{ ref('int_code_metric__active_developers') }}\n  union all\n  select * from {{ ref('int_code_metric__commits_prs_issues') }}\n  union all\n  select * from {{ ref('int_code_metric__contributors') }}\n  union all\n  select *\n  from {{ ref('int_code_metric__fulltime_developers_average') }}\n  union all\n  select * from {{ ref('int_code_metric__new_contributors') }}\n),\n\naggs as (\n  select\n    project_id,\n    event_source,\n    SUM(\n      case\n        when\n          metric = 'commit_code_count'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as commit_count_6_months,\n    SUM(\n      case\n        when\n          metric = 'pull_request_opened_count'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as opened_pull_request_count_6_months,\n    SUM(\n      case\n        when\n          metric = 'pull_request_merged_count'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as merged_pull_request_count_6_months,\n    SUM(\n      case\n        when\n          metric = 'issue_opened_count'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as opened_issue_count_6_months,\n    SUM(\n      case\n        when\n          metric = 'issue_closed_count'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as closed_issue_count_6_months,\n    SUM(\n      case\n        when\n          metric = 'active_developer_count'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as active_developer_count_6_months,\n    SUM(\n      case\n        when\n          metric = 'contributor_count'\n          and time_interval = 'ALL'\n          then amount\n        else 0\n      end\n    ) as contributor_count,\n    SUM(\n      case\n        when\n          metric = 'contributor_count'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as contributor_count_6_months,\n    SUM(\n      case\n        when\n          metric = 'new_contributor_count'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as new_contributor_count_6_months,\n    SUM(\n      case\n        when\n          metric = 'fulltime_developer_average'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as fulltime_developer_average_6_months\n  from metrics\n  group by\n    project_id,\n    event_source\n),\n\nrepos as (\n  select\n    project_id,\n    artifact_source as event_source,\n    MIN(first_commit_time) as first_commit_date,\n    MAX(last_commit_time) as last_commit_date,\n    COUNT(distinct artifact_id) as repository_count,\n    SUM(star_count) as star_count,\n    SUM(fork_count) as fork_count\n  from {{ ref('int_repo_metrics_by_project') }}\n  --WHERE r.is_fork = false\n  group by\n    project_id,\n    artifact_source\n),\n\ncode_metrics as (\n  select\n    repos.*,\n    aggs.* except (project_id, event_source)\n  from repos\n  left join aggs\n    on\n      repos.project_id = aggs.project_id\n      and repos.event_source = aggs.event_source\n),\n\nproject_metadata as (\n  select\n    project_id,\n    project_source,\n    project_namespace,\n    project_name,\n    display_name,\n    'GITHUB' as event_source\n  from {{ ref('int_projects') }}\n\n)\n\nselect\n  project_metadata.project_id,\n  project_metadata.project_source,\n  project_metadata.project_namespace,\n  project_metadata.project_name,\n  project_metadata.display_name,\n  project_metadata.event_source,\n  code_metrics.first_commit_date,\n  code_metrics.last_commit_date,\n  code_metrics.repository_count,\n  code_metrics.star_count,\n  code_metrics.fork_count,\n  code_metrics.contributor_count,\n  code_metrics.contributor_count_6_months,\n  code_metrics.new_contributor_count_6_months,\n  code_metrics.fulltime_developer_average_6_months,\n  code_metrics.active_developer_count_6_months,\n  code_metrics.commit_count_6_months,\n  code_metrics.opened_pull_request_count_6_months,\n  code_metrics.merged_pull_request_count_6_months,\n  code_metrics.opened_issue_count_6_months,\n  code_metrics.closed_issue_count_6_months\nfrom project_metadata\nleft join code_metrics\n  on\n    project_metadata.project_id = code_metrics.project_id\n    and project_metadata.event_source = code_metrics.event_source\nwhere code_metrics.event_source is not null",
      language: "sql",
      refs: [
        {
          name: "int_code_metric__active_developers",
          package: null,
          version: null,
        },
        {
          name: "int_code_metric__commits_prs_issues",
          package: null,
          version: null,
        },
        { name: "int_code_metric__contributors", package: null, version: null },
        {
          name: "int_code_metric__fulltime_developers_average",
          package: null,
          version: null,
        },
        {
          name: "int_code_metric__new_contributors",
          package: null,
          version: null,
        },
        { name: "int_repo_metrics_by_project", package: null, version: null },
        { name: "int_projects", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_code_metric__active_developers",
          "model.opensource_observer.int_code_metric__commits_prs_issues",
          "model.opensource_observer.int_code_metric__contributors",
          "model.opensource_observer.int_code_metric__fulltime_developers_average",
          "model.opensource_observer.int_code_metric__new_contributors",
          "model.opensource_observer.int_repo_metrics_by_project",
          "model.opensource_observer.int_projects",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/metrics/int_code_metrics_by_project.sql",
      compiled: true,
      compiled_code:
        "\n\nwith metrics as (\n  select * from `opensource-observer`.`oso`.`int_code_metric__active_developers`\n  union all\n  select * from `opensource-observer`.`oso`.`int_code_metric__commits_prs_issues`\n  union all\n  select * from `opensource-observer`.`oso`.`int_code_metric__contributors`\n  union all\n  select *\n  from `opensource-observer`.`oso`.`int_code_metric__fulltime_developers_average`\n  union all\n  select * from `opensource-observer`.`oso`.`int_code_metric__new_contributors`\n),\n\naggs as (\n  select\n    project_id,\n    event_source,\n    SUM(\n      case\n        when\n          metric = 'commit_code_count'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as commit_count_6_months,\n    SUM(\n      case\n        when\n          metric = 'pull_request_opened_count'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as opened_pull_request_count_6_months,\n    SUM(\n      case\n        when\n          metric = 'pull_request_merged_count'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as merged_pull_request_count_6_months,\n    SUM(\n      case\n        when\n          metric = 'issue_opened_count'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as opened_issue_count_6_months,\n    SUM(\n      case\n        when\n          metric = 'issue_closed_count'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as closed_issue_count_6_months,\n    SUM(\n      case\n        when\n          metric = 'active_developer_count'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as active_developer_count_6_months,\n    SUM(\n      case\n        when\n          metric = 'contributor_count'\n          and time_interval = 'ALL'\n          then amount\n        else 0\n      end\n    ) as contributor_count,\n    SUM(\n      case\n        when\n          metric = 'contributor_count'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as contributor_count_6_months,\n    SUM(\n      case\n        when\n          metric = 'new_contributor_count'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as new_contributor_count_6_months,\n    SUM(\n      case\n        when\n          metric = 'fulltime_developer_average'\n          and time_interval = '6 MONTHS'\n          then amount\n        else 0\n      end\n    ) as fulltime_developer_average_6_months\n  from metrics\n  group by\n    project_id,\n    event_source\n),\n\nrepos as (\n  select\n    project_id,\n    artifact_source as event_source,\n    MIN(first_commit_time) as first_commit_date,\n    MAX(last_commit_time) as last_commit_date,\n    COUNT(distinct artifact_id) as repository_count,\n    SUM(star_count) as star_count,\n    SUM(fork_count) as fork_count\n  from `opensource-observer`.`oso`.`int_repo_metrics_by_project`\n  --WHERE r.is_fork = false\n  group by\n    project_id,\n    artifact_source\n),\n\ncode_metrics as (\n  select\n    repos.*,\n    aggs.* except (project_id, event_source)\n  from repos\n  left join aggs\n    on\n      repos.project_id = aggs.project_id\n      and repos.event_source = aggs.event_source\n),\n\nproject_metadata as (\n  select\n    project_id,\n    project_source,\n    project_namespace,\n    project_name,\n    display_name,\n    'GITHUB' as event_source\n  from `opensource-observer`.`oso`.`int_projects`\n\n)\n\nselect\n  project_metadata.project_id,\n  project_metadata.project_source,\n  project_metadata.project_namespace,\n  project_metadata.project_name,\n  project_metadata.display_name,\n  project_metadata.event_source,\n  code_metrics.first_commit_date,\n  code_metrics.last_commit_date,\n  code_metrics.repository_count,\n  code_metrics.star_count,\n  code_metrics.fork_count,\n  code_metrics.contributor_count,\n  code_metrics.contributor_count_6_months,\n  code_metrics.new_contributor_count_6_months,\n  code_metrics.fulltime_developer_average_6_months,\n  code_metrics.active_developer_count_6_months,\n  code_metrics.commit_count_6_months,\n  code_metrics.opened_pull_request_count_6_months,\n  code_metrics.merged_pull_request_count_6_months,\n  code_metrics.opened_issue_count_6_months,\n  code_metrics.closed_issue_count_6_months\nfrom project_metadata\nleft join code_metrics\n  on\n    project_metadata.project_id = code_metrics.project_id\n    and project_metadata.event_source = code_metrics.event_source\nwhere code_metrics.event_source is not null",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_code_metric__new_contributors": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_code_metric__new_contributors",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/metrics/code/int_code_metric__new_contributors.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/metrics/code/int_code_metric__new_contributors.sql",
      unique_id: "model.opensource_observer.int_code_metric__new_contributors",
      fqn: [
        "opensource_observer",
        "intermediate",
        "metrics",
        "code",
        "int_code_metric__new_contributors",
      ],
      alias: "int_code_metric__new_contributors",
      checksum: {
        name: "sha256",
        checksum:
          "f86948e5f18b51f4bd4a1cc5f4679f4be2f457fac7ee821e9aea2c2e33bba960",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.6054392,
      relation_name:
        "`opensource-observer`.`oso`.`int_code_metric__new_contributors`",
      raw_code:
        "with user_stats as (\n  select\n    from_artifact_id,\n    event_source,\n    project_id,\n    min(bucket_day) as first_day\n  from {{ ref('int_events_daily_to_project') }}\n  where\n    event_type in (\n      'COMMIT_CODE',\n      'PULL_REQUEST_OPENED',\n      'ISSUE_OPENED'\n    )\n  group by\n    from_artifact_id,\n    event_source,\n    project_id\n)\n\nselect\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'new_contributor_count' as metric,\n  count(\n    distinct\n    case\n      when user_stats.first_day >= time_intervals.start_date\n        then events.from_artifact_id\n    end\n  ) as amount\nfrom {{ ref('int_events_daily_to_project') }} as events\ninner join user_stats\n  on\n    events.from_artifact_id = user_stats.from_artifact_id\n    and events.project_id = user_stats.project_id\n    and events.event_source = user_stats.event_source\ncross join {{ ref('int_time_intervals') }} as time_intervals\nwhere\n  events.event_type in (\n    'COMMIT_CODE',\n    'PULL_REQUEST_OPENED',\n    'ISSUE_OPENED'\n  )\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      language: "sql",
      refs: [
        { name: "int_events_daily_to_project", package: null, version: null },
        { name: "int_events_daily_to_project", package: null, version: null },
        { name: "int_time_intervals", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_events_daily_to_project",
          "model.opensource_observer.int_time_intervals",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/metrics/code/int_code_metric__new_contributors.sql",
      compiled: true,
      compiled_code:
        "with user_stats as (\n  select\n    from_artifact_id,\n    event_source,\n    project_id,\n    min(bucket_day) as first_day\n  from `opensource-observer`.`oso`.`int_events_daily_to_project`\n  where\n    event_type in (\n      'COMMIT_CODE',\n      'PULL_REQUEST_OPENED',\n      'ISSUE_OPENED'\n    )\n  group by\n    from_artifact_id,\n    event_source,\n    project_id\n)\n\nselect\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'new_contributor_count' as metric,\n  count(\n    distinct\n    case\n      when user_stats.first_day >= time_intervals.start_date\n        then events.from_artifact_id\n    end\n  ) as amount\nfrom `opensource-observer`.`oso`.`int_events_daily_to_project` as events\ninner join user_stats\n  on\n    events.from_artifact_id = user_stats.from_artifact_id\n    and events.project_id = user_stats.project_id\n    and events.event_source = user_stats.event_source\ncross join `opensource-observer`.`oso`.`int_time_intervals` as time_intervals\nwhere\n  events.event_type in (\n    'COMMIT_CODE',\n    'PULL_REQUEST_OPENED',\n    'ISSUE_OPENED'\n  )\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_code_metric__commits_prs_issues": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_code_metric__commits_prs_issues",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/metrics/code/int_code_metric__commits_prs_issues.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/metrics/code/int_code_metric__commits_prs_issues.sql",
      unique_id:
        "model.opensource_observer.int_code_metric__commits_prs_issues",
      fqn: [
        "opensource_observer",
        "intermediate",
        "metrics",
        "code",
        "int_code_metric__commits_prs_issues",
      ],
      alias: "int_code_metric__commits_prs_issues",
      checksum: {
        name: "sha256",
        checksum:
          "eb98d6264b8f5d73f64f102a10f8828308551dcea28f6183bffca851b0923390",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.6081328,
      relation_name:
        "`opensource-observer`.`oso`.`int_code_metric__commits_prs_issues`",
      raw_code:
        "select\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  CONCAT(LOWER(events.event_type), '_count') as metric,\n  SUM(events.amount) as amount\nfrom {{ ref('int_events_daily_to_project') }} as events\ncross join {{ ref('int_time_intervals') }} as time_intervals\nwhere\n  events.bucket_day >= time_intervals.start_date\n  and events.event_type in (\n    'COMMIT_CODE',\n    'PULL_REQUEST_OPENED',\n    'PULL_REQUEST_MERGED',\n    'ISSUE_OPENED',\n    'ISSUE_CLOSED'\n  )\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  events.event_type",
      language: "sql",
      refs: [
        { name: "int_events_daily_to_project", package: null, version: null },
        { name: "int_time_intervals", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_events_daily_to_project",
          "model.opensource_observer.int_time_intervals",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/metrics/code/int_code_metric__commits_prs_issues.sql",
      compiled: true,
      compiled_code:
        "select\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  CONCAT(LOWER(events.event_type), '_count') as metric,\n  SUM(events.amount) as amount\nfrom `opensource-observer`.`oso`.`int_events_daily_to_project` as events\ncross join `opensource-observer`.`oso`.`int_time_intervals` as time_intervals\nwhere\n  events.bucket_day >= time_intervals.start_date\n  and events.event_type in (\n    'COMMIT_CODE',\n    'PULL_REQUEST_OPENED',\n    'PULL_REQUEST_MERGED',\n    'ISSUE_OPENED',\n    'ISSUE_CLOSED'\n  )\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  events.event_type",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_code_metric__active_developers": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_code_metric__active_developers",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/metrics/code/int_code_metric__active_developers.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/metrics/code/int_code_metric__active_developers.sql",
      unique_id: "model.opensource_observer.int_code_metric__active_developers",
      fqn: [
        "opensource_observer",
        "intermediate",
        "metrics",
        "code",
        "int_code_metric__active_developers",
      ],
      alias: "int_code_metric__active_developers",
      checksum: {
        name: "sha256",
        checksum:
          "37d659d9bf5e284e478af874fc228a7a5ca5e9be0ebd0f926a434b3aa64673de",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.6104753,
      relation_name:
        "`opensource-observer`.`oso`.`int_code_metric__active_developers`",
      raw_code:
        "select\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'active_developer_count' as metric,\n  COUNT(distinct events.from_artifact_id) as amount\nfrom {{ ref('int_events_daily_to_project') }} as events\ncross join {{ ref('int_time_intervals') }} as time_intervals\nwhere\n  events.event_type = 'COMMIT_CODE'\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      language: "sql",
      refs: [
        { name: "int_events_daily_to_project", package: null, version: null },
        { name: "int_time_intervals", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_events_daily_to_project",
          "model.opensource_observer.int_time_intervals",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/metrics/code/int_code_metric__active_developers.sql",
      compiled: true,
      compiled_code:
        "select\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'active_developer_count' as metric,\n  COUNT(distinct events.from_artifact_id) as amount\nfrom `opensource-observer`.`oso`.`int_events_daily_to_project` as events\ncross join `opensource-observer`.`oso`.`int_time_intervals` as time_intervals\nwhere\n  events.event_type = 'COMMIT_CODE'\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_code_metric__contributors": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_code_metric__contributors",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/metrics/code/int_code_metric__contributors.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/metrics/code/int_code_metric__contributors.sql",
      unique_id: "model.opensource_observer.int_code_metric__contributors",
      fqn: [
        "opensource_observer",
        "intermediate",
        "metrics",
        "code",
        "int_code_metric__contributors",
      ],
      alias: "int_code_metric__contributors",
      checksum: {
        name: "sha256",
        checksum:
          "9443fd194af0c5e8d7adb1d982648e737cee2956abd87d1764b578f09ce1c2bc",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.612663,
      relation_name:
        "`opensource-observer`.`oso`.`int_code_metric__contributors`",
      raw_code:
        "select\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'contributor_count' as metric,\n  COUNT(distinct events.from_artifact_id) as amount\nfrom {{ ref('int_events_daily_to_project') }} as events\ncross join {{ ref('int_time_intervals') }} as time_intervals\nwhere\n  events.event_type in (\n    'COMMIT_CODE',\n    'PULL_REQUEST_OPENED',\n    'ISSUE_OPENED'\n  )\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      language: "sql",
      refs: [
        { name: "int_events_daily_to_project", package: null, version: null },
        { name: "int_time_intervals", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_events_daily_to_project",
          "model.opensource_observer.int_time_intervals",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/metrics/code/int_code_metric__contributors.sql",
      compiled: true,
      compiled_code:
        "select\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'contributor_count' as metric,\n  COUNT(distinct events.from_artifact_id) as amount\nfrom `opensource-observer`.`oso`.`int_events_daily_to_project` as events\ncross join `opensource-observer`.`oso`.`int_time_intervals` as time_intervals\nwhere\n  events.event_type in (\n    'COMMIT_CODE',\n    'PULL_REQUEST_OPENED',\n    'ISSUE_OPENED'\n  )\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_code_metric__fulltime_developers_average": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_code_metric__fulltime_developers_average",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/metrics/code/int_code_metric__fulltime_developers_average.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/metrics/code/int_code_metric__fulltime_developers_average.sql",
      unique_id:
        "model.opensource_observer.int_code_metric__fulltime_developers_average",
      fqn: [
        "opensource_observer",
        "intermediate",
        "metrics",
        "code",
        "int_code_metric__fulltime_developers_average",
      ],
      alias: "int_code_metric__fulltime_developers_average",
      checksum: {
        name: "sha256",
        checksum:
          "b994a62c230d71dc2fa9a00b4623489626b01f08ed6517f74cbef8ddd81bc60f",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.6148095,
      relation_name:
        "`opensource-observer`.`oso`.`int_code_metric__fulltime_developers_average`",
      raw_code:
        "{% set fulltime_dev_days = 10 %}\n\nwith dev_stats as (\n  select\n    events.project_id,\n    events.event_source,\n    time_intervals.time_interval,\n    events.from_artifact_id,\n    TIMESTAMP_TRUNC(events.bucket_day, month) as bucket_month,\n    COUNT(distinct events.bucket_day) as amount\n  from {{ ref('int_events_daily_to_project') }} as events\n  cross join {{ ref('int_time_intervals') }} as time_intervals\n  where\n    events.event_type = 'COMMIT_CODE'\n    and events.bucket_day >= time_intervals.start_date\n  group by\n    events.project_id,\n    events.event_source,\n    time_intervals.time_interval,\n    events.from_artifact_id,\n    TIMESTAMP_TRUNC(events.bucket_day, month)\n)\n\nselect\n  project_id,\n  event_source,\n  time_interval,\n  'fulltime_developer_average' as metric,\n  (\n    COUNT(distinct from_artifact_id)\n    / COUNT(distinct bucket_month)\n  ) as amount\nfrom dev_stats\nwhere amount >= {{ fulltime_dev_days }}\ngroup by\n  project_id,\n  event_source,\n  time_interval",
      language: "sql",
      refs: [
        { name: "int_events_daily_to_project", package: null, version: null },
        { name: "int_time_intervals", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_events_daily_to_project",
          "model.opensource_observer.int_time_intervals",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/metrics/code/int_code_metric__fulltime_developers_average.sql",
      compiled: true,
      compiled_code:
        "\n\nwith dev_stats as (\n  select\n    events.project_id,\n    events.event_source,\n    time_intervals.time_interval,\n    events.from_artifact_id,\n    TIMESTAMP_TRUNC(events.bucket_day, month) as bucket_month,\n    COUNT(distinct events.bucket_day) as amount\n  from `opensource-observer`.`oso`.`int_events_daily_to_project` as events\n  cross join `opensource-observer`.`oso`.`int_time_intervals` as time_intervals\n  where\n    events.event_type = 'COMMIT_CODE'\n    and events.bucket_day >= time_intervals.start_date\n  group by\n    events.project_id,\n    events.event_source,\n    time_intervals.time_interval,\n    events.from_artifact_id,\n    TIMESTAMP_TRUNC(events.bucket_day, month)\n)\n\nselect\n  project_id,\n  event_source,\n  time_interval,\n  'fulltime_developer_average' as metric,\n  (\n    COUNT(distinct from_artifact_id)\n    / COUNT(distinct bucket_month)\n  ) as amount\nfrom dev_stats\nwhere amount >= 10\ngroup by\n  project_id,\n  event_source,\n  time_interval",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_code_metric__bus_factor": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_code_metric__bus_factor",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/metrics/code/int_code_metric__bus_factor.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/metrics/code/int_code_metric__bus_factor.sql",
      unique_id: "model.opensource_observer.int_code_metric__bus_factor",
      fqn: [
        "opensource_observer",
        "intermediate",
        "metrics",
        "code",
        "int_code_metric__bus_factor",
      ],
      alias: "int_code_metric__bus_factor",
      checksum: {
        name: "sha256",
        checksum:
          "b04b7165e2a8c54873a8f175421a93a4b7fea68608b30e7f1626c05e468957f2",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.619298,
      relation_name:
        "`opensource-observer`.`oso`.`int_code_metric__bus_factor`",
      raw_code:
        "with all_contributions as (\n  select\n    project_id,\n    from_artifact_id,\n    event_source,\n    bucket_month,\n    SUM(amount) as amount\n  from {{ ref('int_events_monthly_to_project') }}\n  where event_type = 'COMMIT_CODE'\n  group by\n    project_id,\n    from_artifact_id,\n    event_source,\n    bucket_month\n),\n\ncontributions as (\n  select *\n  from all_contributions\n  where amount < 1000 -- BOT FILTER\n),\n\naggregated_contributions as (\n  select\n    contributions.project_id,\n    contributions.from_artifact_id,\n    contributions.event_source,\n    time_intervals.time_interval,\n    SUM(contributions.amount) as amount\n  from contributions\n  cross join {{ ref('int_time_intervals') }} as time_intervals\n  where\n    contributions.bucket_month\n    >= TIMESTAMP_TRUNC(time_intervals.start_date, month)\n  group by\n    contributions.project_id,\n    contributions.from_artifact_id,\n    contributions.event_source,\n    time_intervals.time_interval\n),\n\nranked_contributions as (\n  select\n    project_id,\n    event_source,\n    time_interval,\n    from_artifact_id,\n    amount,\n    RANK()\n      over (\n        partition by project_id, event_source, time_interval\n        order by amount desc\n      ) as rank,\n    SUM(amount)\n      over (\n        partition by project_id, event_source, time_interval\n      ) as total_project_amount,\n    SUM(amount)\n      over (\n        partition by project_id, event_source, time_interval\n        order by amount desc\n        rows between unbounded preceding and current row\n      ) as cumulative_amount\n  from aggregated_contributions\n)\n\nselect\n  project_id,\n  event_source,\n  time_interval,\n  'bus_factor' as metric,\n  MAX(\n    case\n      when cumulative_amount <= total_project_amount * 0.5\n        then rank\n      else 1\n    end\n  ) as amount\nfrom\n  ranked_contributions\ngroup by\n  project_id,\n  event_source,\n  time_interval",
      language: "sql",
      refs: [
        { name: "int_events_monthly_to_project", package: null, version: null },
        { name: "int_time_intervals", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_events_monthly_to_project",
          "model.opensource_observer.int_time_intervals",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/metrics/code/int_code_metric__bus_factor.sql",
      compiled: true,
      compiled_code:
        "with all_contributions as (\n  select\n    project_id,\n    from_artifact_id,\n    event_source,\n    bucket_month,\n    SUM(amount) as amount\n  from `opensource-observer`.`oso`.`int_events_monthly_to_project`\n  where event_type = 'COMMIT_CODE'\n  group by\n    project_id,\n    from_artifact_id,\n    event_source,\n    bucket_month\n),\n\ncontributions as (\n  select *\n  from all_contributions\n  where amount < 1000 -- BOT FILTER\n),\n\naggregated_contributions as (\n  select\n    contributions.project_id,\n    contributions.from_artifact_id,\n    contributions.event_source,\n    time_intervals.time_interval,\n    SUM(contributions.amount) as amount\n  from contributions\n  cross join `opensource-observer`.`oso`.`int_time_intervals` as time_intervals\n  where\n    contributions.bucket_month\n    >= TIMESTAMP_TRUNC(time_intervals.start_date, month)\n  group by\n    contributions.project_id,\n    contributions.from_artifact_id,\n    contributions.event_source,\n    time_intervals.time_interval\n),\n\nranked_contributions as (\n  select\n    project_id,\n    event_source,\n    time_interval,\n    from_artifact_id,\n    amount,\n    RANK()\n      over (\n        partition by project_id, event_source, time_interval\n        order by amount desc\n      ) as rank,\n    SUM(amount)\n      over (\n        partition by project_id, event_source, time_interval\n      ) as total_project_amount,\n    SUM(amount)\n      over (\n        partition by project_id, event_source, time_interval\n        order by amount desc\n        rows between unbounded preceding and current row\n      ) as cumulative_amount\n  from aggregated_contributions\n)\n\nselect\n  project_id,\n  event_source,\n  time_interval,\n  'bus_factor' as metric,\n  MAX(\n    case\n      when cumulative_amount <= total_project_amount * 0.5\n        then rank\n      else 1\n    end\n  ) as amount\nfrom\n  ranked_contributions\ngroup by\n  project_id,\n  event_source,\n  time_interval",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_onchain_metric__active_contracts": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_onchain_metric__active_contracts",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/metrics/onchain/int_onchain_metric__active_contracts.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__active_contracts.sql",
      unique_id:
        "model.opensource_observer.int_onchain_metric__active_contracts",
      fqn: [
        "opensource_observer",
        "intermediate",
        "metrics",
        "onchain",
        "int_onchain_metric__active_contracts",
      ],
      alias: "int_onchain_metric__active_contracts",
      checksum: {
        name: "sha256",
        checksum:
          "2878f7a1630e127bbc16f33688750d55e091b4c486396809bcf8e8d3b05c7a4f",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.6215374,
      relation_name:
        "`opensource-observer`.`oso`.`int_onchain_metric__active_contracts`",
      raw_code:
        "select\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'active_contract_count' as metric,\n  COUNT(distinct events.to_artifact_id) as amount\nfrom {{ ref('int_events_daily_to_project') }} as events\ncross join {{ ref('int_time_intervals') }} as time_intervals\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_DAILY_COUNT'\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      language: "sql",
      refs: [
        { name: "int_events_daily_to_project", package: null, version: null },
        { name: "int_time_intervals", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_events_daily_to_project",
          "model.opensource_observer.int_time_intervals",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__active_contracts.sql",
      compiled: true,
      compiled_code:
        "select\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'active_contract_count' as metric,\n  COUNT(distinct events.to_artifact_id) as amount\nfrom `opensource-observer`.`oso`.`int_events_daily_to_project` as events\ncross join `opensource-observer`.`oso`.`int_time_intervals` as time_intervals\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_DAILY_COUNT'\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_onchain_metric__trusted_transactions": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_onchain_metric__trusted_transactions",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/metrics/onchain/int_onchain_metric__trusted_transactions.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__trusted_transactions.sql",
      unique_id:
        "model.opensource_observer.int_onchain_metric__trusted_transactions",
      fqn: [
        "opensource_observer",
        "intermediate",
        "metrics",
        "onchain",
        "int_onchain_metric__trusted_transactions",
      ],
      alias: "int_onchain_metric__trusted_transactions",
      checksum: {
        name: "sha256",
        checksum:
          "bc40fad4f6f6ccabb0a858e3e9ab0d8dcd49d5dbaf2cc12c1deacbd74e38cceb",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.6239133,
      relation_name:
        "`opensource-observer`.`oso`.`int_onchain_metric__trusted_transactions`",
      raw_code:
        "select\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'transaction_count' as metric,\n  SUM(events.amount) as amount\nfrom {{ ref('int_events_daily_to_project') }} as events\ncross join {{ ref('int_time_intervals') }} as time_intervals\ninner join {{ ref('int_artifacts_by_user') }} as artifacts_by_user\n  on events.from_artifact_id = artifacts_by_user.artifact_id\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  and events.bucket_day >= time_intervals.start_date\n  and artifacts_by_user.user_id is not null\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      language: "sql",
      refs: [
        { name: "int_events_daily_to_project", package: null, version: null },
        { name: "int_time_intervals", package: null, version: null },
        { name: "int_artifacts_by_user", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_events_daily_to_project",
          "model.opensource_observer.int_time_intervals",
          "model.opensource_observer.int_artifacts_by_user",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__trusted_transactions.sql",
      compiled: true,
      compiled_code:
        "select\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'transaction_count' as metric,\n  SUM(events.amount) as amount\nfrom `opensource-observer`.`oso`.`int_events_daily_to_project` as events\ncross join `opensource-observer`.`oso`.`int_time_intervals` as time_intervals\ninner join `opensource-observer`.`oso`.`int_artifacts_by_user` as artifacts_by_user\n  on events.from_artifact_id = artifacts_by_user.artifact_id\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  and events.bucket_day >= time_intervals.start_date\n  and artifacts_by_user.user_id is not null\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_onchain_metric__multi_project_addresses": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_onchain_metric__multi_project_addresses",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/metrics/onchain/int_onchain_metric__multi_project_addresses.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__multi_project_addresses.sql",
      unique_id:
        "model.opensource_observer.int_onchain_metric__multi_project_addresses",
      fqn: [
        "opensource_observer",
        "intermediate",
        "metrics",
        "onchain",
        "int_onchain_metric__multi_project_addresses",
      ],
      alias: "int_onchain_metric__multi_project_addresses",
      checksum: {
        name: "sha256",
        checksum:
          "71d9a781281b16b8ce824634fcf3bbccac2a601dc2c0217b3a42fe55186f67ca",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.6261578,
      relation_name:
        "`opensource-observer`.`oso`.`int_onchain_metric__multi_project_addresses`",
      raw_code:
        "with user_stats as (\n  select\n    events.from_artifact_id,\n    events.event_source,\n    time_intervals.time_interval,\n    COUNT(distinct events.project_id) as project_count\n  from {{ ref('int_events_daily_to_project') }} as events\n  cross join {{ ref('int_time_intervals') }} as time_intervals\n  where\n    events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and events.bucket_day >= time_intervals.start_date\n  group by\n    events.from_artifact_id,\n    events.event_source,\n    time_intervals.time_interval\n)\n\nselect\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'multi_project_address_count' as metric,\n  COUNT(distinct events.from_artifact_id) as amount\nfrom {{ ref('int_events_daily_to_project') }} as events\ncross join {{ ref('int_time_intervals') }} as time_intervals\nleft join user_stats\n  on\n    events.from_artifact_id = user_stats.from_artifact_id\n    and events.event_source = user_stats.event_source\n    and time_intervals.time_interval = user_stats.time_interval\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  and events.bucket_day >= time_intervals.start_date\n  and user_stats.project_count > 2\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      language: "sql",
      refs: [
        { name: "int_events_daily_to_project", package: null, version: null },
        { name: "int_time_intervals", package: null, version: null },
        { name: "int_events_daily_to_project", package: null, version: null },
        { name: "int_time_intervals", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_events_daily_to_project",
          "model.opensource_observer.int_time_intervals",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__multi_project_addresses.sql",
      compiled: true,
      compiled_code:
        "with user_stats as (\n  select\n    events.from_artifact_id,\n    events.event_source,\n    time_intervals.time_interval,\n    COUNT(distinct events.project_id) as project_count\n  from `opensource-observer`.`oso`.`int_events_daily_to_project` as events\n  cross join `opensource-observer`.`oso`.`int_time_intervals` as time_intervals\n  where\n    events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and events.bucket_day >= time_intervals.start_date\n  group by\n    events.from_artifact_id,\n    events.event_source,\n    time_intervals.time_interval\n)\n\nselect\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'multi_project_address_count' as metric,\n  COUNT(distinct events.from_artifact_id) as amount\nfrom `opensource-observer`.`oso`.`int_events_daily_to_project` as events\ncross join `opensource-observer`.`oso`.`int_time_intervals` as time_intervals\nleft join user_stats\n  on\n    events.from_artifact_id = user_stats.from_artifact_id\n    and events.event_source = user_stats.event_source\n    and time_intervals.time_interval = user_stats.time_interval\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  and events.bucket_day >= time_intervals.start_date\n  and user_stats.project_count > 2\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_onchain_metric__high_low_activity_addresses":
      {
        database: "opensource-observer",
        schema: "oso",
        name: "int_onchain_metric__high_low_activity_addresses",
        resource_type: "model",
        package_name: "opensource_observer",
        path: "intermediate/metrics/onchain/int_onchain_metric__high_low_activity_addresses.sql",
        original_file_path:
          "warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__high_low_activity_addresses.sql",
        unique_id:
          "model.opensource_observer.int_onchain_metric__high_low_activity_addresses",
        fqn: [
          "opensource_observer",
          "intermediate",
          "metrics",
          "onchain",
          "int_onchain_metric__high_low_activity_addresses",
        ],
        alias: "int_onchain_metric__high_low_activity_addresses",
        checksum: {
          name: "sha256",
          checksum:
            "0318949c726a066d8f6ee742451c85a2b113e76156949660b902800125f34f9c",
        },
        config: {
          enabled: true,
          alias: null,
          schema: null,
          database: null,
          tags: [],
          meta: {},
          group: null,
          materialized: "table",
          incremental_strategy: null,
          persist_docs: {},
          "post-hook": [],
          "pre-hook": [],
          quoting: {},
          column_types: {},
          full_refresh: null,
          unique_key: null,
          on_schema_change: "ignore",
          on_configuration_change: "apply",
          grants: {},
          packages: [],
          docs: { show: true, node_color: null },
          contract: { enforced: false, alias_types: true },
          access: "protected",
        },
        tags: [],
        description: "",
        columns: {},
        meta: {},
        group: null,
        docs: { show: true, node_color: null },
        patch_path: null,
        build_path: null,
        unrendered_config: { materialized: "table" },
        created_at: 1719978675.6285415,
        relation_name:
          "`opensource-observer`.`oso`.`int_onchain_metric__high_low_activity_addresses`",
        raw_code:
          "{% set high_activity_thresh = 100 %}\n{% set med_activity_thresh = 10 %}\n{% set low_activity_thresh = 1 %}\n\nwith user_txn_totals as (\n  select\n    events.from_artifact_id,\n    events.event_source,\n    events.project_id,\n    time_intervals.time_interval,\n    SUM(events.amount) as amount\n  from {{ ref('int_events_daily_to_project') }} as events\n  cross join {{ ref('int_time_intervals') }} as time_intervals\n  where\n    events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and events.bucket_day >= time_intervals.start_date\n  group by\n    events.from_artifact_id,\n    events.event_source,\n    events.project_id,\n    time_intervals.time_interval\n),\n\nhigh_activity as (\n  select\n    project_id,\n    event_source,\n    time_interval,\n    'high_activity_address_count' as metric,\n    COUNT(distinct from_artifact_id) as amount\n  from user_txn_totals\n  where amount >= {{ high_activity_thresh }}\n  group by\n    project_id,\n    event_source,\n    time_interval\n),\n\nlow_activity as (\n  select\n    project_id,\n    event_source,\n    time_interval,\n    'low_activity_address_count' as metric,\n    COUNT(distinct from_artifact_id) as amount\n  from user_txn_totals\n  where\n    amount < {{ med_activity_thresh }}\n    and amount >= {{ low_activity_thresh }}\n  group by\n    project_id,\n    event_source,\n    time_interval\n),\n\nmedium_activity as (\n  select\n    project_id,\n    event_source,\n    time_interval,\n    'medium_activity_address_count' as metric,\n    COUNT(distinct from_artifact_id) as amount\n  from user_txn_totals\n  where\n    amount < {{ high_activity_thresh }}\n    and amount >= {{ med_activity_thresh }}\n  group by\n    project_id,\n    event_source,\n    time_interval\n)\n\nselect * from high_activity\nunion all\nselect * from low_activity\nunion all\nselect * from medium_activity",
        language: "sql",
        refs: [
          { name: "int_events_daily_to_project", package: null, version: null },
          { name: "int_time_intervals", package: null, version: null },
        ],
        sources: [],
        metrics: [],
        depends_on: {
          macros: [],
          nodes: [
            "model.opensource_observer.int_events_daily_to_project",
            "model.opensource_observer.int_time_intervals",
          ],
        },
        compiled_path:
          "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__high_low_activity_addresses.sql",
        compiled: true,
        compiled_code:
          "\n\n\n\nwith user_txn_totals as (\n  select\n    events.from_artifact_id,\n    events.event_source,\n    events.project_id,\n    time_intervals.time_interval,\n    SUM(events.amount) as amount\n  from `opensource-observer`.`oso`.`int_events_daily_to_project` as events\n  cross join `opensource-observer`.`oso`.`int_time_intervals` as time_intervals\n  where\n    events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n    and events.bucket_day >= time_intervals.start_date\n  group by\n    events.from_artifact_id,\n    events.event_source,\n    events.project_id,\n    time_intervals.time_interval\n),\n\nhigh_activity as (\n  select\n    project_id,\n    event_source,\n    time_interval,\n    'high_activity_address_count' as metric,\n    COUNT(distinct from_artifact_id) as amount\n  from user_txn_totals\n  where amount >= 100\n  group by\n    project_id,\n    event_source,\n    time_interval\n),\n\nlow_activity as (\n  select\n    project_id,\n    event_source,\n    time_interval,\n    'low_activity_address_count' as metric,\n    COUNT(distinct from_artifact_id) as amount\n  from user_txn_totals\n  where\n    amount < 10\n    and amount >= 1\n  group by\n    project_id,\n    event_source,\n    time_interval\n),\n\nmedium_activity as (\n  select\n    project_id,\n    event_source,\n    time_interval,\n    'medium_activity_address_count' as metric,\n    COUNT(distinct from_artifact_id) as amount\n  from user_txn_totals\n  where\n    amount < 100\n    and amount >= 10\n  group by\n    project_id,\n    event_source,\n    time_interval\n)\n\nselect * from high_activity\nunion all\nselect * from low_activity\nunion all\nselect * from medium_activity",
        extra_ctes_injected: true,
        extra_ctes: [],
        contract: { enforced: false, alias_types: true, checksum: null },
        access: "protected",
        constraints: [],
        version: null,
        latest_version: null,
        deprecation_date: null,
      },
    "model.opensource_observer.int_onchain_metric__returning_addresses": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_onchain_metric__returning_addresses",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/metrics/onchain/int_onchain_metric__returning_addresses.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__returning_addresses.sql",
      unique_id:
        "model.opensource_observer.int_onchain_metric__returning_addresses",
      fqn: [
        "opensource_observer",
        "intermediate",
        "metrics",
        "onchain",
        "int_onchain_metric__returning_addresses",
      ],
      alias: "int_onchain_metric__returning_addresses",
      checksum: {
        name: "sha256",
        checksum:
          "5a98e3115b9a4588cb8f2e280fa49a1bc49af71811fc8b67b16aecaa6ac03b3e",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.6338902,
      relation_name:
        "`opensource-observer`.`oso`.`int_onchain_metric__returning_addresses`",
      raw_code:
        "with user_stats as (\n  select\n    from_artifact_id,\n    event_source,\n    project_id,\n    min(bucket_day) as first_day\n  from {{ ref('int_events_daily_to_project') }}\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  group by\n    from_artifact_id,\n    event_source,\n    project_id\n)\n\nselect\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'returning_address_count' as metric,\n  count(\n    distinct\n    case\n      when user_stats.first_day < time_intervals.start_date\n        then events.from_artifact_id\n    end\n  ) as amount\nfrom {{ ref('int_events_daily_to_project') }} as events\ninner join user_stats\n  on\n    events.from_artifact_id = user_stats.from_artifact_id\n    and events.event_source = user_stats.event_source\n    and events.project_id = user_stats.project_id\ncross join {{ ref('int_time_intervals') }} as time_intervals\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      language: "sql",
      refs: [
        { name: "int_events_daily_to_project", package: null, version: null },
        { name: "int_events_daily_to_project", package: null, version: null },
        { name: "int_time_intervals", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_events_daily_to_project",
          "model.opensource_observer.int_time_intervals",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__returning_addresses.sql",
      compiled: true,
      compiled_code:
        "with user_stats as (\n  select\n    from_artifact_id,\n    event_source,\n    project_id,\n    min(bucket_day) as first_day\n  from `opensource-observer`.`oso`.`int_events_daily_to_project`\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  group by\n    from_artifact_id,\n    event_source,\n    project_id\n)\n\nselect\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'returning_address_count' as metric,\n  count(\n    distinct\n    case\n      when user_stats.first_day < time_intervals.start_date\n        then events.from_artifact_id\n    end\n  ) as amount\nfrom `opensource-observer`.`oso`.`int_events_daily_to_project` as events\ninner join user_stats\n  on\n    events.from_artifact_id = user_stats.from_artifact_id\n    and events.event_source = user_stats.event_source\n    and events.project_id = user_stats.project_id\ncross join `opensource-observer`.`oso`.`int_time_intervals` as time_intervals\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_onchain_metric__days_since_first_transaction":
      {
        database: "opensource-observer",
        schema: "oso",
        name: "int_onchain_metric__days_since_first_transaction",
        resource_type: "model",
        package_name: "opensource_observer",
        path: "intermediate/metrics/onchain/int_onchain_metric__days_since_first_transaction.sql",
        original_file_path:
          "warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__days_since_first_transaction.sql",
        unique_id:
          "model.opensource_observer.int_onchain_metric__days_since_first_transaction",
        fqn: [
          "opensource_observer",
          "intermediate",
          "metrics",
          "onchain",
          "int_onchain_metric__days_since_first_transaction",
        ],
        alias: "int_onchain_metric__days_since_first_transaction",
        checksum: {
          name: "sha256",
          checksum:
            "56ab54ce4cceeaaea7e5802be66585617cfc5bf425aa807d8a0acd964f0f968e",
        },
        config: {
          enabled: true,
          alias: null,
          schema: null,
          database: null,
          tags: [],
          meta: {},
          group: null,
          materialized: "table",
          incremental_strategy: null,
          persist_docs: {},
          "post-hook": [],
          "pre-hook": [],
          quoting: {},
          column_types: {},
          full_refresh: null,
          unique_key: null,
          on_schema_change: "ignore",
          on_configuration_change: "apply",
          grants: {},
          packages: [],
          docs: { show: true, node_color: null },
          contract: { enforced: false, alias_types: true },
          access: "protected",
        },
        tags: [],
        description: "",
        columns: {},
        meta: {},
        group: null,
        docs: { show: true, node_color: null },
        patch_path: null,
        build_path: null,
        unrendered_config: { materialized: "table" },
        created_at: 1719978675.636214,
        relation_name:
          "`opensource-observer`.`oso`.`int_onchain_metric__days_since_first_transaction`",
        raw_code:
          "select\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'days_since_first_transaction' as metric,\n  MAX(\n    DATE_DIFF(\n      CURRENT_DATE(),\n      DATE(events.bucket_day),\n      day\n    )\n  ) as amount\nfrom {{ ref('int_events_daily_to_project') }} as events\ncross join {{ ref('int_time_intervals') }} as time_intervals\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_DAILY_COUNT'\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
        language: "sql",
        refs: [
          { name: "int_events_daily_to_project", package: null, version: null },
          { name: "int_time_intervals", package: null, version: null },
        ],
        sources: [],
        metrics: [],
        depends_on: {
          macros: [],
          nodes: [
            "model.opensource_observer.int_events_daily_to_project",
            "model.opensource_observer.int_time_intervals",
          ],
        },
        compiled_path:
          "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__days_since_first_transaction.sql",
        compiled: true,
        compiled_code:
          "select\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'days_since_first_transaction' as metric,\n  MAX(\n    DATE_DIFF(\n      CURRENT_DATE(),\n      DATE(events.bucket_day),\n      day\n    )\n  ) as amount\nfrom `opensource-observer`.`oso`.`int_events_daily_to_project` as events\ncross join `opensource-observer`.`oso`.`int_time_intervals` as time_intervals\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_DAILY_COUNT'\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
        extra_ctes_injected: true,
        extra_ctes: [],
        contract: { enforced: false, alias_types: true, checksum: null },
        access: "protected",
        constraints: [],
        version: null,
        latest_version: null,
        deprecation_date: null,
      },
    "model.opensource_observer.int_onchain_metric__transactions": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_onchain_metric__transactions",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/metrics/onchain/int_onchain_metric__transactions.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__transactions.sql",
      unique_id: "model.opensource_observer.int_onchain_metric__transactions",
      fqn: [
        "opensource_observer",
        "intermediate",
        "metrics",
        "onchain",
        "int_onchain_metric__transactions",
      ],
      alias: "int_onchain_metric__transactions",
      checksum: {
        name: "sha256",
        checksum:
          "53cf45910234f4569f7fefd3fad6b1d153c132121d37864ccc1118bbbf04c2cb",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.638625,
      relation_name:
        "`opensource-observer`.`oso`.`int_onchain_metric__transactions`",
      raw_code:
        "select\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'transaction_count' as metric,\n  SUM(events.amount) as amount\nfrom {{ ref('int_events_daily_to_project') }} as events\ncross join {{ ref('int_time_intervals') }} as time_intervals\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      language: "sql",
      refs: [
        { name: "int_events_daily_to_project", package: null, version: null },
        { name: "int_time_intervals", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_events_daily_to_project",
          "model.opensource_observer.int_time_intervals",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__transactions.sql",
      compiled: true,
      compiled_code:
        "select\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'transaction_count' as metric,\n  SUM(events.amount) as amount\nfrom `opensource-observer`.`oso`.`int_events_daily_to_project` as events\ncross join `opensource-observer`.`oso`.`int_time_intervals` as time_intervals\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_onchain_metric__active_addresses": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_onchain_metric__active_addresses",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/metrics/onchain/int_onchain_metric__active_addresses.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__active_addresses.sql",
      unique_id:
        "model.opensource_observer.int_onchain_metric__active_addresses",
      fqn: [
        "opensource_observer",
        "intermediate",
        "metrics",
        "onchain",
        "int_onchain_metric__active_addresses",
      ],
      alias: "int_onchain_metric__active_addresses",
      checksum: {
        name: "sha256",
        checksum:
          "f2a9a883ba718468d8a553cde548e25d7f6511f4b47e22bb45e52bfc17d7f159",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.6409175,
      relation_name:
        "`opensource-observer`.`oso`.`int_onchain_metric__active_addresses`",
      raw_code:
        "select\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'address_count' as metric,\n  COUNT(distinct events.from_artifact_id) as amount\nfrom {{ ref('int_events_daily_to_project') }} as events\ncross join {{ ref('int_time_intervals') }} as time_intervals\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      language: "sql",
      refs: [
        { name: "int_events_daily_to_project", package: null, version: null },
        { name: "int_time_intervals", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_events_daily_to_project",
          "model.opensource_observer.int_time_intervals",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__active_addresses.sql",
      compiled: true,
      compiled_code:
        "select\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'address_count' as metric,\n  COUNT(distinct events.from_artifact_id) as amount\nfrom `opensource-observer`.`oso`.`int_events_daily_to_project` as events\ncross join `opensource-observer`.`oso`.`int_time_intervals` as time_intervals\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_onchain_metric__new_addresses": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_onchain_metric__new_addresses",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/metrics/onchain/int_onchain_metric__new_addresses.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__new_addresses.sql",
      unique_id: "model.opensource_observer.int_onchain_metric__new_addresses",
      fqn: [
        "opensource_observer",
        "intermediate",
        "metrics",
        "onchain",
        "int_onchain_metric__new_addresses",
      ],
      alias: "int_onchain_metric__new_addresses",
      checksum: {
        name: "sha256",
        checksum:
          "416ac53f57bf3002757f26e5d11d4da07fc0ef71a05fba4ceb18cdf0a654a333",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.6432266,
      relation_name:
        "`opensource-observer`.`oso`.`int_onchain_metric__new_addresses`",
      raw_code:
        "with user_stats as (\n  select\n    from_artifact_id,\n    event_source,\n    project_id,\n    min(bucket_day) as first_day\n  from {{ ref('int_events_daily_to_project') }}\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  group by\n    from_artifact_id,\n    event_source,\n    project_id\n)\n\nselect\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'new_address_count' as metric,\n  count(\n    distinct\n    case\n      when user_stats.first_day >= time_intervals.start_date\n        then events.from_artifact_id\n    end\n  ) as amount\nfrom {{ ref('int_events_daily_to_project') }} as events\ninner join user_stats\n  on\n    events.from_artifact_id = user_stats.from_artifact_id\n    and events.event_source = user_stats.event_source\n    and events.project_id = user_stats.project_id\ncross join {{ ref('int_time_intervals') }} as time_intervals\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      language: "sql",
      refs: [
        { name: "int_events_daily_to_project", package: null, version: null },
        { name: "int_events_daily_to_project", package: null, version: null },
        { name: "int_time_intervals", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_events_daily_to_project",
          "model.opensource_observer.int_time_intervals",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__new_addresses.sql",
      compiled: true,
      compiled_code:
        "with user_stats as (\n  select\n    from_artifact_id,\n    event_source,\n    project_id,\n    min(bucket_day) as first_day\n  from `opensource-observer`.`oso`.`int_events_daily_to_project`\n  where\n    event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  group by\n    from_artifact_id,\n    event_source,\n    project_id\n)\n\nselect\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'new_address_count' as metric,\n  count(\n    distinct\n    case\n      when user_stats.first_day >= time_intervals.start_date\n        then events.from_artifact_id\n    end\n  ) as amount\nfrom `opensource-observer`.`oso`.`int_events_daily_to_project` as events\ninner join user_stats\n  on\n    events.from_artifact_id = user_stats.from_artifact_id\n    and events.event_source = user_stats.event_source\n    and events.project_id = user_stats.project_id\ncross join `opensource-observer`.`oso`.`int_time_intervals` as time_intervals\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT'\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_onchain_metric__gas_fees": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_onchain_metric__gas_fees",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/metrics/onchain/int_onchain_metric__gas_fees.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__gas_fees.sql",
      unique_id: "model.opensource_observer.int_onchain_metric__gas_fees",
      fqn: [
        "opensource_observer",
        "intermediate",
        "metrics",
        "onchain",
        "int_onchain_metric__gas_fees",
      ],
      alias: "int_onchain_metric__gas_fees",
      checksum: {
        name: "sha256",
        checksum:
          "27ce6c5366ddf9971df74837cfe2b2bd921632dda2641af7a44280ad888c8389",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.6455178,
      relation_name:
        "`opensource-observer`.`oso`.`int_onchain_metric__gas_fees`",
      raw_code:
        "select\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'gas_fees' as metric,\n  SUM(events.amount / 1e18) as amount\nfrom {{ ref('int_events_daily_to_project') }} as events\ncross join {{ ref('int_time_intervals') }} as time_intervals\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_DAILY_L2_GAS_USED'\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      language: "sql",
      refs: [
        { name: "int_events_daily_to_project", package: null, version: null },
        { name: "int_time_intervals", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_events_daily_to_project",
          "model.opensource_observer.int_time_intervals",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/metrics/onchain/int_onchain_metric__gas_fees.sql",
      compiled: true,
      compiled_code:
        "select\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval,\n  'gas_fees' as metric,\n  SUM(events.amount / 1e18) as amount\nfrom `opensource-observer`.`oso`.`int_events_daily_to_project` as events\ncross join `opensource-observer`.`oso`.`int_time_intervals` as time_intervals\nwhere\n  events.event_type = 'CONTRACT_INVOCATION_DAILY_L2_GAS_USED'\n  and events.bucket_day >= time_intervals.start_date\ngroup by\n  events.project_id,\n  events.event_source,\n  time_intervals.time_interval",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_zora_contract_invocation_events": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_zora_contract_invocation_events",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_zora_contract_invocation_events.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_zora_contract_invocation_events.sql",
      unique_id:
        "model.opensource_observer.int_zora_contract_invocation_events",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_zora_contract_invocation_events",
      ],
      alias: "int_zora_contract_invocation_events",
      checksum: {
        name: "sha256",
        checksum:
          "ef95233d151fefcf33cddd3c6fa2a185f2bd3c6c268b9d1f1f35d9fa696a1a2a",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "time",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "time",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.6477492,
      relation_name:
        "`opensource-observer`.`oso`.`int_zora_contract_invocation_events`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "time",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{% if is_incremental() %}\n  {% set start = "TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)" %}\n{% else %}\n  {% set start = "\'1970-01-01\'" %}\n{% endif %}\n{{ contract_invocation_events_with_l1("zora", start) }}',
      language: "sql",
      refs: [
        {
          name: "int_artifacts_in_ossd_by_project",
          package: null,
          version: null,
        },
        { name: "int_zora_transactions", package: null, version: null },
        { name: "int_safes", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [
          "macro.dbt.is_incremental",
          "macro.opensource_observer.contract_invocation_events_with_l1",
        ],
        nodes: [
          "model.opensource_observer.int_artifacts_in_ossd_by_project",
          "model.opensource_observer.int_zora_transactions",
          "model.opensource_observer.int_safes",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_zora_contract_invocation_events.sql",
      compiled: true,
      compiled_code:
        "\n\n  \n\n\n\n\n\nwith bridges as (\n  select distinct artifact_source_id\n  from `opensource-observer`.`oso`.`int_artifacts_in_ossd_by_project`\n  where artifact_type = 'BRIDGE'\n),\n\ntransactions as (\n  select -- noqa: ST06\n    TIMESTAMP_TRUNC(block_timestamp, day) as `time`,\n    LOWER(to_address) as to_artifact_source_id,    \n    LOWER(from_address) as from_artifact_source_id,\n    receipt_status,\n    (receipt_gas_used * receipt_effective_gas_price) as l2_gas_fee\n  from `opensource-observer`.`oso`.`int_zora_transactions`\n  where\n    block_timestamp >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    and (\n      input != \"0x\"\n      or LOWER(to_address) in (select * from bridges)\n    )\n),\n\ncontract_invocations as (\n  select\n    time,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    SUM(l2_gas_fee) as total_l2_gas_used,\n    COUNT(*) as total_count,\n    SUM(case when receipt_status = 1 then 1 else 0 end) as success_count\n  from transactions\n  where to_artifact_source_id not in (\n    select address\n    from `opensource-observer`.`oso`.`int_safes`\n    where network = 'ZORA'\n  )\n  group by\n    time,\n    to_artifact_source_id,\n    from_artifact_source_id\n),\n\nunion_events as (\n  select \n    time,    \n    'CONTRACT_INVOCATION_DAILY_L2_GAS_USED' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    total_l2_gas_used as amount\n  from contract_invocations\n  union all\n  select \n    time,\n    'CONTRACT_INVOCATION_DAILY_COUNT' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    total_count as amount\n  from contract_invocations\n  union all\n  select \n    time,\n    'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    success_count as amount\n  from contract_invocations\n),\n\nall_events as (\n  select\n    time,\n    event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    amount,\n    \"ZORA\" as event_source,\n  from union_events\n)\nselect\n  time,\n  event_type,  \n  event_source,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, to_artifact_source_id))), '+', '-'), '/', '_')\n    as to_artifact_id,\n  to_artifact_source_id as to_artifact_name,\n  \"zora\" as to_artifact_namespace,\n  \"CONTRACT\" as to_artifact_type,\n  to_artifact_source_id,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, from_artifact_source_id))), '+', '-'), '/', '_')\n    as from_artifact_id,\n  from_artifact_source_id as from_artifact_name,\n  \"zora\" as from_artifact_namespace,\n  \"EOA\" as from_artifact_type,\n  from_artifact_source_id,\n  amount,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, time, to_artifact_source_id, from_artifact_source_id))), '+', '-'), '/', '_') as event_source_id\nfrom all_events\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_pgn_traces": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_pgn_traces",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_pgn_traces.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_pgn_traces.sql",
      unique_id: "model.opensource_observer.int_pgn_traces",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_pgn_traces",
      ],
      alias: "int_pgn_traces",
      checksum: {
        name: "sha256",
        checksum:
          "a555e109ae0e1a7c0354d832771deefae1649009d57b5e8111af41682b6e45ab",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.6601236,
      relation_name: "`opensource-observer`.`oso`.`int_pgn_traces`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  ) \n}}\n{{ filtered_blockchain_events("PGN", "pgn", "traces") }}',
      language: "sql",
      refs: [{ name: "int_all_artifacts", package: null, version: null }],
      sources: [
        ["pgn", "traces"],
        ["pgn", "traces"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.filtered_blockchain_events"],
        nodes: [
          "source.opensource_observer.pgn.traces",
          "model.opensource_observer.int_all_artifacts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_pgn_traces.sql",
      compiled: true,
      compiled_code:
        "\n\nwith known_addresses as (\n  select distinct `artifact_source_id` as `address`\n  from `opensource-observer`.`oso`.`int_all_artifacts` \n  where UPPER(artifact_source) in (UPPER('PGN'), 'ANY_EVM')\n), known_to as (\nselect events.* \nfrom `opensource-observer`.`superchain`.`pgn_traces` as events\ninner join known_addresses known\n  on known.address = events.to_address\n  \n    \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), known_from as (\n  select events.* \n  from `opensource-observer`.`superchain`.`pgn_traces` as events\n  inner join known_addresses known\n    on known.address = events.from_address\n  \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), txs_with_dupes as (\n  select * from known_to\n  union all\n  select * from known_from\n)\nselect\n  *\nfrom txs_with_dupes\nqualify\n  ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY block_timestamp ASC) = 1\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_optimism_contract_invocation_events": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_optimism_contract_invocation_events",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_optimism_contract_invocation_events.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_optimism_contract_invocation_events.sql",
      unique_id:
        "model.opensource_observer.int_optimism_contract_invocation_events",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_optimism_contract_invocation_events",
      ],
      alias: "int_optimism_contract_invocation_events",
      checksum: {
        name: "sha256",
        checksum:
          "134d9540ad52fad00648798bf0eb186bbdebfaba5b3c2a9fd71f126a8a77d133",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "time",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "time",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.6704528,
      relation_name:
        "`opensource-observer`.`oso`.`int_optimism_contract_invocation_events`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "time",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{% if is_incremental() %}\n  {% set start = "TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)" %}\n{% else %}\n  {% set start = "\'1970-01-01\'" %}\n{% endif %}\n{{ contract_invocation_events_with_l1("optimism", start) }}',
      language: "sql",
      refs: [
        {
          name: "int_artifacts_in_ossd_by_project",
          package: null,
          version: null,
        },
        { name: "int_optimism_transactions", package: null, version: null },
        { name: "int_safes", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [
          "macro.dbt.is_incremental",
          "macro.opensource_observer.contract_invocation_events_with_l1",
        ],
        nodes: [
          "model.opensource_observer.int_artifacts_in_ossd_by_project",
          "model.opensource_observer.int_optimism_transactions",
          "model.opensource_observer.int_safes",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_optimism_contract_invocation_events.sql",
      compiled: true,
      compiled_code:
        "\n\n  \n\n\n\n\n\nwith bridges as (\n  select distinct artifact_source_id\n  from `opensource-observer`.`oso`.`int_artifacts_in_ossd_by_project`\n  where artifact_type = 'BRIDGE'\n),\n\ntransactions as (\n  select -- noqa: ST06\n    TIMESTAMP_TRUNC(block_timestamp, day) as `time`,\n    LOWER(to_address) as to_artifact_source_id,    \n    LOWER(from_address) as from_artifact_source_id,\n    receipt_status,\n    (receipt_gas_used * receipt_effective_gas_price) as l2_gas_fee\n  from `opensource-observer`.`oso`.`int_optimism_transactions`\n  where\n    block_timestamp >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    and (\n      input != \"0x\"\n      or LOWER(to_address) in (select * from bridges)\n    )\n),\n\ncontract_invocations as (\n  select\n    time,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    SUM(l2_gas_fee) as total_l2_gas_used,\n    COUNT(*) as total_count,\n    SUM(case when receipt_status = 1 then 1 else 0 end) as success_count\n  from transactions\n  where to_artifact_source_id not in (\n    select address\n    from `opensource-observer`.`oso`.`int_safes`\n    where network = 'OPTIMISM'\n  )\n  group by\n    time,\n    to_artifact_source_id,\n    from_artifact_source_id\n),\n\nunion_events as (\n  select \n    time,    \n    'CONTRACT_INVOCATION_DAILY_L2_GAS_USED' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    total_l2_gas_used as amount\n  from contract_invocations\n  union all\n  select \n    time,\n    'CONTRACT_INVOCATION_DAILY_COUNT' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    total_count as amount\n  from contract_invocations\n  union all\n  select \n    time,\n    'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    success_count as amount\n  from contract_invocations\n),\n\nall_events as (\n  select\n    time,\n    event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    amount,\n    \"OPTIMISM\" as event_source,\n  from union_events\n)\nselect\n  time,\n  event_type,  \n  event_source,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, to_artifact_source_id))), '+', '-'), '/', '_')\n    as to_artifact_id,\n  to_artifact_source_id as to_artifact_name,\n  \"optimism\" as to_artifact_namespace,\n  \"CONTRACT\" as to_artifact_type,\n  to_artifact_source_id,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, from_artifact_source_id))), '+', '-'), '/', '_')\n    as from_artifact_id,\n  from_artifact_source_id as from_artifact_name,\n  \"optimism\" as from_artifact_namespace,\n  \"EOA\" as from_artifact_type,\n  from_artifact_source_id,\n  amount,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, time, to_artifact_source_id, from_artifact_source_id))), '+', '-'), '/', '_') as event_source_id\nfrom all_events\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_mode_contract_invocation_events": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_mode_contract_invocation_events",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_mode_contract_invocation_events.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_mode_contract_invocation_events.sql",
      unique_id:
        "model.opensource_observer.int_mode_contract_invocation_events",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_mode_contract_invocation_events",
      ],
      alias: "int_mode_contract_invocation_events",
      checksum: {
        name: "sha256",
        checksum:
          "dd415fc2296d0e0a4b950faadcbf707c4f11b6b479bec27ecc7edf675aec86f8",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "time",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "time",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.676255,
      relation_name:
        "`opensource-observer`.`oso`.`int_mode_contract_invocation_events`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "time",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{% if is_incremental() %}\n  {% set start = "TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)" %}\n{% else %}\n  {% set start = "\'1970-01-01\'" %}\n{% endif %}\n{{ contract_invocation_events_with_l1("mode", start) }}',
      language: "sql",
      refs: [
        {
          name: "int_artifacts_in_ossd_by_project",
          package: null,
          version: null,
        },
        { name: "int_mode_transactions", package: null, version: null },
        { name: "int_safes", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [
          "macro.dbt.is_incremental",
          "macro.opensource_observer.contract_invocation_events_with_l1",
        ],
        nodes: [
          "model.opensource_observer.int_artifacts_in_ossd_by_project",
          "model.opensource_observer.int_mode_transactions",
          "model.opensource_observer.int_safes",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_mode_contract_invocation_events.sql",
      compiled: true,
      compiled_code:
        "\n\n  \n\n\n\n\n\nwith bridges as (\n  select distinct artifact_source_id\n  from `opensource-observer`.`oso`.`int_artifacts_in_ossd_by_project`\n  where artifact_type = 'BRIDGE'\n),\n\ntransactions as (\n  select -- noqa: ST06\n    TIMESTAMP_TRUNC(block_timestamp, day) as `time`,\n    LOWER(to_address) as to_artifact_source_id,    \n    LOWER(from_address) as from_artifact_source_id,\n    receipt_status,\n    (receipt_gas_used * receipt_effective_gas_price) as l2_gas_fee\n  from `opensource-observer`.`oso`.`int_mode_transactions`\n  where\n    block_timestamp >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    and (\n      input != \"0x\"\n      or LOWER(to_address) in (select * from bridges)\n    )\n),\n\ncontract_invocations as (\n  select\n    time,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    SUM(l2_gas_fee) as total_l2_gas_used,\n    COUNT(*) as total_count,\n    SUM(case when receipt_status = 1 then 1 else 0 end) as success_count\n  from transactions\n  where to_artifact_source_id not in (\n    select address\n    from `opensource-observer`.`oso`.`int_safes`\n    where network = 'MODE'\n  )\n  group by\n    time,\n    to_artifact_source_id,\n    from_artifact_source_id\n),\n\nunion_events as (\n  select \n    time,    \n    'CONTRACT_INVOCATION_DAILY_L2_GAS_USED' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    total_l2_gas_used as amount\n  from contract_invocations\n  union all\n  select \n    time,\n    'CONTRACT_INVOCATION_DAILY_COUNT' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    total_count as amount\n  from contract_invocations\n  union all\n  select \n    time,\n    'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    success_count as amount\n  from contract_invocations\n),\n\nall_events as (\n  select\n    time,\n    event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    amount,\n    \"MODE\" as event_source,\n  from union_events\n)\nselect\n  time,\n  event_type,  \n  event_source,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, to_artifact_source_id))), '+', '-'), '/', '_')\n    as to_artifact_id,\n  to_artifact_source_id as to_artifact_name,\n  \"mode\" as to_artifact_namespace,\n  \"CONTRACT\" as to_artifact_type,\n  to_artifact_source_id,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, from_artifact_source_id))), '+', '-'), '/', '_')\n    as from_artifact_id,\n  from_artifact_source_id as from_artifact_name,\n  \"mode\" as from_artifact_namespace,\n  \"EOA\" as from_artifact_type,\n  from_artifact_source_id,\n  amount,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, time, to_artifact_source_id, from_artifact_source_id))), '+', '-'), '/', '_') as event_source_id\nfrom all_events\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_metal_transactions": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_metal_transactions",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_metal_transactions.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_metal_transactions.sql",
      unique_id: "model.opensource_observer.int_metal_transactions",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_metal_transactions",
      ],
      alias: "int_metal_transactions",
      checksum: {
        name: "sha256",
        checksum:
          "27d0fcbf3f8889f7c0afd2bd84731bb7cc91772f151967fa4ddafe1ccc94dade",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.6828823,
      relation_name: "`opensource-observer`.`oso`.`int_metal_transactions`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  ) \n}}\n{{ filtered_blockchain_events("METAL", "metal", "transactions") }}',
      language: "sql",
      refs: [{ name: "int_all_artifacts", package: null, version: null }],
      sources: [
        ["metal", "transactions"],
        ["metal", "transactions"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.filtered_blockchain_events"],
        nodes: [
          "source.opensource_observer.metal.transactions",
          "model.opensource_observer.int_all_artifacts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_metal_transactions.sql",
      compiled: true,
      compiled_code:
        "\n\nwith known_addresses as (\n  select distinct `artifact_source_id` as `address`\n  from `opensource-observer`.`oso`.`int_all_artifacts` \n  where UPPER(artifact_source) in (UPPER('METAL'), 'ANY_EVM')\n), known_to as (\nselect events.* \nfrom `opensource-observer`.`superchain`.`metal_transactions` as events\ninner join known_addresses known\n  on known.address = events.to_address\n  \n    \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), known_from as (\n  select events.* \n  from `opensource-observer`.`superchain`.`metal_transactions` as events\n  inner join known_addresses known\n    on known.address = events.from_address\n  \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), txs_with_dupes as (\n  select * from known_to\n  union all\n  select * from known_from\n)\nselect\n  *\nfrom txs_with_dupes\nqualify\n  ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY block_timestamp ASC) = 1\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_optimism_transactions": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_optimism_transactions",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_optimism_transactions.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_optimism_transactions.sql",
      unique_id: "model.opensource_observer.int_optimism_transactions",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_optimism_transactions",
      ],
      alias: "int_optimism_transactions",
      checksum: {
        name: "sha256",
        checksum:
          "2f3ebe8619b11c2ccf001ccb5248e14852b096abd35675906d2faccb889129fd",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.6879816,
      relation_name: "`opensource-observer`.`oso`.`int_optimism_transactions`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  ) \n}}\nwith known_addresses as (\n  select distinct `artifact_source_id` as `address`\n  from {{ ref("int_all_artifacts") }}\n  where `artifact_source` = \'OPTIMISM\'\n),\n{% if target.name == \'production\' %}\nreceipts as (\n  select *\n  from {{ source("optimism", "receipts") }}\n  {% if is_incremental() %}\n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    {{ playground_filter("block_timestamp", is_start=False) }}\n  {% else %}\n  {{ playground_filter("block_timestamp") }}\n  {% endif %}\n), blocks as (\n  select *\n  from {{ source("optimism", "blocks") }}\n  {% if is_incremental() %}\n  where `block_timestamp` > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    {{ playground_filter("`block_timestamp`", is_start=False) }}\n  {% else %}\n  {{ playground_filter("`block_timestamp`") }}\n  {% endif %}\n\n), transactions_with_receipts as (\n\nselect\n  transactions.*,\n  blocks.block_number as block_number,\n  receipts.contract_address as receipt_contract_address,\n  receipts.cumulative_gas_used as receipt_cumulative_gas_used,\n  receipts.gas_used as receipt_gas_used,\n  receipts.effective_gas_price as receipt_effective_gas_price,\n  receipts.root as receipt_root,\n  receipts.status as receipt_status\nfrom {{ source("optimism", "transactions") }} as transactions\ninner join receipts as receipts\n  on transactions.transaction_hash = receipts.transaction_hash\ninner join {{ source("optimism", "blocks") }} as blocks\n  on transactions.block_hash = blocks.block_hash\n{% if is_incremental() %}\nwhere\n    {# \n      We are using insert_overwrite so this will consistently select everything\n      that would go into the latest partition (and any new partitions after\n      that). It will overwrite any data in the partitions for which this select\n      statement matches\n    #}\n    transactions.block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    {{ playground_filter("block_timestamp", is_start=False) }}\n{% else %}\n    {{ playground_filter("block_timestamp") }}\n{% endif %}\n),\n{% else %}\n  transactions_with_receipts as (\n{# \n  We need a separate query for the playground because we transform the data in\n  production.\n#}\n    select *\n    from {{ source(current_playground(), "optimism_transactions") }}\n    {% if is_incremental() %}\n      where\n        block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, interval 1 day)\n        {{ playground_filter("block_timestamp", is_start=False) }}\n    {% else %}\n    {{ playground_filter("block_timestamp") }}\n{% endif %}\n  ),\n{% endif %}\ntxs_with_dupes as (\n  select txs_to.*\n  from transactions_with_receipts as txs_to\n  inner join known_addresses as known_to\n    on txs_to.to_address = known_to.address\n  union all\n  select txs_from.*\n  from transactions_with_receipts as txs_from\n  inner join known_addresses as known_from\n    on txs_from.from_address = known_from.address\n)\n\nselect *\nfrom txs_with_dupes\nqualify\n  ROW_NUMBER()\n    over (partition by `transaction_hash` order by block_timestamp asc)\n  = 1',
      language: "sql",
      refs: [{ name: "int_all_artifacts", package: null, version: null }],
      sources: [
        ["optimism", "receipts"],
        ["optimism", "blocks"],
        ["optimism", "transactions"],
        ["optimism", "blocks"],
      ],
      metrics: [],
      depends_on: {
        macros: [
          "macro.dbt.is_incremental",
          "macro.opensource_observer.playground_filter",
        ],
        nodes: [
          "source.opensource_observer.optimism.receipts",
          "source.opensource_observer.optimism.blocks",
          "source.opensource_observer.optimism.transactions",
          "model.opensource_observer.int_all_artifacts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_optimism_transactions.sql",
      compiled: true,
      compiled_code:
        "\nwith known_addresses as (\n  select distinct `artifact_source_id` as `address`\n  from `opensource-observer`.`oso`.`int_all_artifacts`\n  where `artifact_source` = 'OPTIMISM'\n),\n\nreceipts as (\n  select *\n  from `bigquery-public-data`.`goog_blockchain_optimism_mainnet_us`.`receipts`\n  \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), blocks as (\n  select *\n  from `bigquery-public-data`.`goog_blockchain_optimism_mainnet_us`.`blocks`\n  \n  where `block_timestamp` > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n\n), transactions_with_receipts as (\n\nselect\n  transactions.*,\n  blocks.block_number as block_number,\n  receipts.contract_address as receipt_contract_address,\n  receipts.cumulative_gas_used as receipt_cumulative_gas_used,\n  receipts.gas_used as receipt_gas_used,\n  receipts.effective_gas_price as receipt_effective_gas_price,\n  receipts.root as receipt_root,\n  receipts.status as receipt_status\nfrom `bigquery-public-data`.`goog_blockchain_optimism_mainnet_us`.`transactions` as transactions\ninner join receipts as receipts\n  on transactions.transaction_hash = receipts.transaction_hash\ninner join `bigquery-public-data`.`goog_blockchain_optimism_mainnet_us`.`blocks` as blocks\n  on transactions.block_hash = blocks.block_hash\n\nwhere\n    \n    transactions.block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n\n),\n\ntxs_with_dupes as (\n  select txs_to.*\n  from transactions_with_receipts as txs_to\n  inner join known_addresses as known_to\n    on txs_to.to_address = known_to.address\n  union all\n  select txs_from.*\n  from transactions_with_receipts as txs_from\n  inner join known_addresses as known_from\n    on txs_from.from_address = known_from.address\n)\n\nselect *\nfrom txs_with_dupes\nqualify\n  ROW_NUMBER()\n    over (partition by `transaction_hash` order by block_timestamp asc)\n  = 1",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_frax_contract_invocation_events": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_frax_contract_invocation_events",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_frax_contract_invocation_events.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_frax_contract_invocation_events.sql",
      unique_id:
        "model.opensource_observer.int_frax_contract_invocation_events",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_frax_contract_invocation_events",
      ],
      alias: "int_frax_contract_invocation_events",
      checksum: {
        name: "sha256",
        checksum:
          "256889a88a28b700b13dc0cf6bcfb85a4cc1ef0e203b43244a5c6d6117412565",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "time",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "time",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.6978238,
      relation_name:
        "`opensource-observer`.`oso`.`int_frax_contract_invocation_events`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "time",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{% if is_incremental() %}\n  {% set start = "TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)" %}\n{% else %}\n  {% set start = "\'1970-01-01\'" %}\n{% endif %}\n{{ contract_invocation_events_with_l1("frax", start) }}',
      language: "sql",
      refs: [
        {
          name: "int_artifacts_in_ossd_by_project",
          package: null,
          version: null,
        },
        { name: "int_frax_transactions", package: null, version: null },
        { name: "int_safes", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [
          "macro.dbt.is_incremental",
          "macro.opensource_observer.contract_invocation_events_with_l1",
        ],
        nodes: [
          "model.opensource_observer.int_artifacts_in_ossd_by_project",
          "model.opensource_observer.int_frax_transactions",
          "model.opensource_observer.int_safes",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_frax_contract_invocation_events.sql",
      compiled: true,
      compiled_code:
        "\n\n  \n\n\n\n\n\nwith bridges as (\n  select distinct artifact_source_id\n  from `opensource-observer`.`oso`.`int_artifacts_in_ossd_by_project`\n  where artifact_type = 'BRIDGE'\n),\n\ntransactions as (\n  select -- noqa: ST06\n    TIMESTAMP_TRUNC(block_timestamp, day) as `time`,\n    LOWER(to_address) as to_artifact_source_id,    \n    LOWER(from_address) as from_artifact_source_id,\n    receipt_status,\n    (receipt_gas_used * receipt_effective_gas_price) as l2_gas_fee\n  from `opensource-observer`.`oso`.`int_frax_transactions`\n  where\n    block_timestamp >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    and (\n      input != \"0x\"\n      or LOWER(to_address) in (select * from bridges)\n    )\n),\n\ncontract_invocations as (\n  select\n    time,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    SUM(l2_gas_fee) as total_l2_gas_used,\n    COUNT(*) as total_count,\n    SUM(case when receipt_status = 1 then 1 else 0 end) as success_count\n  from transactions\n  where to_artifact_source_id not in (\n    select address\n    from `opensource-observer`.`oso`.`int_safes`\n    where network = 'FRAX'\n  )\n  group by\n    time,\n    to_artifact_source_id,\n    from_artifact_source_id\n),\n\nunion_events as (\n  select \n    time,    \n    'CONTRACT_INVOCATION_DAILY_L2_GAS_USED' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    total_l2_gas_used as amount\n  from contract_invocations\n  union all\n  select \n    time,\n    'CONTRACT_INVOCATION_DAILY_COUNT' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    total_count as amount\n  from contract_invocations\n  union all\n  select \n    time,\n    'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    success_count as amount\n  from contract_invocations\n),\n\nall_events as (\n  select\n    time,\n    event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    amount,\n    \"FRAX\" as event_source,\n  from union_events\n)\nselect\n  time,\n  event_type,  \n  event_source,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, to_artifact_source_id))), '+', '-'), '/', '_')\n    as to_artifact_id,\n  to_artifact_source_id as to_artifact_name,\n  \"frax\" as to_artifact_namespace,\n  \"CONTRACT\" as to_artifact_type,\n  to_artifact_source_id,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, from_artifact_source_id))), '+', '-'), '/', '_')\n    as from_artifact_id,\n  from_artifact_source_id as from_artifact_name,\n  \"frax\" as from_artifact_namespace,\n  \"EOA\" as from_artifact_type,\n  from_artifact_source_id,\n  amount,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, time, to_artifact_source_id, from_artifact_source_id))), '+', '-'), '/', '_') as event_source_id\nfrom all_events\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_optimism_traces": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_optimism_traces",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_optimism_traces.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_optimism_traces.sql",
      unique_id: "model.opensource_observer.int_optimism_traces",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_optimism_traces",
      ],
      alias: "int_optimism_traces",
      checksum: {
        name: "sha256",
        checksum:
          "8348bb1e3f37bf80f5352c5ae6c1e020b814a390fe18e36ef515cb16beb9bc76",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.703579,
      relation_name: "`opensource-observer`.`oso`.`int_optimism_traces`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  ) \n}}\n{{ \n  filtered_blockchain_events(\n    "OPTIMISM", \n    "superchain", \n    "optimism_traces"\n  ) \n}}',
      language: "sql",
      refs: [{ name: "int_all_artifacts", package: null, version: null }],
      sources: [
        ["superchain", "optimism_traces"],
        ["superchain", "optimism_traces"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.filtered_blockchain_events"],
        nodes: [
          "source.opensource_observer.superchain.optimism_traces",
          "model.opensource_observer.int_all_artifacts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_optimism_traces.sql",
      compiled: true,
      compiled_code:
        "\n\nwith known_addresses as (\n  select distinct `artifact_source_id` as `address`\n  from `opensource-observer`.`oso`.`int_all_artifacts` \n  where UPPER(artifact_source) in (UPPER('OPTIMISM'), 'ANY_EVM')\n), known_to as (\nselect events.* \nfrom `opensource-observer`.`superchain`.`optimism_traces` as events\ninner join known_addresses known\n  on known.address = events.to_address\n  \n    \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), known_from as (\n  select events.* \n  from `opensource-observer`.`superchain`.`optimism_traces` as events\n  inner join known_addresses known\n    on known.address = events.from_address\n  \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), txs_with_dupes as (\n  select * from known_to\n  union all\n  select * from known_from\n)\nselect\n  *\nfrom txs_with_dupes\nqualify\n  ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY block_timestamp ASC) = 1\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_pgn_transactions": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_pgn_transactions",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_pgn_transactions.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_pgn_transactions.sql",
      unique_id: "model.opensource_observer.int_pgn_transactions",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_pgn_transactions",
      ],
      alias: "int_pgn_transactions",
      checksum: {
        name: "sha256",
        checksum:
          "2ba4c8fd80a2fc3a3514f8ae31e76a58f56201a33609a7d1d716bd858500be31",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.708665,
      relation_name: "`opensource-observer`.`oso`.`int_pgn_transactions`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{{ filtered_blockchain_events("PGN", "pgn", "transactions") }}',
      language: "sql",
      refs: [{ name: "int_all_artifacts", package: null, version: null }],
      sources: [
        ["pgn", "transactions"],
        ["pgn", "transactions"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.filtered_blockchain_events"],
        nodes: [
          "source.opensource_observer.pgn.transactions",
          "model.opensource_observer.int_all_artifacts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_pgn_transactions.sql",
      compiled: true,
      compiled_code:
        "\n\nwith known_addresses as (\n  select distinct `artifact_source_id` as `address`\n  from `opensource-observer`.`oso`.`int_all_artifacts` \n  where UPPER(artifact_source) in (UPPER('PGN'), 'ANY_EVM')\n), known_to as (\nselect events.* \nfrom `opensource-observer`.`superchain`.`pgn_transactions` as events\ninner join known_addresses known\n  on known.address = events.to_address\n  \n    \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), known_from as (\n  select events.* \n  from `opensource-observer`.`superchain`.`pgn_transactions` as events\n  inner join known_addresses known\n    on known.address = events.from_address\n  \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), txs_with_dupes as (\n  select * from known_to\n  union all\n  select * from known_from\n)\nselect\n  *\nfrom txs_with_dupes\nqualify\n  ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY block_timestamp ASC) = 1\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_zora_transactions": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_zora_transactions",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_zora_transactions.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_zora_transactions.sql",
      unique_id: "model.opensource_observer.int_zora_transactions",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_zora_transactions",
      ],
      alias: "int_zora_transactions",
      checksum: {
        name: "sha256",
        checksum:
          "551406c290412c5a61286e58c6d808618e93b02681b2650faa4a1c64124efc1b",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.7136862,
      relation_name: "`opensource-observer`.`oso`.`int_zora_transactions`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{{ filtered_blockchain_events("ZORA", "zora", "transactions") }}',
      language: "sql",
      refs: [{ name: "int_all_artifacts", package: null, version: null }],
      sources: [
        ["zora", "transactions"],
        ["zora", "transactions"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.filtered_blockchain_events"],
        nodes: [
          "source.opensource_observer.zora.transactions",
          "model.opensource_observer.int_all_artifacts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_zora_transactions.sql",
      compiled: true,
      compiled_code:
        "\n\nwith known_addresses as (\n  select distinct `artifact_source_id` as `address`\n  from `opensource-observer`.`oso`.`int_all_artifacts` \n  where UPPER(artifact_source) in (UPPER('ZORA'), 'ANY_EVM')\n), known_to as (\nselect events.* \nfrom `opensource-observer`.`superchain`.`zora_transactions` as events\ninner join known_addresses known\n  on known.address = events.to_address\n  \n    \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), known_from as (\n  select events.* \n  from `opensource-observer`.`superchain`.`zora_transactions` as events\n  inner join known_addresses known\n    on known.address = events.from_address\n  \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), txs_with_dupes as (\n  select * from known_to\n  union all\n  select * from known_from\n)\nselect\n  *\nfrom txs_with_dupes\nqualify\n  ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY block_timestamp ASC) = 1\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_mode_traces": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_mode_traces",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_mode_traces.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_mode_traces.sql",
      unique_id: "model.opensource_observer.int_mode_traces",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_mode_traces",
      ],
      alias: "int_mode_traces",
      checksum: {
        name: "sha256",
        checksum:
          "7dafa0f6a3a88d2b532149194035f3b754dc822972bc6c8b175e3a13530d76cb",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.71893,
      relation_name: "`opensource-observer`.`oso`.`int_mode_traces`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{{ filtered_blockchain_events("MODE", "mode", "traces") }}',
      language: "sql",
      refs: [{ name: "int_all_artifacts", package: null, version: null }],
      sources: [
        ["mode", "traces"],
        ["mode", "traces"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.filtered_blockchain_events"],
        nodes: [
          "source.opensource_observer.mode.traces",
          "model.opensource_observer.int_all_artifacts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_mode_traces.sql",
      compiled: true,
      compiled_code:
        "\n\nwith known_addresses as (\n  select distinct `artifact_source_id` as `address`\n  from `opensource-observer`.`oso`.`int_all_artifacts` \n  where UPPER(artifact_source) in (UPPER('MODE'), 'ANY_EVM')\n), known_to as (\nselect events.* \nfrom `opensource-observer`.`superchain`.`mode_traces` as events\ninner join known_addresses known\n  on known.address = events.to_address\n  \n    \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), known_from as (\n  select events.* \n  from `opensource-observer`.`superchain`.`mode_traces` as events\n  inner join known_addresses known\n    on known.address = events.from_address\n  \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), txs_with_dupes as (\n  select * from known_to\n  union all\n  select * from known_from\n)\nselect\n  *\nfrom txs_with_dupes\nqualify\n  ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY block_timestamp ASC) = 1\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_base_traces": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_base_traces",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_base_traces.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_base_traces.sql",
      unique_id: "model.opensource_observer.int_base_traces",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_base_traces",
      ],
      alias: "int_base_traces",
      checksum: {
        name: "sha256",
        checksum:
          "c7301b78aeb02465cfef92801dc34d546b846c31bde013c9d4e3fe3b6d15ffdf",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.7240663,
      relation_name: "`opensource-observer`.`oso`.`int_base_traces`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{{ filtered_blockchain_events("BASE", "base", "traces") }}',
      language: "sql",
      refs: [{ name: "int_all_artifacts", package: null, version: null }],
      sources: [
        ["base", "traces"],
        ["base", "traces"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.filtered_blockchain_events"],
        nodes: [
          "source.opensource_observer.base.traces",
          "model.opensource_observer.int_all_artifacts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_base_traces.sql",
      compiled: true,
      compiled_code:
        "\n\nwith known_addresses as (\n  select distinct `artifact_source_id` as `address`\n  from `opensource-observer`.`oso`.`int_all_artifacts` \n  where UPPER(artifact_source) in (UPPER('BASE'), 'ANY_EVM')\n), known_to as (\nselect events.* \nfrom `opensource-observer`.`superchain`.`base_traces` as events\ninner join known_addresses known\n  on known.address = events.to_address\n  \n    \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), known_from as (\n  select events.* \n  from `opensource-observer`.`superchain`.`base_traces` as events\n  inner join known_addresses known\n    on known.address = events.from_address\n  \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), txs_with_dupes as (\n  select * from known_to\n  union all\n  select * from known_from\n)\nselect\n  *\nfrom txs_with_dupes\nqualify\n  ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY block_timestamp ASC) = 1\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_metal_traces": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_metal_traces",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_metal_traces.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_metal_traces.sql",
      unique_id: "model.opensource_observer.int_metal_traces",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_metal_traces",
      ],
      alias: "int_metal_traces",
      checksum: {
        name: "sha256",
        checksum:
          "b2e3b7e16c55e07225cff371cbf9702e70358e89e0276899a45eb2bf2c2a713a",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.729214,
      relation_name: "`opensource-observer`.`oso`.`int_metal_traces`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{{ filtered_blockchain_events("METAL", "metal", "traces") }}',
      language: "sql",
      refs: [{ name: "int_all_artifacts", package: null, version: null }],
      sources: [
        ["metal", "traces"],
        ["metal", "traces"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.filtered_blockchain_events"],
        nodes: [
          "source.opensource_observer.metal.traces",
          "model.opensource_observer.int_all_artifacts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_metal_traces.sql",
      compiled: true,
      compiled_code:
        "\n\nwith known_addresses as (\n  select distinct `artifact_source_id` as `address`\n  from `opensource-observer`.`oso`.`int_all_artifacts` \n  where UPPER(artifact_source) in (UPPER('METAL'), 'ANY_EVM')\n), known_to as (\nselect events.* \nfrom `opensource-observer`.`superchain`.`metal_traces` as events\ninner join known_addresses known\n  on known.address = events.to_address\n  \n    \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), known_from as (\n  select events.* \n  from `opensource-observer`.`superchain`.`metal_traces` as events\n  inner join known_addresses known\n    on known.address = events.from_address\n  \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), txs_with_dupes as (\n  select * from known_to\n  union all\n  select * from known_from\n)\nselect\n  *\nfrom txs_with_dupes\nqualify\n  ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY block_timestamp ASC) = 1\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_metal_contract_invocation_events": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_metal_contract_invocation_events",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_metal_contract_invocation_events.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_metal_contract_invocation_events.sql",
      unique_id:
        "model.opensource_observer.int_metal_contract_invocation_events",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_metal_contract_invocation_events",
      ],
      alias: "int_metal_contract_invocation_events",
      checksum: {
        name: "sha256",
        checksum:
          "c1440b4a6d9a5444a13e19ec2a679d1dc70b69769302be53ce86a71e82081fea",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "time",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "time",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.7359855,
      relation_name:
        "`opensource-observer`.`oso`.`int_metal_contract_invocation_events`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "time",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{% if is_incremental() %}\n  {% set start = "TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)" %}\n{% else %}\n  {% set start = "\'1970-01-01\'" %}\n{% endif %}\n{{ contract_invocation_events_with_l1("metal", start) }}',
      language: "sql",
      refs: [
        {
          name: "int_artifacts_in_ossd_by_project",
          package: null,
          version: null,
        },
        { name: "int_metal_transactions", package: null, version: null },
        { name: "int_safes", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [
          "macro.dbt.is_incremental",
          "macro.opensource_observer.contract_invocation_events_with_l1",
        ],
        nodes: [
          "model.opensource_observer.int_artifacts_in_ossd_by_project",
          "model.opensource_observer.int_metal_transactions",
          "model.opensource_observer.int_safes",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_metal_contract_invocation_events.sql",
      compiled: true,
      compiled_code:
        "\n\n  \n\n\n\n\n\nwith bridges as (\n  select distinct artifact_source_id\n  from `opensource-observer`.`oso`.`int_artifacts_in_ossd_by_project`\n  where artifact_type = 'BRIDGE'\n),\n\ntransactions as (\n  select -- noqa: ST06\n    TIMESTAMP_TRUNC(block_timestamp, day) as `time`,\n    LOWER(to_address) as to_artifact_source_id,    \n    LOWER(from_address) as from_artifact_source_id,\n    receipt_status,\n    (receipt_gas_used * receipt_effective_gas_price) as l2_gas_fee\n  from `opensource-observer`.`oso`.`int_metal_transactions`\n  where\n    block_timestamp >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    and (\n      input != \"0x\"\n      or LOWER(to_address) in (select * from bridges)\n    )\n),\n\ncontract_invocations as (\n  select\n    time,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    SUM(l2_gas_fee) as total_l2_gas_used,\n    COUNT(*) as total_count,\n    SUM(case when receipt_status = 1 then 1 else 0 end) as success_count\n  from transactions\n  where to_artifact_source_id not in (\n    select address\n    from `opensource-observer`.`oso`.`int_safes`\n    where network = 'METAL'\n  )\n  group by\n    time,\n    to_artifact_source_id,\n    from_artifact_source_id\n),\n\nunion_events as (\n  select \n    time,    \n    'CONTRACT_INVOCATION_DAILY_L2_GAS_USED' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    total_l2_gas_used as amount\n  from contract_invocations\n  union all\n  select \n    time,\n    'CONTRACT_INVOCATION_DAILY_COUNT' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    total_count as amount\n  from contract_invocations\n  union all\n  select \n    time,\n    'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    success_count as amount\n  from contract_invocations\n),\n\nall_events as (\n  select\n    time,\n    event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    amount,\n    \"METAL\" as event_source,\n  from union_events\n)\nselect\n  time,\n  event_type,  \n  event_source,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, to_artifact_source_id))), '+', '-'), '/', '_')\n    as to_artifact_id,\n  to_artifact_source_id as to_artifact_name,\n  \"metal\" as to_artifact_namespace,\n  \"CONTRACT\" as to_artifact_type,\n  to_artifact_source_id,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, from_artifact_source_id))), '+', '-'), '/', '_')\n    as from_artifact_id,\n  from_artifact_source_id as from_artifact_name,\n  \"metal\" as from_artifact_namespace,\n  \"EOA\" as from_artifact_type,\n  from_artifact_source_id,\n  amount,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, time, to_artifact_source_id, from_artifact_source_id))), '+', '-'), '/', '_') as event_source_id\nfrom all_events\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_base_transactions": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_base_transactions",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_base_transactions.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_base_transactions.sql",
      unique_id: "model.opensource_observer.int_base_transactions",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_base_transactions",
      ],
      alias: "int_base_transactions",
      checksum: {
        name: "sha256",
        checksum:
          "be0b77437e2f3d6613d1178630d6a83b2e1b68adfa8da2eca936594fe32a42d7",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.7417154,
      relation_name: "`opensource-observer`.`oso`.`int_base_transactions`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{{ filtered_blockchain_events("BASE", "base", "transactions") }}',
      language: "sql",
      refs: [{ name: "int_all_artifacts", package: null, version: null }],
      sources: [
        ["base", "transactions"],
        ["base", "transactions"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.filtered_blockchain_events"],
        nodes: [
          "source.opensource_observer.base.transactions",
          "model.opensource_observer.int_all_artifacts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_base_transactions.sql",
      compiled: true,
      compiled_code:
        "\n\nwith known_addresses as (\n  select distinct `artifact_source_id` as `address`\n  from `opensource-observer`.`oso`.`int_all_artifacts` \n  where UPPER(artifact_source) in (UPPER('BASE'), 'ANY_EVM')\n), known_to as (\nselect events.* \nfrom `opensource-observer`.`superchain`.`base_transactions` as events\ninner join known_addresses known\n  on known.address = events.to_address\n  \n    \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), known_from as (\n  select events.* \n  from `opensource-observer`.`superchain`.`base_transactions` as events\n  inner join known_addresses known\n    on known.address = events.from_address\n  \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), txs_with_dupes as (\n  select * from known_to\n  union all\n  select * from known_from\n)\nselect\n  *\nfrom txs_with_dupes\nqualify\n  ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY block_timestamp ASC) = 1\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_pgn_contract_invocation_events": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_pgn_contract_invocation_events",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_pgn_contract_invocation_events.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_pgn_contract_invocation_events.sql",
      unique_id: "model.opensource_observer.int_pgn_contract_invocation_events",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_pgn_contract_invocation_events",
      ],
      alias: "int_pgn_contract_invocation_events",
      checksum: {
        name: "sha256",
        checksum:
          "87f76ef7a9531b0427b4e5d8ccc0d017ecec2a91f6e3bf436608d52c1c86ec0d",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "time",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "time",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.7468593,
      relation_name:
        "`opensource-observer`.`oso`.`int_pgn_contract_invocation_events`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "time",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{% if is_incremental() %}\n  {% set start = "TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)" %}\n{% else %}\n  {% set start = "\'1970-01-01\'" %}\n{% endif %}\n{{ contract_invocation_events_with_l1("pgn", start) }}',
      language: "sql",
      refs: [
        {
          name: "int_artifacts_in_ossd_by_project",
          package: null,
          version: null,
        },
        { name: "int_pgn_transactions", package: null, version: null },
        { name: "int_safes", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [
          "macro.dbt.is_incremental",
          "macro.opensource_observer.contract_invocation_events_with_l1",
        ],
        nodes: [
          "model.opensource_observer.int_artifacts_in_ossd_by_project",
          "model.opensource_observer.int_pgn_transactions",
          "model.opensource_observer.int_safes",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_pgn_contract_invocation_events.sql",
      compiled: true,
      compiled_code:
        "\n\n  \n\n\n\n\n\nwith bridges as (\n  select distinct artifact_source_id\n  from `opensource-observer`.`oso`.`int_artifacts_in_ossd_by_project`\n  where artifact_type = 'BRIDGE'\n),\n\ntransactions as (\n  select -- noqa: ST06\n    TIMESTAMP_TRUNC(block_timestamp, day) as `time`,\n    LOWER(to_address) as to_artifact_source_id,    \n    LOWER(from_address) as from_artifact_source_id,\n    receipt_status,\n    (receipt_gas_used * receipt_effective_gas_price) as l2_gas_fee\n  from `opensource-observer`.`oso`.`int_pgn_transactions`\n  where\n    block_timestamp >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    and (\n      input != \"0x\"\n      or LOWER(to_address) in (select * from bridges)\n    )\n),\n\ncontract_invocations as (\n  select\n    time,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    SUM(l2_gas_fee) as total_l2_gas_used,\n    COUNT(*) as total_count,\n    SUM(case when receipt_status = 1 then 1 else 0 end) as success_count\n  from transactions\n  where to_artifact_source_id not in (\n    select address\n    from `opensource-observer`.`oso`.`int_safes`\n    where network = 'PGN'\n  )\n  group by\n    time,\n    to_artifact_source_id,\n    from_artifact_source_id\n),\n\nunion_events as (\n  select \n    time,    \n    'CONTRACT_INVOCATION_DAILY_L2_GAS_USED' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    total_l2_gas_used as amount\n  from contract_invocations\n  union all\n  select \n    time,\n    'CONTRACT_INVOCATION_DAILY_COUNT' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    total_count as amount\n  from contract_invocations\n  union all\n  select \n    time,\n    'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    success_count as amount\n  from contract_invocations\n),\n\nall_events as (\n  select\n    time,\n    event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    amount,\n    \"PGN\" as event_source,\n  from union_events\n)\nselect\n  time,\n  event_type,  \n  event_source,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, to_artifact_source_id))), '+', '-'), '/', '_')\n    as to_artifact_id,\n  to_artifact_source_id as to_artifact_name,\n  \"pgn\" as to_artifact_namespace,\n  \"CONTRACT\" as to_artifact_type,\n  to_artifact_source_id,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, from_artifact_source_id))), '+', '-'), '/', '_')\n    as from_artifact_id,\n  from_artifact_source_id as from_artifact_name,\n  \"pgn\" as from_artifact_namespace,\n  \"EOA\" as from_artifact_type,\n  from_artifact_source_id,\n  amount,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, time, to_artifact_source_id, from_artifact_source_id))), '+', '-'), '/', '_') as event_source_id\nfrom all_events\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_base_contract_invocation_events": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_base_contract_invocation_events",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_base_contract_invocation_events.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_base_contract_invocation_events.sql",
      unique_id:
        "model.opensource_observer.int_base_contract_invocation_events",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_base_contract_invocation_events",
      ],
      alias: "int_base_contract_invocation_events",
      checksum: {
        name: "sha256",
        checksum:
          "6f8736a1fb0e98e2e43e5e518a295c9d33b85235592b934809825bde816ba6a7",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "time",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "time",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.7526221,
      relation_name:
        "`opensource-observer`.`oso`.`int_base_contract_invocation_events`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "time",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{% if is_incremental() %}\n  {% set start = "TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)" %}\n{% else %}\n  {% set start = "\'1970-01-01\'" %}\n{% endif %}\n{{ contract_invocation_events_with_l1("base", start) }}',
      language: "sql",
      refs: [
        {
          name: "int_artifacts_in_ossd_by_project",
          package: null,
          version: null,
        },
        { name: "int_base_transactions", package: null, version: null },
        { name: "int_safes", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [
          "macro.dbt.is_incremental",
          "macro.opensource_observer.contract_invocation_events_with_l1",
        ],
        nodes: [
          "model.opensource_observer.int_artifacts_in_ossd_by_project",
          "model.opensource_observer.int_base_transactions",
          "model.opensource_observer.int_safes",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_base_contract_invocation_events.sql",
      compiled: true,
      compiled_code:
        "\n\n  \n\n\n\n\n\nwith bridges as (\n  select distinct artifact_source_id\n  from `opensource-observer`.`oso`.`int_artifacts_in_ossd_by_project`\n  where artifact_type = 'BRIDGE'\n),\n\ntransactions as (\n  select -- noqa: ST06\n    TIMESTAMP_TRUNC(block_timestamp, day) as `time`,\n    LOWER(to_address) as to_artifact_source_id,    \n    LOWER(from_address) as from_artifact_source_id,\n    receipt_status,\n    (receipt_gas_used * receipt_effective_gas_price) as l2_gas_fee\n  from `opensource-observer`.`oso`.`int_base_transactions`\n  where\n    block_timestamp >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    and (\n      input != \"0x\"\n      or LOWER(to_address) in (select * from bridges)\n    )\n),\n\ncontract_invocations as (\n  select\n    time,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    SUM(l2_gas_fee) as total_l2_gas_used,\n    COUNT(*) as total_count,\n    SUM(case when receipt_status = 1 then 1 else 0 end) as success_count\n  from transactions\n  where to_artifact_source_id not in (\n    select address\n    from `opensource-observer`.`oso`.`int_safes`\n    where network = 'BASE'\n  )\n  group by\n    time,\n    to_artifact_source_id,\n    from_artifact_source_id\n),\n\nunion_events as (\n  select \n    time,    \n    'CONTRACT_INVOCATION_DAILY_L2_GAS_USED' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    total_l2_gas_used as amount\n  from contract_invocations\n  union all\n  select \n    time,\n    'CONTRACT_INVOCATION_DAILY_COUNT' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    total_count as amount\n  from contract_invocations\n  union all\n  select \n    time,\n    'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    success_count as amount\n  from contract_invocations\n),\n\nall_events as (\n  select\n    time,\n    event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    amount,\n    \"BASE\" as event_source,\n  from union_events\n)\nselect\n  time,\n  event_type,  \n  event_source,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, to_artifact_source_id))), '+', '-'), '/', '_')\n    as to_artifact_id,\n  to_artifact_source_id as to_artifact_name,\n  \"base\" as to_artifact_namespace,\n  \"CONTRACT\" as to_artifact_type,\n  to_artifact_source_id,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, from_artifact_source_id))), '+', '-'), '/', '_')\n    as from_artifact_id,\n  from_artifact_source_id as from_artifact_name,\n  \"base\" as from_artifact_namespace,\n  \"EOA\" as from_artifact_type,\n  from_artifact_source_id,\n  amount,\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, time, to_artifact_source_id, from_artifact_source_id))), '+', '-'), '/', '_') as event_source_id\nfrom all_events\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_frax_transactions": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_frax_transactions",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_frax_transactions.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_frax_transactions.sql",
      unique_id: "model.opensource_observer.int_frax_transactions",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_frax_transactions",
      ],
      alias: "int_frax_transactions",
      checksum: {
        name: "sha256",
        checksum:
          "444447aeb4d7ac415b7b0671772fdeecdec916b49fc727942572378ac53f61c4",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.7584374,
      relation_name: "`opensource-observer`.`oso`.`int_frax_transactions`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{{ filtered_blockchain_events("FRAX", "frax", "transactions") }}',
      language: "sql",
      refs: [{ name: "int_all_artifacts", package: null, version: null }],
      sources: [
        ["frax", "transactions"],
        ["frax", "transactions"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.filtered_blockchain_events"],
        nodes: [
          "source.opensource_observer.frax.transactions",
          "model.opensource_observer.int_all_artifacts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_frax_transactions.sql",
      compiled: true,
      compiled_code:
        "\n\nwith known_addresses as (\n  select distinct `artifact_source_id` as `address`\n  from `opensource-observer`.`oso`.`int_all_artifacts` \n  where UPPER(artifact_source) in (UPPER('FRAX'), 'ANY_EVM')\n), known_to as (\nselect events.* \nfrom `opensource-observer`.`superchain`.`frax_transactions` as events\ninner join known_addresses known\n  on known.address = events.to_address\n  \n    \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), known_from as (\n  select events.* \n  from `opensource-observer`.`superchain`.`frax_transactions` as events\n  inner join known_addresses known\n    on known.address = events.from_address\n  \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), txs_with_dupes as (\n  select * from known_to\n  union all\n  select * from known_from\n)\nselect\n  *\nfrom txs_with_dupes\nqualify\n  ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY block_timestamp ASC) = 1\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_frax_traces": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_frax_traces",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_frax_traces.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_frax_traces.sql",
      unique_id: "model.opensource_observer.int_frax_traces",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_frax_traces",
      ],
      alias: "int_frax_traces",
      checksum: {
        name: "sha256",
        checksum:
          "19979e6b7ec3d60b5b5d3bf13e2a51296dd44df5bc7e7a678aa6e9caa3dc2f81",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.7636573,
      relation_name: "`opensource-observer`.`oso`.`int_frax_traces`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{{ filtered_blockchain_events("FRAX", "frax", "traces") }}',
      language: "sql",
      refs: [{ name: "int_all_artifacts", package: null, version: null }],
      sources: [
        ["frax", "traces"],
        ["frax", "traces"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.filtered_blockchain_events"],
        nodes: [
          "source.opensource_observer.frax.traces",
          "model.opensource_observer.int_all_artifacts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_frax_traces.sql",
      compiled: true,
      compiled_code:
        "\n\nwith known_addresses as (\n  select distinct `artifact_source_id` as `address`\n  from `opensource-observer`.`oso`.`int_all_artifacts` \n  where UPPER(artifact_source) in (UPPER('FRAX'), 'ANY_EVM')\n), known_to as (\nselect events.* \nfrom `opensource-observer`.`superchain`.`frax_traces` as events\ninner join known_addresses known\n  on known.address = events.to_address\n  \n    \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), known_from as (\n  select events.* \n  from `opensource-observer`.`superchain`.`frax_traces` as events\n  inner join known_addresses known\n    on known.address = events.from_address\n  \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), txs_with_dupes as (\n  select * from known_to\n  union all\n  select * from known_from\n)\nselect\n  *\nfrom txs_with_dupes\nqualify\n  ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY block_timestamp ASC) = 1\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_mode_transactions": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_mode_transactions",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_mode_transactions.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_mode_transactions.sql",
      unique_id: "model.opensource_observer.int_mode_transactions",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_mode_transactions",
      ],
      alias: "int_mode_transactions",
      checksum: {
        name: "sha256",
        checksum:
          "672d043178e677df24bfff0d823f0c6847818779253efd6e0c3586b93f159034",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.768783,
      relation_name: "`opensource-observer`.`oso`.`int_mode_transactions`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  ) \n}}\n{{ filtered_blockchain_events("MODE", "mode", "transactions") }}',
      language: "sql",
      refs: [{ name: "int_all_artifacts", package: null, version: null }],
      sources: [
        ["mode", "transactions"],
        ["mode", "transactions"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.filtered_blockchain_events"],
        nodes: [
          "source.opensource_observer.mode.transactions",
          "model.opensource_observer.int_all_artifacts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_mode_transactions.sql",
      compiled: true,
      compiled_code:
        "\n\nwith known_addresses as (\n  select distinct `artifact_source_id` as `address`\n  from `opensource-observer`.`oso`.`int_all_artifacts` \n  where UPPER(artifact_source) in (UPPER('MODE'), 'ANY_EVM')\n), known_to as (\nselect events.* \nfrom `opensource-observer`.`superchain`.`mode_transactions` as events\ninner join known_addresses known\n  on known.address = events.to_address\n  \n    \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), known_from as (\n  select events.* \n  from `opensource-observer`.`superchain`.`mode_transactions` as events\n  inner join known_addresses known\n    on known.address = events.from_address\n  \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), txs_with_dupes as (\n  select * from known_to\n  union all\n  select * from known_from\n)\nselect\n  *\nfrom txs_with_dupes\nqualify\n  ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY block_timestamp ASC) = 1\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_zora_traces": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_zora_traces",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_events/int_zora_traces.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_events/int_zora_traces.sql",
      unique_id: "model.opensource_observer.int_zora_traces",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_events",
        "int_zora_traces",
      ],
      alias: "int_zora_traces",
      checksum: {
        name: "sha256",
        checksum:
          "de11fc5719e3a355240b5e8b455c2c42cc77fad43cc98cbaccdebbe0712acd5e",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.7739823,
      relation_name: "`opensource-observer`.`oso`.`int_zora_traces`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  ) \n}}\n{{ filtered_blockchain_events("ZORA", "zora", "traces") }}',
      language: "sql",
      refs: [{ name: "int_all_artifacts", package: null, version: null }],
      sources: [
        ["zora", "traces"],
        ["zora", "traces"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.filtered_blockchain_events"],
        nodes: [
          "source.opensource_observer.zora.traces",
          "model.opensource_observer.int_all_artifacts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_events/int_zora_traces.sql",
      compiled: true,
      compiled_code:
        "\n\nwith known_addresses as (\n  select distinct `artifact_source_id` as `address`\n  from `opensource-observer`.`oso`.`int_all_artifacts` \n  where UPPER(artifact_source) in (UPPER('ZORA'), 'ANY_EVM')\n), known_to as (\nselect events.* \nfrom `opensource-observer`.`superchain`.`zora_traces` as events\ninner join known_addresses known\n  on known.address = events.to_address\n  \n    \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), known_from as (\n  select events.* \n  from `opensource-observer`.`superchain`.`zora_traces` as events\n  inner join known_addresses known\n    on known.address = events.from_address\n  \n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n), txs_with_dupes as (\n  select * from known_to\n  union all\n  select * from known_from\n)\nselect\n  *\nfrom txs_with_dupes\nqualify\n  ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY block_timestamp ASC) = 1\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_deployers": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_deployers",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_artifacts/int_deployers.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_artifacts/int_deployers.sql",
      unique_id: "model.opensource_observer.int_deployers",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_artifacts",
        "int_deployers",
      ],
      alias: "int_deployers",
      checksum: {
        name: "sha256",
        checksum:
          "f070c5a716c00dc5ec7ec73cffe208f5f7b1cb07a8131520dfd96bf6e8835ed0",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.7791283,
      relation_name: "`opensource-observer`.`oso`.`int_deployers`",
      raw_code:
        '{{\n  config(\n    materialized=\'table\'\n  )\n}}\n\n{% set networks = ["optimism", "base", "frax", "metal", "mode", "zora"] %}\n\n{% set union_queries = [] %}\n\n{% for network in networks %}\n  {% set table_name = "stg_" ~ network ~ "__deployers" %}\n  {% set network_upper = network.upper() %}\n\n  {% set query %}\n  select\n    block_timestamp,\n    transaction_hash,\n    deployer_address,\n    contract_address,\n    \'{{ network_upper }}\' as network,\n  from {{ ref(table_name) }}\n  {% endset %}\n\n  {% do union_queries.append(query) %}\n{% endfor %}\n\n{% set final_query = union_queries | join(\' union all \') %}\n\nwith deployers as (\n  {{ final_query }}\n)\n\nselect\n  block_timestamp,\n  transaction_hash,\n  deployer_address,\n  contract_address,\n  network\nfrom deployers',
      language: "sql",
      refs: [
        { name: "stg_optimism__deployers", package: null, version: null },
        { name: "stg_base__deployers", package: null, version: null },
        { name: "stg_frax__deployers", package: null, version: null },
        { name: "stg_metal__deployers", package: null, version: null },
        { name: "stg_mode__deployers", package: null, version: null },
        { name: "stg_zora__deployers", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.stg_optimism__deployers",
          "model.opensource_observer.stg_base__deployers",
          "model.opensource_observer.stg_frax__deployers",
          "model.opensource_observer.stg_metal__deployers",
          "model.opensource_observer.stg_mode__deployers",
          "model.opensource_observer.stg_zora__deployers",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_artifacts/int_deployers.sql",
      compiled: true,
      compiled_code:
        "\n\n\n\n\n\n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n\n\n\nwith deployers as (\n  \n  select\n    block_timestamp,\n    transaction_hash,\n    deployer_address,\n    contract_address,\n    'OPTIMISM' as network,\n  from `opensource-observer`.`oso`.`stg_optimism__deployers`\n   union all \n  select\n    block_timestamp,\n    transaction_hash,\n    deployer_address,\n    contract_address,\n    'BASE' as network,\n  from `opensource-observer`.`oso`.`stg_base__deployers`\n   union all \n  select\n    block_timestamp,\n    transaction_hash,\n    deployer_address,\n    contract_address,\n    'FRAX' as network,\n  from `opensource-observer`.`oso`.`stg_frax__deployers`\n   union all \n  select\n    block_timestamp,\n    transaction_hash,\n    deployer_address,\n    contract_address,\n    'METAL' as network,\n  from `opensource-observer`.`oso`.`stg_metal__deployers`\n   union all \n  select\n    block_timestamp,\n    transaction_hash,\n    deployer_address,\n    contract_address,\n    'MODE' as network,\n  from `opensource-observer`.`oso`.`stg_mode__deployers`\n   union all \n  select\n    block_timestamp,\n    transaction_hash,\n    deployer_address,\n    contract_address,\n    'ZORA' as network,\n  from `opensource-observer`.`oso`.`stg_zora__deployers`\n  \n)\n\nselect\n  block_timestamp,\n  transaction_hash,\n  deployer_address,\n  contract_address,\n  network\nfrom deployers",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_derived_contracts": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_derived_contracts",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_artifacts/int_derived_contracts.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_artifacts/int_derived_contracts.sql",
      unique_id: "model.opensource_observer.int_derived_contracts",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_artifacts",
        "int_derived_contracts",
      ],
      alias: "int_derived_contracts",
      checksum: {
        name: "sha256",
        checksum:
          "c7970881211789ccf464b8cc36496dd2ab686230fa0f49058282cbbcb04bcc0e",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.7861087,
      relation_name: "`opensource-observer`.`oso`.`int_derived_contracts`",
      raw_code:
        'with contracts_deployed_no_factory as (\n  select\n    network,\n    deployer_address,\n    contract_address\n  from {{ ref("int_deployers") }}\n  where contract_address is not null\n),\n\ncontracts_deployed_via_factory as (\n  {# \n    This gets all of the contracts deployed by any factory.\n\n    Deployer Address is the EOA address that started the transaction\n  #}\n  select\n    network,\n    originating_address as deployer_address,\n    contract_address as contract_address\n  from {{ ref("int_factories") }}\n  where contract_address is not null\n),\n\ncontracts_deployed_by_safe_or_known_proxy as (\n  {# \n    This gets all of the contracts deployed by a safe or other known proxy\n\n    Deployer address is a proxy (safe or other known proxy) that deployed the contract\n  #}\n  select\n    factories.network,\n    proxies.address as deployer_address,\n    factories.contract_address as contract_address\n  from {{ ref("int_factories") }} as factories\n  inner join {{ ref("int_proxies") }} as proxies\n    on\n      factories.originating_contract = proxies.address\n      and factories.network = proxies.network\n  where contract_address is not null\n),\n\nderived_contracts as (\n  select\n    network,\n    deployer_address,\n    contract_address\n  from contracts_deployed_no_factory\n\n  union all\n\n  select\n    network,\n    deployer_address,\n    contract_address\n  from contracts_deployed_via_factory\n\n  union all\n\n  select\n    network,\n    deployer_address,\n    contract_address\n  from contracts_deployed_by_safe_or_known_proxy\n)\n\nselect distinct\n  network,\n  deployer_address,\n  contract_address\nfrom derived_contracts',
      language: "sql",
      refs: [
        { name: "int_deployers", package: null, version: null },
        { name: "int_factories", package: null, version: null },
        { name: "int_factories", package: null, version: null },
        { name: "int_proxies", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_deployers",
          "model.opensource_observer.int_factories",
          "model.opensource_observer.int_proxies",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_artifacts/int_derived_contracts.sql",
      compiled: true,
      compiled_code:
        "with contracts_deployed_no_factory as (\n  select\n    network,\n    deployer_address,\n    contract_address\n  from `opensource-observer`.`oso`.`int_deployers`\n  where contract_address is not null\n),\n\ncontracts_deployed_via_factory as (\n  \n  select\n    network,\n    originating_address as deployer_address,\n    contract_address as contract_address\n  from `opensource-observer`.`oso`.`int_factories`\n  where contract_address is not null\n),\n\ncontracts_deployed_by_safe_or_known_proxy as (\n  \n  select\n    factories.network,\n    proxies.address as deployer_address,\n    factories.contract_address as contract_address\n  from `opensource-observer`.`oso`.`int_factories` as factories\n  inner join `opensource-observer`.`oso`.`int_proxies` as proxies\n    on\n      factories.originating_contract = proxies.address\n      and factories.network = proxies.network\n  where contract_address is not null\n),\n\nderived_contracts as (\n  select\n    network,\n    deployer_address,\n    contract_address\n  from contracts_deployed_no_factory\n\n  union all\n\n  select\n    network,\n    deployer_address,\n    contract_address\n  from contracts_deployed_via_factory\n\n  union all\n\n  select\n    network,\n    deployer_address,\n    contract_address\n  from contracts_deployed_by_safe_or_known_proxy\n)\n\nselect distinct\n  network,\n  deployer_address,\n  contract_address\nfrom derived_contracts",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_safes": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_safes",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_artifacts/int_safes.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_artifacts/int_safes.sql",
      unique_id: "model.opensource_observer.int_safes",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_artifacts",
        "int_safes",
      ],
      alias: "int_safes",
      checksum: {
        name: "sha256",
        checksum:
          "cd9897bbb863d8b24fab8f2bcf3f63bae951085013532a5c46d6ccb134db538f",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.788412,
      relation_name: "`opensource-observer`.`oso`.`int_safes`",
      raw_code:
        '{{\n  config(\n    materialized=\'table\'\n  )\n}}\n\n{% set networks = ["optimism", "base", "frax", "metal", "mode", "zora"] %}\n\n{% set union_queries = [] %}\n\n{% for network in networks %}\n  {% set table_name = "stg_" ~ network ~ "__proxies" %}\n  {% set network_upper = network.upper() %}\n\n  {% set query %}\n  select\n    lower(to_address) as `address`,\n    \'{{ network_upper }}\' as network,\n    min(block_timestamp) as created_date\n  from {{ ref(table_name) }}\n  where\n    proxy_type = "SAFE"\n    and proxy_address != to_address\n  group by to_address\n  {% endset %}\n\n  {% do union_queries.append(query) %}\n{% endfor %}\n\n{% set final_query = union_queries | join(\' union all \') %}\n\nwith safes as (\n  {{ final_query }}\n)\n\nselect\n  {{ oso_id("network", "address") }} as artifact_id,\n  address,\n  network,\n  created_date\nfrom safes',
      language: "sql",
      refs: [
        { name: "stg_optimism__proxies", package: null, version: null },
        { name: "stg_base__proxies", package: null, version: null },
        { name: "stg_frax__proxies", package: null, version: null },
        { name: "stg_metal__proxies", package: null, version: null },
        { name: "stg_mode__proxies", package: null, version: null },
        { name: "stg_zora__proxies", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.oso_id"],
        nodes: [
          "model.opensource_observer.stg_optimism__proxies",
          "model.opensource_observer.stg_base__proxies",
          "model.opensource_observer.stg_frax__proxies",
          "model.opensource_observer.stg_metal__proxies",
          "model.opensource_observer.stg_mode__proxies",
          "model.opensource_observer.stg_zora__proxies",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_artifacts/int_safes.sql",
      compiled: true,
      compiled_code:
        "\n\n\n\n\n\n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n\n\n\nwith safes as (\n  \n  select\n    lower(to_address) as `address`,\n    'OPTIMISM' as network,\n    min(block_timestamp) as created_date\n  from `opensource-observer`.`oso`.`stg_optimism__proxies`\n  where\n    proxy_type = \"SAFE\"\n    and proxy_address != to_address\n  group by to_address\n   union all \n  select\n    lower(to_address) as `address`,\n    'BASE' as network,\n    min(block_timestamp) as created_date\n  from `opensource-observer`.`oso`.`stg_base__proxies`\n  where\n    proxy_type = \"SAFE\"\n    and proxy_address != to_address\n  group by to_address\n   union all \n  select\n    lower(to_address) as `address`,\n    'FRAX' as network,\n    min(block_timestamp) as created_date\n  from `opensource-observer`.`oso`.`stg_frax__proxies`\n  where\n    proxy_type = \"SAFE\"\n    and proxy_address != to_address\n  group by to_address\n   union all \n  select\n    lower(to_address) as `address`,\n    'METAL' as network,\n    min(block_timestamp) as created_date\n  from `opensource-observer`.`oso`.`stg_metal__proxies`\n  where\n    proxy_type = \"SAFE\"\n    and proxy_address != to_address\n  group by to_address\n   union all \n  select\n    lower(to_address) as `address`,\n    'MODE' as network,\n    min(block_timestamp) as created_date\n  from `opensource-observer`.`oso`.`stg_mode__proxies`\n  where\n    proxy_type = \"SAFE\"\n    and proxy_address != to_address\n  group by to_address\n   union all \n  select\n    lower(to_address) as `address`,\n    'ZORA' as network,\n    min(block_timestamp) as created_date\n  from `opensource-observer`.`oso`.`stg_zora__proxies`\n  where\n    proxy_type = \"SAFE\"\n    and proxy_address != to_address\n  group by to_address\n  \n)\n\nselect\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(network, address))), '+', '-'), '/', '_') as artifact_id,\n  address,\n  network,\n  created_date\nfrom safes",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_factories": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_factories",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_artifacts/int_factories.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_artifacts/int_factories.sql",
      unique_id: "model.opensource_observer.int_factories",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_artifacts",
        "int_factories",
      ],
      alias: "int_factories",
      checksum: {
        name: "sha256",
        checksum:
          "fe5123a963da7e093742afc677f2c788a554a46917396073b1d69a8bd7130dcf",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "table" },
      created_at: 1719978675.7970393,
      relation_name: "`opensource-observer`.`oso`.`int_factories`",
      raw_code:
        '{{\n  config(\n    materialized=\'table\'\n  )\n}}\n\n{% set networks = ["optimism", "base", "frax", "metal", "mode", "zora"] %}\n\n{% set union_queries = [] %}\n\n{% for network in networks %}\n  {% set table_name = "stg_" ~ network ~ "__factories" %}\n  {% set network_upper = network.upper() %}\n\n  {% set query %}\n  select\n    block_timestamp,\n    transaction_hash,\n    originating_address,\n    originating_contract,\n    factory_address,\n    contract_address,\n    \'{{ network_upper }}\' as network,\n  from {{ ref(table_name) }}\n  {% endset %}\n\n  {% do union_queries.append(query) %}\n{% endfor %}\n\n{% set final_query = union_queries | join(\' union all \') %}\n\nwith factories as (\n  {{ final_query }}\n)\n\nselect\n  block_timestamp,\n  transaction_hash,\n  originating_address,\n  originating_contract,\n  factory_address,\n  contract_address,\n  network\nfrom factories',
      language: "sql",
      refs: [
        { name: "stg_optimism__factories", package: null, version: null },
        { name: "stg_base__factories", package: null, version: null },
        { name: "stg_frax__factories", package: null, version: null },
        { name: "stg_metal__factories", package: null, version: null },
        { name: "stg_mode__factories", package: null, version: null },
        { name: "stg_zora__factories", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.stg_optimism__factories",
          "model.opensource_observer.stg_base__factories",
          "model.opensource_observer.stg_frax__factories",
          "model.opensource_observer.stg_metal__factories",
          "model.opensource_observer.stg_mode__factories",
          "model.opensource_observer.stg_zora__factories",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_artifacts/int_factories.sql",
      compiled: true,
      compiled_code:
        "\n\n\n\n\n\n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n\n\n\nwith factories as (\n  \n  select\n    block_timestamp,\n    transaction_hash,\n    originating_address,\n    originating_contract,\n    factory_address,\n    contract_address,\n    'OPTIMISM' as network,\n  from `opensource-observer`.`oso`.`stg_optimism__factories`\n   union all \n  select\n    block_timestamp,\n    transaction_hash,\n    originating_address,\n    originating_contract,\n    factory_address,\n    contract_address,\n    'BASE' as network,\n  from `opensource-observer`.`oso`.`stg_base__factories`\n   union all \n  select\n    block_timestamp,\n    transaction_hash,\n    originating_address,\n    originating_contract,\n    factory_address,\n    contract_address,\n    'FRAX' as network,\n  from `opensource-observer`.`oso`.`stg_frax__factories`\n   union all \n  select\n    block_timestamp,\n    transaction_hash,\n    originating_address,\n    originating_contract,\n    factory_address,\n    contract_address,\n    'METAL' as network,\n  from `opensource-observer`.`oso`.`stg_metal__factories`\n   union all \n  select\n    block_timestamp,\n    transaction_hash,\n    originating_address,\n    originating_contract,\n    factory_address,\n    contract_address,\n    'MODE' as network,\n  from `opensource-observer`.`oso`.`stg_mode__factories`\n   union all \n  select\n    block_timestamp,\n    transaction_hash,\n    originating_address,\n    originating_contract,\n    factory_address,\n    contract_address,\n    'ZORA' as network,\n  from `opensource-observer`.`oso`.`stg_zora__factories`\n  \n)\n\nselect\n  block_timestamp,\n  transaction_hash,\n  originating_address,\n  originating_contract,\n  factory_address,\n  contract_address,\n  network\nfrom factories",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_proxies": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_proxies",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/blockchain_artifacts/int_proxies.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/blockchain_artifacts/int_proxies.sql",
      unique_id: "model.opensource_observer.int_proxies",
      fqn: [
        "opensource_observer",
        "intermediate",
        "blockchain_artifacts",
        "int_proxies",
      ],
      alias: "int_proxies",
      checksum: {
        name: "sha256",
        checksum:
          "d06532634f10151658376bb087b3183c3c7456b01f450b276f677c66880c579c",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.8039248,
      relation_name: "`opensource-observer`.`oso`.`int_proxies`",
      raw_code:
        '{# any from address coming out of a proxy #}\n\n{% set networks = ["optimism", "base", "frax", "metal", "mode", "zora"] %}\n\n{% set union_queries = [] %}\n\n{% for network in networks %}\n  {% set table_name = "stg_" ~ network ~ "__proxies" %}\n  {% set network_upper = network.upper() %}\n\n  {% set query %}\n  select\n    lower(to_address) as `address`,\n    lower(proxy_address) as proxy_address,\n    \'{{ network_upper }}\' as network,\n    min(block_timestamp) as created_date\n  from {{ ref(table_name) }}\n  where proxy_address != to_address\n  group by\n    to_address,\n    proxy_address\n  {% endset %}\n\n  {% do union_queries.append(query) %}\n{% endfor %}\n\n{% set final_query = union_queries | join(\' union all \') %}\n\nwith proxies as (\n  {{ final_query }}\n)\n\nselect\n  {{ oso_id("network", "address") }} as artifact_id,\n  address,\n  proxy_address,\n  network,\n  created_date\nfrom proxies',
      language: "sql",
      refs: [
        { name: "stg_optimism__proxies", package: null, version: null },
        { name: "stg_base__proxies", package: null, version: null },
        { name: "stg_frax__proxies", package: null, version: null },
        { name: "stg_metal__proxies", package: null, version: null },
        { name: "stg_mode__proxies", package: null, version: null },
        { name: "stg_zora__proxies", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.oso_id"],
        nodes: [
          "model.opensource_observer.stg_optimism__proxies",
          "model.opensource_observer.stg_base__proxies",
          "model.opensource_observer.stg_frax__proxies",
          "model.opensource_observer.stg_metal__proxies",
          "model.opensource_observer.stg_mode__proxies",
          "model.opensource_observer.stg_zora__proxies",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/blockchain_artifacts/int_proxies.sql",
      compiled: true,
      compiled_code:
        "\n\n\n\n\n\n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n\n\n\nwith proxies as (\n  \n  select\n    lower(to_address) as `address`,\n    lower(proxy_address) as proxy_address,\n    'OPTIMISM' as network,\n    min(block_timestamp) as created_date\n  from `opensource-observer`.`oso`.`stg_optimism__proxies`\n  where proxy_address != to_address\n  group by\n    to_address,\n    proxy_address\n   union all \n  select\n    lower(to_address) as `address`,\n    lower(proxy_address) as proxy_address,\n    'BASE' as network,\n    min(block_timestamp) as created_date\n  from `opensource-observer`.`oso`.`stg_base__proxies`\n  where proxy_address != to_address\n  group by\n    to_address,\n    proxy_address\n   union all \n  select\n    lower(to_address) as `address`,\n    lower(proxy_address) as proxy_address,\n    'FRAX' as network,\n    min(block_timestamp) as created_date\n  from `opensource-observer`.`oso`.`stg_frax__proxies`\n  where proxy_address != to_address\n  group by\n    to_address,\n    proxy_address\n   union all \n  select\n    lower(to_address) as `address`,\n    lower(proxy_address) as proxy_address,\n    'METAL' as network,\n    min(block_timestamp) as created_date\n  from `opensource-observer`.`oso`.`stg_metal__proxies`\n  where proxy_address != to_address\n  group by\n    to_address,\n    proxy_address\n   union all \n  select\n    lower(to_address) as `address`,\n    lower(proxy_address) as proxy_address,\n    'MODE' as network,\n    min(block_timestamp) as created_date\n  from `opensource-observer`.`oso`.`stg_mode__proxies`\n  where proxy_address != to_address\n  group by\n    to_address,\n    proxy_address\n   union all \n  select\n    lower(to_address) as `address`,\n    lower(proxy_address) as proxy_address,\n    'ZORA' as network,\n    min(block_timestamp) as created_date\n  from `opensource-observer`.`oso`.`stg_zora__proxies`\n  where proxy_address != to_address\n  group by\n    to_address,\n    proxy_address\n  \n)\n\nselect\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(network, address))), '+', '-'), '/', '_') as artifact_id,\n  address,\n  proxy_address,\n  network,\n  created_date\nfrom proxies",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_active_addresses_daily_to_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_active_addresses_daily_to_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/users/int_active_addresses_daily_to_project.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/users/int_active_addresses_daily_to_project.sql",
      unique_id:
        "model.opensource_observer.int_active_addresses_daily_to_project",
      fqn: [
        "opensource_observer",
        "intermediate",
        "users",
        "int_active_addresses_daily_to_project",
      ],
      alias: "int_active_addresses_daily_to_project",
      checksum: {
        name: "sha256",
        checksum:
          "6f77db0b57e5be38aa81a525a52add8f1f9ac631ca39b50226406839c05355f3",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.8109055,
      relation_name:
        "`opensource-observer`.`oso`.`int_active_addresses_daily_to_project`",
      raw_code:
        "{#\n  Daily active addresses to project by network\n#}\n\nselect\n  int_addresses_daily_activity.project_id,\n  int_artifacts.artifact_source,\n  int_addresses_daily_activity.bucket_day,\n  int_addresses_daily_activity.address_type,\n  COUNT(distinct int_addresses_daily_activity.from_artifact_id) as amount\nfrom {{ ref('int_addresses_daily_activity') }}\nleft join {{ ref('int_artifacts') }}\n  on int_addresses_daily_activity.from_artifact_id = int_artifacts.artifact_id\ngroup by\n  int_addresses_daily_activity.project_id,\n  int_artifacts.artifact_source,\n  int_addresses_daily_activity.bucket_day,\n  int_addresses_daily_activity.address_type",
      language: "sql",
      refs: [
        { name: "int_addresses_daily_activity", package: null, version: null },
        { name: "int_artifacts", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_addresses_daily_activity",
          "model.opensource_observer.int_artifacts",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/users/int_active_addresses_daily_to_project.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  int_addresses_daily_activity.project_id,\n  int_artifacts.artifact_source,\n  int_addresses_daily_activity.bucket_day,\n  int_addresses_daily_activity.address_type,\n  COUNT(distinct int_addresses_daily_activity.from_artifact_id) as amount\nfrom `opensource-observer`.`oso`.`int_addresses_daily_activity`\nleft join `opensource-observer`.`oso`.`int_artifacts`\n  on int_addresses_daily_activity.from_artifact_id = int_artifacts.artifact_id\ngroup by\n  int_addresses_daily_activity.project_id,\n  int_artifacts.artifact_source,\n  int_addresses_daily_activity.bucket_day,\n  int_addresses_daily_activity.address_type",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_active_addresses_monthly_to_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_active_addresses_monthly_to_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/users/int_active_addresses_monthly_to_project.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/users/int_active_addresses_monthly_to_project.sql",
      unique_id:
        "model.opensource_observer.int_active_addresses_monthly_to_project",
      fqn: [
        "opensource_observer",
        "intermediate",
        "users",
        "int_active_addresses_monthly_to_project",
      ],
      alias: "int_active_addresses_monthly_to_project",
      checksum: {
        name: "sha256",
        checksum:
          "a93a96355af675bcc0a5a36b3a67abb2fff033a686536326bc7f7a0f708260a5",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.8131418,
      relation_name:
        "`opensource-observer`.`oso`.`int_active_addresses_monthly_to_project`",
      raw_code:
        "{#\n  Monthly active addresses to project by network\n#}\n\n\nwith activity as (\n  select\n    project_id,\n    event_source,\n    from_artifact_id,\n    DATE_TRUNC(bucket_day, month) as bucket_month,\n    (address_type = 'NEW') as is_new_user\n  from {{ ref('int_addresses_daily_activity') }}\n),\n\nactivity_monthly as (\n  select\n    project_id,\n    event_source,\n    from_artifact_id,\n    bucket_month,\n    MAX(is_new_user) as is_new_user\n  from activity\n  group by\n    project_id,\n    event_source,\n    from_artifact_id,\n    bucket_month\n),\n\nuser_classification as (\n  select\n    project_id,\n    event_source,\n    bucket_month,\n    from_artifact_id,\n    case\n      when is_new_user then 'NEW'\n      else 'RETURNING'\n    end as user_type\n  from activity_monthly\n)\n\nselect\n  project_id,\n  event_source,\n  bucket_month,\n  user_type,\n  COUNT(distinct from_artifact_id) as amount\nfrom user_classification\ngroup by\n  project_id,\n  event_source,\n  bucket_month,\n  user_type",
      language: "sql",
      refs: [
        { name: "int_addresses_daily_activity", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_addresses_daily_activity"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/users/int_active_addresses_monthly_to_project.sql",
      compiled: true,
      compiled_code:
        "\n\n\nwith activity as (\n  select\n    project_id,\n    event_source,\n    from_artifact_id,\n    DATE_TRUNC(bucket_day, month) as bucket_month,\n    (address_type = 'NEW') as is_new_user\n  from `opensource-observer`.`oso`.`int_addresses_daily_activity`\n),\n\nactivity_monthly as (\n  select\n    project_id,\n    event_source,\n    from_artifact_id,\n    bucket_month,\n    MAX(is_new_user) as is_new_user\n  from activity\n  group by\n    project_id,\n    event_source,\n    from_artifact_id,\n    bucket_month\n),\n\nuser_classification as (\n  select\n    project_id,\n    event_source,\n    bucket_month,\n    from_artifact_id,\n    case\n      when is_new_user then 'NEW'\n      else 'RETURNING'\n    end as user_type\n  from activity_monthly\n)\n\nselect\n  project_id,\n  event_source,\n  bucket_month,\n  user_type,\n  COUNT(distinct from_artifact_id) as amount\nfrom user_classification\ngroup by\n  project_id,\n  event_source,\n  bucket_month,\n  user_type",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_address_totals_by_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_address_totals_by_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/users/int_address_totals_by_project.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/users/int_address_totals_by_project.sql",
      unique_id: "model.opensource_observer.int_address_totals_by_project",
      fqn: [
        "opensource_observer",
        "intermediate",
        "users",
        "int_address_totals_by_project",
      ],
      alias: "int_address_totals_by_project",
      checksum: {
        name: "sha256",
        checksum:
          "066e5cd54a38cd0630b29835bbbe351c4fe84c162b6887f3f414cb35eadc4440",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.8151393,
      relation_name:
        "`opensource-observer`.`oso`.`int_address_totals_by_project`",
      raw_code:
        "{#\n  This model calculates the total amount of address types for each project and namespace\n  for different time intervals. The time intervals are defined in the `time_intervals` table.\n  The `aggregated_data` CTE calculates the total amount of events for each project and namespace\n  for each time interval. The final select statement calculates the total amount of events\n  for each project and namespace for each event type and time interval, creating a normalized\n  table of impact metrics.\n#}\n\n\n{% set activity_thresh = 10 %}\n\nwith user_data as (\n  select\n    int_addresses_daily_activity.project_id,\n    int_addresses_daily_activity.event_source,\n    int_addresses_daily_activity.from_artifact_id,\n    int_addresses_daily_activity.address_type,\n    int_addresses_daily_activity.amount,\n    int_time_intervals.time_interval,\n    int_time_intervals.start_date,\n    int_addresses_daily_activity.bucket_day\n  from {{ ref('int_addresses_daily_activity') }}\n  left join {{ ref('int_addresses_to_project') }}\n    on\n      int_addresses_daily_activity.from_artifact_id\n      = int_addresses_to_project.artifact_id\n      and int_addresses_daily_activity.project_id\n      = int_addresses_to_project.project_id\n  cross join {{ ref('int_time_intervals') }}\n),\n\nuser_status as (\n  select\n    project_id,\n    event_source,\n    time_interval,\n    from_artifact_id,\n    amount,\n    case\n      when bucket_day >= start_date then address_type\n      else 'INACTIVE'\n    end as address_status\n  from user_data\n),\n\nuser_activity_levels as (\n  select\n    project_id,\n    event_source,\n    time_interval,\n    from_artifact_id,\n    case\n      when SUM(amount) >= {{ activity_thresh }} then 'HIGH_ACTIVITY'\n      when\n        SUM(amount) > 1\n        and SUM(amount) < {{ activity_thresh }}\n        then 'MEDIUM_ACTIVITY'\n      else 'LOW_ACTIVITY'\n    end as activity_level\n  from user_status\n  where address_status != 'INACTIVE'\n  group by\n    project_id,\n    event_source,\n    time_interval,\n    from_artifact_id\n),\n\nfinal_users as (\n  select\n    project_id,\n    event_source,\n    time_interval,\n    CONCAT(address_status, '_ADDRESSES') as impact_metric,\n    COUNT(distinct from_artifact_id) as amount\n  from user_status\n  group by\n    project_id,\n    event_source,\n    time_interval,\n    address_status\n  union all\n  select\n    project_id,\n    event_source,\n    time_interval,\n    CONCAT(activity_level, '_ADDRESSES') as impact_metric,\n    COUNT(distinct from_artifact_id) as amount\n  from user_activity_levels\n  group by\n    project_id,\n    event_source,\n    time_interval,\n    activity_level\n)\n\nselect\n  project_id,\n  event_source,\n  time_interval,\n  impact_metric,\n  amount\nfrom final_users",
      language: "sql",
      refs: [
        { name: "int_addresses_daily_activity", package: null, version: null },
        { name: "int_addresses_to_project", package: null, version: null },
        { name: "int_time_intervals", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_addresses_daily_activity",
          "model.opensource_observer.int_addresses_to_project",
          "model.opensource_observer.int_time_intervals",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/users/int_address_totals_by_project.sql",
      compiled: true,
      compiled_code:
        "\n\n\n\n\nwith user_data as (\n  select\n    int_addresses_daily_activity.project_id,\n    int_addresses_daily_activity.event_source,\n    int_addresses_daily_activity.from_artifact_id,\n    int_addresses_daily_activity.address_type,\n    int_addresses_daily_activity.amount,\n    int_time_intervals.time_interval,\n    int_time_intervals.start_date,\n    int_addresses_daily_activity.bucket_day\n  from `opensource-observer`.`oso`.`int_addresses_daily_activity`\n  left join `opensource-observer`.`oso`.`int_addresses_to_project`\n    on\n      int_addresses_daily_activity.from_artifact_id\n      = int_addresses_to_project.artifact_id\n      and int_addresses_daily_activity.project_id\n      = int_addresses_to_project.project_id\n  cross join `opensource-observer`.`oso`.`int_time_intervals`\n),\n\nuser_status as (\n  select\n    project_id,\n    event_source,\n    time_interval,\n    from_artifact_id,\n    amount,\n    case\n      when bucket_day >= start_date then address_type\n      else 'INACTIVE'\n    end as address_status\n  from user_data\n),\n\nuser_activity_levels as (\n  select\n    project_id,\n    event_source,\n    time_interval,\n    from_artifact_id,\n    case\n      when SUM(amount) >= 10 then 'HIGH_ACTIVITY'\n      when\n        SUM(amount) > 1\n        and SUM(amount) < 10\n        then 'MEDIUM_ACTIVITY'\n      else 'LOW_ACTIVITY'\n    end as activity_level\n  from user_status\n  where address_status != 'INACTIVE'\n  group by\n    project_id,\n    event_source,\n    time_interval,\n    from_artifact_id\n),\n\nfinal_users as (\n  select\n    project_id,\n    event_source,\n    time_interval,\n    CONCAT(address_status, '_ADDRESSES') as impact_metric,\n    COUNT(distinct from_artifact_id) as amount\n  from user_status\n  group by\n    project_id,\n    event_source,\n    time_interval,\n    address_status\n  union all\n  select\n    project_id,\n    event_source,\n    time_interval,\n    CONCAT(activity_level, '_ADDRESSES') as impact_metric,\n    COUNT(distinct from_artifact_id) as amount\n  from user_activity_levels\n  group by\n    project_id,\n    event_source,\n    time_interval,\n    activity_level\n)\n\nselect\n  project_id,\n  event_source,\n  time_interval,\n  impact_metric,\n  amount\nfrom final_users",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_user_addresses": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_user_addresses",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/users/int_user_addresses.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/users/int_user_addresses.sql",
      unique_id: "model.opensource_observer.int_user_addresses",
      fqn: [
        "opensource_observer",
        "intermediate",
        "users",
        "int_user_addresses",
      ],
      alias: "int_user_addresses",
      checksum: {
        name: "sha256",
        checksum:
          "688a07f5739a741007bfa7da10aaeec4d4909dca97d8bb07959341b86f95ce3a",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.8201694,
      relation_name: "`opensource-observer`.`oso`.`int_user_addresses`",
      raw_code:
        "{# \n  This model is a WIP and is not yet ready for production use.\n#}\n\nwith user_data as (\n  select\n    artifact_id,\n    MAX(rfm_recency) as r,\n    MAX(rfm_frequency) as f,\n    MAX(rfm_ecosystem) as e\n  from {{ ref('int_address_rfm_segments_by_project') }}\n  group by artifact_id\n)\n\nselect\n  artifact_id as user_id,\n  (r > 2 and f > 2 and e > 2) as is_trusted\nfrom user_data",
      language: "sql",
      refs: [
        {
          name: "int_address_rfm_segments_by_project",
          package: null,
          version: null,
        },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_address_rfm_segments_by_project",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/users/int_user_addresses.sql",
      compiled: true,
      compiled_code:
        "\n\nwith user_data as (\n  select\n    artifact_id,\n    MAX(rfm_recency) as r,\n    MAX(rfm_frequency) as f,\n    MAX(rfm_ecosystem) as e\n  from `opensource-observer`.`oso`.`int_address_rfm_segments_by_project`\n  group by artifact_id\n)\n\nselect\n  artifact_id as user_id,\n  (r > 2 and f > 2 and e > 2) as is_trusted\nfrom user_data",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_contributors_to_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_contributors_to_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/users/int_contributors_to_project.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/users/int_contributors_to_project.sql",
      unique_id: "model.opensource_observer.int_contributors_to_project",
      fqn: [
        "opensource_observer",
        "intermediate",
        "users",
        "int_contributors_to_project",
      ],
      alias: "int_contributors_to_project",
      checksum: {
        name: "sha256",
        checksum:
          "ce319f6c540ffb5ad7bd5b6e187fc4593b6c0ea00fd34d9204d0b8dd9143bd16",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.8223171,
      relation_name:
        "`opensource-observer`.`oso`.`int_contributors_to_project`",
      raw_code:
        "{# \n  Contributor stats by project and event type\n#}\n\nselect\n  from_artifact_id as artifact_id,\n  project_id,\n  event_type,\n  MIN(time) as first_contribution_time,\n  MAX(time) as last_contribution_time,\n  SUM(amount) as contribution_count\nfrom {{ ref('int_events_to_project') }}\nwhere\n  event_type in (\n    'COMMIT_CODE',\n    'PULL_REQUEST_OPENED',\n    'PULL_REQUEST_REOPENED',\n    'PULL_REQUEST_CLOSED',\n    'PULL_REQUEST_MERGED',\n    'ISSUE_CLOSED',\n    'ISSUE_OPENED',\n    'ISSUE_REOPENED'\n  )\ngroup by\n  from_artifact_id,\n  project_id,\n  event_type",
      language: "sql",
      refs: [{ name: "int_events_to_project", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_events_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/users/int_contributors_to_project.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  from_artifact_id as artifact_id,\n  project_id,\n  event_type,\n  MIN(time) as first_contribution_time,\n  MAX(time) as last_contribution_time,\n  SUM(amount) as contribution_count\nfrom `opensource-observer`.`oso`.`int_events_to_project`\nwhere\n  event_type in (\n    'COMMIT_CODE',\n    'PULL_REQUEST_OPENED',\n    'PULL_REQUEST_REOPENED',\n    'PULL_REQUEST_CLOSED',\n    'PULL_REQUEST_MERGED',\n    'ISSUE_CLOSED',\n    'ISSUE_OPENED',\n    'ISSUE_REOPENED'\n  )\ngroup by\n  from_artifact_id,\n  project_id,\n  event_type",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_address_rfm_segments_by_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_address_rfm_segments_by_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/users/int_address_rfm_segments_by_project.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/users/int_address_rfm_segments_by_project.sql",
      unique_id:
        "model.opensource_observer.int_address_rfm_segments_by_project",
      fqn: [
        "opensource_observer",
        "intermediate",
        "users",
        "int_address_rfm_segments_by_project",
      ],
      alias: "int_address_rfm_segments_by_project",
      checksum: {
        name: "sha256",
        checksum:
          "84d8c151bff9590c39ae4102bb00e20b1a0a29f124a3bb9e461d548ab08c0708",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.8243022,
      relation_name:
        "`opensource-observer`.`oso`.`int_address_rfm_segments_by_project`",
      raw_code:
        "{# \n  Onchain address segementation using the RFM model.\n  \n  RFM stands for Recency, Frequency, and Monetary Value.\n  In this version, we adapt the M to represent the \n  number of projects a user has interacted with.\n  \n  We will consider the following metrics:\n  - Recency: Days since last activity\n  - Frequency: Total activity\n  - Monetary Value: Project count\n  \n  We will then assign a segment to each user based on these\n  metrics.\n#}\n\nwith user_history as (\n  select\n    artifact_id,\n    project_id,\n    transaction_count,\n    DATE_DIFF(CURRENT_TIMESTAMP(), last_transaction_time, day)\n      as days_since_last_activity\n  from {{ ref('int_addresses_to_project') }}\n),\n\nuser_stats as (\n  select\n    artifact_id,\n    project_id,\n    transaction_count,\n    days_since_last_activity,\n    COUNT(distinct project_id) as project_count\n  from user_history\n  group by\n    artifact_id,\n    project_id,\n    transaction_count,\n    days_since_last_activity\n),\n\nrfm_components as (\n  select\n    artifact_id,\n    project_id,\n    case\n      when days_since_last_activity < 7 then 5\n      when days_since_last_activity < 30 then 4\n      when days_since_last_activity < 90 then 3\n      when days_since_last_activity < 180 then 2\n      else 1\n    end as rfm_recency,\n    case\n      when transaction_count = 1 then 1\n      when transaction_count < 10 then 2\n      when transaction_count < 100 then 3\n      when transaction_count < 1000 then 4\n      else 5\n    end as rfm_frequency,\n    case\n      when project_count = 1 then 1\n      when project_count <= 3 then 2\n      when project_count <= 10 then 3\n      when project_count <= 30 then 4\n      else 5\n    end as rfm_ecosystem\n  from user_stats\n)\n\nselect\n  artifact_id,\n  project_id,\n  rfm_recency,\n  rfm_frequency,\n  rfm_ecosystem,\n  case\n    when rfm_frequency = 5\n      then\n        case\n          when rfm_recency = 5 then 'Power'\n          when rfm_recency = 4 then 'Loyal'\n          when rfm_recency = 3 then 'At risk'\n          else 'Churned'\n        end\n    when rfm_frequency = 4\n      then\n        case\n          when rfm_recency >= 4 then 'Loyal'\n          when rfm_recency = 3 then 'At risk'\n          else 'Churned'\n        end\n    when rfm_frequency = 3\n      then\n        case\n          when rfm_recency >= 4 then 'Promising'\n          when rfm_recency = 3 then 'Needs attention'\n          else 'Tourist'\n        end\n    when rfm_frequency = 2\n      then\n        case\n          when rfm_recency >= 4 then 'Noob'\n          else 'Tourist'\n        end\n    when rfm_frequency = 1 then\n      case\n        when rfm_recency >= 3 then 'Noob'\n        else 'One and done'\n      end\n  end as user_segment\nfrom rfm_components",
      language: "sql",
      refs: [
        { name: "int_addresses_to_project", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_addresses_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/users/int_address_rfm_segments_by_project.sql",
      compiled: true,
      compiled_code:
        "\n\nwith user_history as (\n  select\n    artifact_id,\n    project_id,\n    transaction_count,\n    DATE_DIFF(CURRENT_TIMESTAMP(), last_transaction_time, day)\n      as days_since_last_activity\n  from `opensource-observer`.`oso`.`int_addresses_to_project`\n),\n\nuser_stats as (\n  select\n    artifact_id,\n    project_id,\n    transaction_count,\n    days_since_last_activity,\n    COUNT(distinct project_id) as project_count\n  from user_history\n  group by\n    artifact_id,\n    project_id,\n    transaction_count,\n    days_since_last_activity\n),\n\nrfm_components as (\n  select\n    artifact_id,\n    project_id,\n    case\n      when days_since_last_activity < 7 then 5\n      when days_since_last_activity < 30 then 4\n      when days_since_last_activity < 90 then 3\n      when days_since_last_activity < 180 then 2\n      else 1\n    end as rfm_recency,\n    case\n      when transaction_count = 1 then 1\n      when transaction_count < 10 then 2\n      when transaction_count < 100 then 3\n      when transaction_count < 1000 then 4\n      else 5\n    end as rfm_frequency,\n    case\n      when project_count = 1 then 1\n      when project_count <= 3 then 2\n      when project_count <= 10 then 3\n      when project_count <= 30 then 4\n      else 5\n    end as rfm_ecosystem\n  from user_stats\n)\n\nselect\n  artifact_id,\n  project_id,\n  rfm_recency,\n  rfm_frequency,\n  rfm_ecosystem,\n  case\n    when rfm_frequency = 5\n      then\n        case\n          when rfm_recency = 5 then 'Power'\n          when rfm_recency = 4 then 'Loyal'\n          when rfm_recency = 3 then 'At risk'\n          else 'Churned'\n        end\n    when rfm_frequency = 4\n      then\n        case\n          when rfm_recency >= 4 then 'Loyal'\n          when rfm_recency = 3 then 'At risk'\n          else 'Churned'\n        end\n    when rfm_frequency = 3\n      then\n        case\n          when rfm_recency >= 4 then 'Promising'\n          when rfm_recency = 3 then 'Needs attention'\n          else 'Tourist'\n        end\n    when rfm_frequency = 2\n      then\n        case\n          when rfm_recency >= 4 then 'Noob'\n          else 'Tourist'\n        end\n    when rfm_frequency = 1 then\n      case\n        when rfm_recency >= 3 then 'Noob'\n        else 'One and done'\n      end\n  end as user_segment\nfrom rfm_components",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_addresses_daily_activity": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_addresses_daily_activity",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/users/int_addresses_daily_activity.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/users/int_addresses_daily_activity.sql",
      unique_id: "model.opensource_observer.int_addresses_daily_activity",
      fqn: [
        "opensource_observer",
        "intermediate",
        "users",
        "int_addresses_daily_activity",
      ],
      alias: "int_addresses_daily_activity",
      checksum: {
        name: "sha256",
        checksum:
          "c36279a2bc7abf73a6020ee0accc441eaba7efa5ac0d386f48d7ccbcb9038c2b",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.8262823,
      relation_name:
        "`opensource-observer`.`oso`.`int_addresses_daily_activity`",
      raw_code:
        "{# \n  Address stats by project and network\n#}\n\nselect\n  int_events_to_project.project_id,\n  int_events_to_project.from_artifact_id,\n  int_events_to_project.event_source,\n  int_events_to_project.amount,\n  DATE_TRUNC(int_events_to_project.time, day) as bucket_day,\n  case\n    when\n      int_events_to_project.time\n      = int_addresses_to_project.first_transaction_time\n      then 'NEW'\n    else 'RETURNING'\n  end as address_type\nfrom {{ ref('int_events_to_project') }}\nleft join {{ ref('int_addresses_to_project') }}\n  on\n    int_events_to_project.from_artifact_id\n    = int_addresses_to_project.artifact_id\n    and int_events_to_project.project_id = int_addresses_to_project.project_id\nwhere\n  int_events_to_project.event_type = 'CONTRACT_INVOCATION_DAILY_COUNT'",
      language: "sql",
      refs: [
        { name: "int_events_to_project", package: null, version: null },
        { name: "int_addresses_to_project", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_events_to_project",
          "model.opensource_observer.int_addresses_to_project",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/users/int_addresses_daily_activity.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  int_events_to_project.project_id,\n  int_events_to_project.from_artifact_id,\n  int_events_to_project.event_source,\n  int_events_to_project.amount,\n  DATE_TRUNC(int_events_to_project.time, day) as bucket_day,\n  case\n    when\n      int_events_to_project.time\n      = int_addresses_to_project.first_transaction_time\n      then 'NEW'\n    else 'RETURNING'\n  end as address_type\nfrom `opensource-observer`.`oso`.`int_events_to_project`\nleft join `opensource-observer`.`oso`.`int_addresses_to_project`\n  on\n    int_events_to_project.from_artifact_id\n    = int_addresses_to_project.artifact_id\n    and int_events_to_project.project_id = int_addresses_to_project.project_id\nwhere\n  int_events_to_project.event_type = 'CONTRACT_INVOCATION_DAILY_COUNT'",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_addresses_to_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_addresses_to_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/users/int_addresses_to_project.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/users/int_addresses_to_project.sql",
      unique_id: "model.opensource_observer.int_addresses_to_project",
      fqn: [
        "opensource_observer",
        "intermediate",
        "users",
        "int_addresses_to_project",
      ],
      alias: "int_addresses_to_project",
      checksum: {
        name: "sha256",
        checksum:
          "ff0d1f0557bfab90b1d8c3be6d4882d9b5d8ae0b8bcc2c626c36069be2985091",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.828484,
      relation_name: "`opensource-observer`.`oso`.`int_addresses_to_project`",
      raw_code:
        "{# \n  Address stats by project\n#}\n\nselect\n  from_artifact_id as artifact_id,\n  project_id,\n  event_type,\n  MIN(time) as first_transaction_time,\n  MAX(time) as last_transaction_time,\n  SUM(amount) as transaction_count\nfrom {{ ref('int_events_to_project') }}\nwhere\n  event_type in (\n    'CONTRACT_INVOCATION_DAILY_COUNT'\n  )\ngroup by\n  from_artifact_id,\n  project_id,\n  event_type",
      language: "sql",
      refs: [{ name: "int_events_to_project", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_events_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/users/int_addresses_to_project.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  from_artifact_id as artifact_id,\n  project_id,\n  event_type,\n  MIN(time) as first_transaction_time,\n  MAX(time) as last_transaction_time,\n  SUM(amount) as transaction_count\nfrom `opensource-observer`.`oso`.`int_events_to_project`\nwhere\n  event_type in (\n    'CONTRACT_INVOCATION_DAILY_COUNT'\n  )\ngroup by\n  from_artifact_id,\n  project_id,\n  event_type",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_events": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_events",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/events/int_events.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/events/int_events.sql",
      unique_id: "model.opensource_observer.int_events",
      fqn: ["opensource_observer", "intermediate", "events", "int_events"],
      alias: "int_events",
      checksum: {
        name: "sha256",
        checksum:
          "4573a4a300e0747024ee99cee146c85c615b284b428b26a170593f076d74b661",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "time",
          data_type: "timestamp",
          granularity: "day",
        },
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "table",
        partition_by: {
          field: "time",
          data_type: "timestamp",
          granularity: "day",
        },
      },
      created_at: 1719978675.8305373,
      relation_name: "`opensource-observer`.`oso`.`int_events`",
      raw_code:
        '{#\n  Collects all events into a single table\n\n  SCHEMA\n    \n  time\n  event_type\n\n  source_id\n  event_source\n\n  to_artifact_name\n  to_artifact_namespace\n  to_artifact_type\n  to_artifact_source_id\n\n  from_artifact_name\n  from_artifact_namespace\n  from_artifact_type\n  from_artifact_source_id\n\n  amount\n#}\n{{\n  config(\n    materialized=\'table\',\n    partition_by={\n      "field": "time",\n      "data_type": "timestamp",\n      "granularity": "day",\n    }\n  )\n}}\n\nwith github_commits as (\n  select -- noqa: ST06\n    created_at as `time`,\n    "COMMIT_CODE" as event_type,\n    CAST(push_id as STRING) as event_source_id,\n    "GITHUB" as event_source,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(1)]\n      as to_name,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(0)]\n      as to_namespace,\n    "REPOSITORY" as to_type,\n    CAST(repository_id as STRING) as to_artifact_source_id,\n    COALESCE(actor_login, author_email) as from_name,\n    COALESCE(actor_login, author_email) as from_namespace,\n    case\n      when actor_login is not null then "GIT_USER"\n      else "GIT_EMAIL"\n    end as from_type,\n    case\n      when actor_login is not null then CAST(actor_id as STRING)\n      else author_email\n    end as from_artifact_source_id,\n    CAST(1 as FLOAT64) as amount\n  from {{ ref(\'stg_github__distinct_commits_resolved_mergebot\') }}\n),\n\ngithub_issues as (\n  select -- noqa: ST06\n    created_at as `time`,\n    type as event_type,\n    CAST(id as STRING) as event_source_id,\n    "GITHUB" as event_source,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(1)]\n      as to_name,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(0)]\n      as to_namespace,\n    "REPOSITORY" as to_type,\n    CAST(repository_id as STRING) as to_artifact_source_id,\n    actor_login as from_name,\n    actor_login as from_namespace,\n    "GIT_USER" as from_type,\n    CAST(actor_id as STRING) as from_artifact_source_id,\n    CAST(1 as FLOAT64) as amount\n  from {{ ref(\'stg_github__issues\') }}\n),\n\ngithub_pull_requests as (\n  select -- noqa: ST06\n    created_at as `time`,\n    type as event_type,\n    CAST(id as STRING) as event_source_id,\n    "GITHUB" as event_source,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(1)]\n      as to_name,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(0)]\n      as to_namespace,\n    "REPOSITORY" as to_type,\n    CAST(repository_id as STRING) as to_artifact_source_id,\n    actor_login as from_name,\n    actor_login as from_namespace,\n    "GIT_USER" as from_type,\n    CAST(actor_id as STRING) as from_artifact_source_id,\n    CAST(1 as FLOAT64) as amount\n  from {{ ref(\'stg_github__pull_requests\') }}\n),\n\ngithub_pull_request_merge_events as (\n  select -- noqa: ST06\n    created_at as `time`,\n    type as event_type,\n    CAST(id as STRING) as event_source_id,\n    "GITHUB" as event_source,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(1)]\n      as to_name,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(0)]\n      as to_namespace,\n    "REPOSITORY" as to_type,\n    CAST(repository_id as STRING) as to_artifact_source_id,\n    actor_login as from_name,\n    actor_login as from_namespace,\n    "GIT_USER" as from_type,\n    CAST(actor_id as STRING) as from_artifact_source_id,\n    CAST(1 as FLOAT64) as amount\n  from {{ ref(\'stg_github__pull_request_merge_events\') }}\n),\n\ngithub_stars_and_forks as (\n  select -- noqa: ST06\n    created_at as `time`,\n    type as event_type,\n    CAST(id as STRING) as event_source_id,\n    "GITHUB" as event_source,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(1)]\n      as to_name,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(0)]\n      as to_namespace,\n    "REPOSITORY" as to_type,\n    CAST(repository_id as STRING) as to_artifact_source_id,\n    actor_login as from_name,\n    actor_login as from_namespace,\n    "GIT_USER" as from_type,\n    CAST(actor_id as STRING) as from_artifact_source_id,\n    CAST(1 as FLOAT64) as amount\n  from {{ ref(\'stg_github__stars_and_forks\') }}\n),\n\nall_events as (\n  select\n    time,\n    event_type,\n    event_source_id,\n    event_source,\n    to_artifact_id,\n    to_artifact_name,\n    to_artifact_namespace,\n    to_artifact_type,\n    to_artifact_source_id,\n    from_artifact_id,\n    from_artifact_name,\n    from_artifact_namespace,\n    from_artifact_type,\n    from_artifact_source_id,\n    amount\n  from (\n    select * from {{ ref(\'int_optimism_contract_invocation_events\') }}\n    union all\n    select * from {{ ref(\'int_base_contract_invocation_events\') }}\n    union all\n    select * from {{ ref(\'int_frax_contract_invocation_events\') }}\n    union all\n    select * from {{ ref(\'int_metal_contract_invocation_events\') }}\n    union all\n    select * from {{ ref(\'int_mode_contract_invocation_events\') }}\n    union all\n    select * from {{ ref(\'int_pgn_contract_invocation_events\') }}\n    union all\n    select * from {{ ref(\'int_zora_contract_invocation_events\') }}\n  )\n  union all\n  select\n    time,\n    event_type,\n    event_source_id,\n    event_source,\n    {{ oso_id("event_source", "to_artifact_source_id") }} as to_artifact_id,\n    to_name as to_artifact_name,\n    to_namespace as to_artifact_namespace,\n    to_type as to_artifact_type,\n    to_artifact_source_id,\n    {{ oso_id("event_source", "from_artifact_source_id") }} as from_artifact_id,\n    from_name as from_artifact_name,\n    from_namespace as from_artifact_namespace,\n    from_type as from_artifact_type,\n    from_artifact_source_id,\n    amount\n  from (\n    select * from github_commits\n    union all\n    select * from github_issues\n    union all\n    select * from github_pull_requests\n    union all\n    select * from github_pull_request_merge_events\n    union all\n    select * from github_stars_and_forks\n  )\n)\n\nselect\n  time,\n  to_artifact_id,\n  from_artifact_id,\n  UPPER(event_type) as event_type,\n  CAST(event_source_id as STRING) as event_source_id,\n  UPPER(event_source) as event_source,\n  LOWER(to_artifact_name) as to_artifact_name,\n  LOWER(to_artifact_namespace) as to_artifact_namespace,\n  UPPER(to_artifact_type) as to_artifact_type,\n  LOWER(to_artifact_source_id) as to_artifact_source_id,\n  LOWER(from_artifact_name) as from_artifact_name,\n  LOWER(from_artifact_namespace) as from_artifact_namespace,\n  UPPER(from_artifact_type) as from_artifact_type,\n  LOWER(from_artifact_source_id) as from_artifact_source_id,\n  CAST(amount as FLOAT64) as amount\nfrom all_events',
      language: "sql",
      refs: [
        {
          name: "stg_github__distinct_commits_resolved_mergebot",
          package: null,
          version: null,
        },
        { name: "stg_github__issues", package: null, version: null },
        { name: "stg_github__pull_requests", package: null, version: null },
        {
          name: "stg_github__pull_request_merge_events",
          package: null,
          version: null,
        },
        { name: "stg_github__stars_and_forks", package: null, version: null },
        {
          name: "int_optimism_contract_invocation_events",
          package: null,
          version: null,
        },
        {
          name: "int_base_contract_invocation_events",
          package: null,
          version: null,
        },
        {
          name: "int_frax_contract_invocation_events",
          package: null,
          version: null,
        },
        {
          name: "int_metal_contract_invocation_events",
          package: null,
          version: null,
        },
        {
          name: "int_mode_contract_invocation_events",
          package: null,
          version: null,
        },
        {
          name: "int_pgn_contract_invocation_events",
          package: null,
          version: null,
        },
        {
          name: "int_zora_contract_invocation_events",
          package: null,
          version: null,
        },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.oso_id"],
        nodes: [
          "model.opensource_observer.stg_github__distinct_commits_resolved_mergebot",
          "model.opensource_observer.stg_github__issues",
          "model.opensource_observer.stg_github__pull_requests",
          "model.opensource_observer.stg_github__pull_request_merge_events",
          "model.opensource_observer.stg_github__stars_and_forks",
          "model.opensource_observer.int_optimism_contract_invocation_events",
          "model.opensource_observer.int_base_contract_invocation_events",
          "model.opensource_observer.int_frax_contract_invocation_events",
          "model.opensource_observer.int_metal_contract_invocation_events",
          "model.opensource_observer.int_mode_contract_invocation_events",
          "model.opensource_observer.int_pgn_contract_invocation_events",
          "model.opensource_observer.int_zora_contract_invocation_events",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/events/int_events.sql",
      compiled: true,
      compiled_code:
        '\n\n\nwith github_commits as (\n  select -- noqa: ST06\n    created_at as `time`,\n    "COMMIT_CODE" as event_type,\n    CAST(push_id as STRING) as event_source_id,\n    "GITHUB" as event_source,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(1)]\n      as to_name,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(0)]\n      as to_namespace,\n    "REPOSITORY" as to_type,\n    CAST(repository_id as STRING) as to_artifact_source_id,\n    COALESCE(actor_login, author_email) as from_name,\n    COALESCE(actor_login, author_email) as from_namespace,\n    case\n      when actor_login is not null then "GIT_USER"\n      else "GIT_EMAIL"\n    end as from_type,\n    case\n      when actor_login is not null then CAST(actor_id as STRING)\n      else author_email\n    end as from_artifact_source_id,\n    CAST(1 as FLOAT64) as amount\n  from `opensource-observer`.`oso`.`stg_github__distinct_commits_resolved_mergebot`\n),\n\ngithub_issues as (\n  select -- noqa: ST06\n    created_at as `time`,\n    type as event_type,\n    CAST(id as STRING) as event_source_id,\n    "GITHUB" as event_source,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(1)]\n      as to_name,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(0)]\n      as to_namespace,\n    "REPOSITORY" as to_type,\n    CAST(repository_id as STRING) as to_artifact_source_id,\n    actor_login as from_name,\n    actor_login as from_namespace,\n    "GIT_USER" as from_type,\n    CAST(actor_id as STRING) as from_artifact_source_id,\n    CAST(1 as FLOAT64) as amount\n  from `opensource-observer`.`oso`.`stg_github__issues`\n),\n\ngithub_pull_requests as (\n  select -- noqa: ST06\n    created_at as `time`,\n    type as event_type,\n    CAST(id as STRING) as event_source_id,\n    "GITHUB" as event_source,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(1)]\n      as to_name,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(0)]\n      as to_namespace,\n    "REPOSITORY" as to_type,\n    CAST(repository_id as STRING) as to_artifact_source_id,\n    actor_login as from_name,\n    actor_login as from_namespace,\n    "GIT_USER" as from_type,\n    CAST(actor_id as STRING) as from_artifact_source_id,\n    CAST(1 as FLOAT64) as amount\n  from `opensource-observer`.`oso`.`stg_github__pull_requests`\n),\n\ngithub_pull_request_merge_events as (\n  select -- noqa: ST06\n    created_at as `time`,\n    type as event_type,\n    CAST(id as STRING) as event_source_id,\n    "GITHUB" as event_source,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(1)]\n      as to_name,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(0)]\n      as to_namespace,\n    "REPOSITORY" as to_type,\n    CAST(repository_id as STRING) as to_artifact_source_id,\n    actor_login as from_name,\n    actor_login as from_namespace,\n    "GIT_USER" as from_type,\n    CAST(actor_id as STRING) as from_artifact_source_id,\n    CAST(1 as FLOAT64) as amount\n  from `opensource-observer`.`oso`.`stg_github__pull_request_merge_events`\n),\n\ngithub_stars_and_forks as (\n  select -- noqa: ST06\n    created_at as `time`,\n    type as event_type,\n    CAST(id as STRING) as event_source_id,\n    "GITHUB" as event_source,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(1)]\n      as to_name,\n    SPLIT(REPLACE(repository_name, "@", ""), "/")[SAFE_OFFSET(0)]\n      as to_namespace,\n    "REPOSITORY" as to_type,\n    CAST(repository_id as STRING) as to_artifact_source_id,\n    actor_login as from_name,\n    actor_login as from_namespace,\n    "GIT_USER" as from_type,\n    CAST(actor_id as STRING) as from_artifact_source_id,\n    CAST(1 as FLOAT64) as amount\n  from `opensource-observer`.`oso`.`stg_github__stars_and_forks`\n),\n\nall_events as (\n  select\n    time,\n    event_type,\n    event_source_id,\n    event_source,\n    to_artifact_id,\n    to_artifact_name,\n    to_artifact_namespace,\n    to_artifact_type,\n    to_artifact_source_id,\n    from_artifact_id,\n    from_artifact_name,\n    from_artifact_namespace,\n    from_artifact_type,\n    from_artifact_source_id,\n    amount\n  from (\n    select * from `opensource-observer`.`oso`.`int_optimism_contract_invocation_events`\n    union all\n    select * from `opensource-observer`.`oso`.`int_base_contract_invocation_events`\n    union all\n    select * from `opensource-observer`.`oso`.`int_frax_contract_invocation_events`\n    union all\n    select * from `opensource-observer`.`oso`.`int_metal_contract_invocation_events`\n    union all\n    select * from `opensource-observer`.`oso`.`int_mode_contract_invocation_events`\n    union all\n    select * from `opensource-observer`.`oso`.`int_pgn_contract_invocation_events`\n    union all\n    select * from `opensource-observer`.`oso`.`int_zora_contract_invocation_events`\n  )\n  union all\n  select\n    time,\n    event_type,\n    event_source_id,\n    event_source,\n    REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, to_artifact_source_id))), \'+\', \'-\'), \'/\', \'_\') as to_artifact_id,\n    to_name as to_artifact_name,\n    to_namespace as to_artifact_namespace,\n    to_type as to_artifact_type,\n    to_artifact_source_id,\n    REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(event_source, from_artifact_source_id))), \'+\', \'-\'), \'/\', \'_\') as from_artifact_id,\n    from_name as from_artifact_name,\n    from_namespace as from_artifact_namespace,\n    from_type as from_artifact_type,\n    from_artifact_source_id,\n    amount\n  from (\n    select * from github_commits\n    union all\n    select * from github_issues\n    union all\n    select * from github_pull_requests\n    union all\n    select * from github_pull_request_merge_events\n    union all\n    select * from github_stars_and_forks\n  )\n)\n\nselect\n  time,\n  to_artifact_id,\n  from_artifact_id,\n  UPPER(event_type) as event_type,\n  CAST(event_source_id as STRING) as event_source_id,\n  UPPER(event_source) as event_source,\n  LOWER(to_artifact_name) as to_artifact_name,\n  LOWER(to_artifact_namespace) as to_artifact_namespace,\n  UPPER(to_artifact_type) as to_artifact_type,\n  LOWER(to_artifact_source_id) as to_artifact_source_id,\n  LOWER(from_artifact_name) as from_artifact_name,\n  LOWER(from_artifact_namespace) as from_artifact_namespace,\n  UPPER(from_artifact_type) as from_artifact_type,\n  LOWER(from_artifact_source_id) as from_artifact_source_id,\n  CAST(amount as FLOAT64) as amount\nfrom all_events',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_events_with_artifact_id": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_events_with_artifact_id",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/events/int_events_with_artifact_id.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/events/int_events_with_artifact_id.sql",
      unique_id: "model.opensource_observer.int_events_with_artifact_id",
      fqn: [
        "opensource_observer",
        "intermediate",
        "events",
        "int_events_with_artifact_id",
      ],
      alias: "int_events_with_artifact_id",
      checksum: {
        name: "sha256",
        checksum:
          "0f19b91a3bf2e6091d632245fe9d13b66f1439ba59183393a20a91ebaa5dc0a8",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.8385446,
      relation_name:
        "`opensource-observer`.`oso`.`int_events_with_artifact_id`",
      raw_code:
        "{#\n  config(\n    materialized='ephemeral',\n  )\n#}\nselect *\nfrom {{ ref('int_events') }}",
      language: "sql",
      refs: [{ name: "int_events", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_events"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/events/int_events_with_artifact_id.sql",
      compiled: true,
      compiled_code:
        "\nselect *\nfrom `opensource-observer`.`oso`.`int_events`",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_events_alltime_to_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_events_alltime_to_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/events/int_events_alltime_to_project.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/events/int_events_alltime_to_project.sql",
      unique_id: "model.opensource_observer.int_events_alltime_to_project",
      fqn: [
        "opensource_observer",
        "intermediate",
        "events",
        "int_events_alltime_to_project",
      ],
      alias: "int_events_alltime_to_project",
      checksum: {
        name: "sha256",
        checksum:
          "e93d4f753f6200dd498a32b38c55838c02d0872d0d460187a5a6878ab4d57f51",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.8405764,
      relation_name:
        "`opensource-observer`.`oso`.`int_events_alltime_to_project`",
      raw_code:
        "{# \n  All events to a project, cumulative (all time)\n#}\n\nselect\n  project_id,\n  from_artifact_id,\n  to_artifact_id,\n  event_source,\n  event_type,\n  MIN(bucket_day) as first_event_time,\n  MAX(bucket_day) as last_event_time,\n  SUM(amount) as amount\nfrom {{ ref('int_events_daily_to_project') }}\ngroup by\n  project_id,\n  from_artifact_id,\n  to_artifact_id,\n  event_source,\n  event_type",
      language: "sql",
      refs: [
        { name: "int_events_daily_to_project", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_events_daily_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/events/int_events_alltime_to_project.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  project_id,\n  from_artifact_id,\n  to_artifact_id,\n  event_source,\n  event_type,\n  MIN(bucket_day) as first_event_time,\n  MAX(bucket_day) as last_event_time,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`int_events_daily_to_project`\ngroup by\n  project_id,\n  from_artifact_id,\n  to_artifact_id,\n  event_source,\n  event_type",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_events_monthly_to_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_events_monthly_to_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/events/int_events_monthly_to_project.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/events/int_events_monthly_to_project.sql",
      unique_id: "model.opensource_observer.int_events_monthly_to_project",
      fqn: [
        "opensource_observer",
        "intermediate",
        "events",
        "int_events_monthly_to_project",
      ],
      alias: "int_events_monthly_to_project",
      checksum: {
        name: "sha256",
        checksum:
          "a06a46935cfe17da4a52118dede639c4219cd421fc933e4fc64bf957d35f7983",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.8425398,
      relation_name:
        "`opensource-observer`.`oso`.`int_events_monthly_to_project`",
      raw_code:
        "{# \n  All events to a project, bucketed by month\n#}\n\nselect\n  project_id,\n  from_artifact_id,\n  to_artifact_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month) as bucket_month,\n  SUM(amount) as amount\nfrom {{ ref('int_events_daily_to_project') }}\ngroup by\n  project_id,\n  from_artifact_id,\n  to_artifact_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month)",
      language: "sql",
      refs: [
        { name: "int_events_daily_to_project", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_events_daily_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/events/int_events_monthly_to_project.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  project_id,\n  from_artifact_id,\n  to_artifact_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month) as bucket_month,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`int_events_daily_to_project`\ngroup by\n  project_id,\n  from_artifact_id,\n  to_artifact_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(bucket_day, month)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_events_to_collection": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_events_to_collection",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/events/int_events_to_collection.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/events/int_events_to_collection.sql",
      unique_id: "model.opensource_observer.int_events_to_collection",
      fqn: [
        "opensource_observer",
        "intermediate",
        "events",
        "int_events_to_collection",
      ],
      alias: "int_events_to_collection",
      checksum: {
        name: "sha256",
        checksum:
          "47f6da7cd933857794beca3bacb45f099a48114cc637d80dfd6c4dee872404ca",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.8445144,
      relation_name: "`opensource-observer`.`oso`.`int_events_to_collection`",
      raw_code:
        "{# \n  All events to a collection\n#}\n\nselect\n  int_projects_by_collection.collection_id,\n  int_events_to_project.project_id,\n  int_events_to_project.from_artifact_id,\n  int_events_to_project.to_artifact_id,\n  int_events_to_project.time,\n  int_events_to_project.event_source,\n  int_events_to_project.event_type,\n  int_events_to_project.amount\nfrom {{ ref('int_events_to_project') }}\ninner join {{ ref('int_projects_by_collection') }}\n  on int_events_to_project.project_id = int_projects_by_collection.project_id",
      language: "sql",
      refs: [
        { name: "int_events_to_project", package: null, version: null },
        { name: "int_projects_by_collection", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_events_to_project",
          "model.opensource_observer.int_projects_by_collection",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/events/int_events_to_collection.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  int_projects_by_collection.collection_id,\n  int_events_to_project.project_id,\n  int_events_to_project.from_artifact_id,\n  int_events_to_project.to_artifact_id,\n  int_events_to_project.time,\n  int_events_to_project.event_source,\n  int_events_to_project.event_type,\n  int_events_to_project.amount\nfrom `opensource-observer`.`oso`.`int_events_to_project`\ninner join `opensource-observer`.`oso`.`int_projects_by_collection`\n  on int_events_to_project.project_id = int_projects_by_collection.project_id",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_events_daily_to_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_events_daily_to_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/events/int_events_daily_to_project.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/events/int_events_daily_to_project.sql",
      unique_id: "model.opensource_observer.int_events_daily_to_project",
      fqn: [
        "opensource_observer",
        "intermediate",
        "events",
        "int_events_daily_to_project",
      ],
      alias: "int_events_daily_to_project",
      checksum: {
        name: "sha256",
        checksum:
          "bbc573ac5c7b3d6144b5e7a490cdb4231d9431826bd31b442fe6db74b53029a8",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.8468025,
      relation_name:
        "`opensource-observer`.`oso`.`int_events_daily_to_project`",
      raw_code:
        "{# \n  All events to a project, bucketed by day\n#}\n\nselect\n  project_id,\n  from_artifact_id,\n  to_artifact_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(time, day) as bucket_day,\n  SUM(amount) as amount\nfrom {{ ref('int_events_to_project') }}\ngroup by\n  project_id,\n  from_artifact_id,\n  to_artifact_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(time, day)",
      language: "sql",
      refs: [{ name: "int_events_to_project", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_events_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/events/int_events_daily_to_project.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  project_id,\n  from_artifact_id,\n  to_artifact_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(time, day) as bucket_day,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`int_events_to_project`\ngroup by\n  project_id,\n  from_artifact_id,\n  to_artifact_id,\n  event_source,\n  event_type,\n  TIMESTAMP_TRUNC(time, day)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_events_to_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_events_to_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/events/int_events_to_project.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/events/int_events_to_project.sql",
      unique_id: "model.opensource_observer.int_events_to_project",
      fqn: [
        "opensource_observer",
        "intermediate",
        "events",
        "int_events_to_project",
      ],
      alias: "int_events_to_project",
      checksum: {
        name: "sha256",
        checksum:
          "b5de043f57adda4bab69600c33c88ae445ad679c943e9e8646738bfdfede60de",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.8488662,
      relation_name: "`opensource-observer`.`oso`.`int_events_to_project`",
      raw_code:
        "{# \n  All events to a project\n#}\n\nselect\n  int_artifacts_by_project.project_id,\n  int_events_with_artifact_id.from_artifact_id,\n  int_events_with_artifact_id.to_artifact_id,\n  int_events_with_artifact_id.time,\n  int_events_with_artifact_id.event_source,\n  int_events_with_artifact_id.event_type,\n  int_events_with_artifact_id.amount\nfrom {{ ref('int_events_with_artifact_id') }}\ninner join {{ ref('int_artifacts_by_project') }}\n  on\n    int_events_with_artifact_id.to_artifact_id\n    = int_artifacts_by_project.artifact_id",
      language: "sql",
      refs: [
        { name: "int_events_with_artifact_id", package: null, version: null },
        { name: "int_artifacts_by_project", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.int_events_with_artifact_id",
          "model.opensource_observer.int_artifacts_by_project",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/events/int_events_to_project.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  int_artifacts_by_project.project_id,\n  int_events_with_artifact_id.from_artifact_id,\n  int_events_with_artifact_id.to_artifact_id,\n  int_events_with_artifact_id.time,\n  int_events_with_artifact_id.event_source,\n  int_events_with_artifact_id.event_type,\n  int_events_with_artifact_id.amount\nfrom `opensource-observer`.`oso`.`int_events_with_artifact_id`\ninner join `opensource-observer`.`oso`.`int_artifacts_by_project`\n  on\n    int_events_with_artifact_id.to_artifact_id\n    = int_artifacts_by_project.artifact_id",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_developer_status_monthly_by_project": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_developer_status_monthly_by_project",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/analyses/int_developer_status_monthly_by_project.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/analyses/int_developer_status_monthly_by_project.sql",
      unique_id:
        "model.opensource_observer.int_developer_status_monthly_by_project",
      fqn: [
        "opensource_observer",
        "intermediate",
        "analyses",
        "int_developer_status_monthly_by_project",
      ],
      alias: "int_developer_status_monthly_by_project",
      checksum: {
        name: "sha256",
        checksum:
          "e434bae6f61418d8b47b3335dbf4496ba233e4aa1e1f4f7bfcc2c4cc105608da",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.8510482,
      relation_name:
        "`opensource-observer`.`oso`.`int_developer_status_monthly_by_project`",
      raw_code:
        "{#\n  This model segments developers based on monthly activity\n  using the same taxonomy as in the Electric Capital\n  Developer Report.\n\n  The taxonomy is as follows:\n  - Full-time developer: A developer who has made at least 10 commits\n  - Part-time developer: A developer who has made less than 10 commits\n  - Other contributor: A user who has not made any commits\n#}\n\nwith activity as (\n  select\n    project_id,\n    from_artifact_id,\n    event_type,\n    bucket_day,\n    TIMESTAMP_TRUNC(bucket_day, month) as bucket_month\n  from {{ ref('int_events_daily_to_project') }}\n  where\n    event_type in (\n      'COMMIT_CODE',\n      'PULL_REQUEST_OPENED',\n      'PULL_REQUEST_REOPENED',\n      'PULL_REQUEST_MERGED',\n      'PULL_REQUEST_CLOSED',\n      'ISSUE_OPENED',\n      'ISSUE_REOPENED',\n      'ISSUE_CLOSED'\n    )\n),\n\nuser_activity as (\n  select\n    project_id,\n    from_artifact_id,\n    bucket_month,\n    SUM(\n      case when event_type = 'COMMIT_CODE' then 1 else 0 end\n    ) as commit_days,\n    SUM(\n      case when event_type != 'COMMIT_CODE' then 1 else 0 end\n    ) as other_contrib_days\n  from activity\n  group by\n    project_id,\n    from_artifact_id,\n    bucket_month\n)\n\nselect\n  project_id,\n  from_artifact_id,\n  bucket_month,\n  case\n    when commit_days >= 10 then 'FULL_TIME_DEVELOPER'\n    when commit_days between 1 and 9 then 'PART_TIME_DEVELOPER'\n    when other_contrib_days >= 10 then 'FULL_TIME_CONTRIBUTOR'\n    else 'PART_TIME_CONTRIBUTOR'\n  end as user_segment_type\nfrom user_activity",
      language: "sql",
      refs: [
        { name: "int_events_daily_to_project", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_events_daily_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/analyses/int_developer_status_monthly_by_project.sql",
      compiled: true,
      compiled_code:
        "\n\nwith activity as (\n  select\n    project_id,\n    from_artifact_id,\n    event_type,\n    bucket_day,\n    TIMESTAMP_TRUNC(bucket_day, month) as bucket_month\n  from `opensource-observer`.`oso`.`int_events_daily_to_project`\n  where\n    event_type in (\n      'COMMIT_CODE',\n      'PULL_REQUEST_OPENED',\n      'PULL_REQUEST_REOPENED',\n      'PULL_REQUEST_MERGED',\n      'PULL_REQUEST_CLOSED',\n      'ISSUE_OPENED',\n      'ISSUE_REOPENED',\n      'ISSUE_CLOSED'\n    )\n),\n\nuser_activity as (\n  select\n    project_id,\n    from_artifact_id,\n    bucket_month,\n    SUM(\n      case when event_type = 'COMMIT_CODE' then 1 else 0 end\n    ) as commit_days,\n    SUM(\n      case when event_type != 'COMMIT_CODE' then 1 else 0 end\n    ) as other_contrib_days\n  from activity\n  group by\n    project_id,\n    from_artifact_id,\n    bucket_month\n)\n\nselect\n  project_id,\n  from_artifact_id,\n  bucket_month,\n  case\n    when commit_days >= 10 then 'FULL_TIME_DEVELOPER'\n    when commit_days between 1 and 9 then 'PART_TIME_DEVELOPER'\n    when other_contrib_days >= 10 then 'FULL_TIME_CONTRIBUTOR'\n    else 'PART_TIME_CONTRIBUTOR'\n  end as user_segment_type\nfrom user_activity",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_first_last_event_by_artifact": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_first_last_event_by_artifact",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/analyses/int_first_last_event_by_artifact.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/analyses/int_first_last_event_by_artifact.sql",
      unique_id: "model.opensource_observer.int_first_last_event_by_artifact",
      fqn: [
        "opensource_observer",
        "intermediate",
        "analyses",
        "int_first_last_event_by_artifact",
      ],
      alias: "int_first_last_event_by_artifact",
      checksum: {
        name: "sha256",
        checksum:
          "7cad8fc63a39d2c9081719778f912196fd46fdd8e10a46d10deb8ed0b70ea627",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.8530989,
      relation_name:
        "`opensource-observer`.`oso`.`int_first_last_event_by_artifact`",
      raw_code:
        "{# \n  Summary stats for the first and last event for each artifact\n#}\n\nselect\n  project_id,\n  from_artifact_id,\n  to_artifact_id,\n  event_source,\n  event_type,\n  MIN(bucket_day) as first_event_day,\n  MAX(bucket_day) as last_event_day,\n  COUNT(*) as event_count,\n  SUM(amount) as amount\nfrom {{ ref('int_events_daily_to_project') }}\ngroup by\n  project_id,\n  from_artifact_id,\n  to_artifact_id,\n  event_source,\n  event_type",
      language: "sql",
      refs: [
        { name: "int_events_daily_to_project", package: null, version: null },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.int_events_daily_to_project"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/analyses/int_first_last_event_by_artifact.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  project_id,\n  from_artifact_id,\n  to_artifact_id,\n  event_source,\n  event_type,\n  MIN(bucket_day) as first_event_day,\n  MAX(bucket_day) as last_event_day,\n  COUNT(*) as event_count,\n  SUM(amount) as amount\nfrom `opensource-observer`.`oso`.`int_events_daily_to_project`\ngroup by\n  project_id,\n  from_artifact_id,\n  to_artifact_id,\n  event_source,\n  event_type",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.int_time_intervals": {
      database: "opensource-observer",
      schema: "oso",
      name: "int_time_intervals",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "intermediate/analyses/int_time_intervals.sql",
      original_file_path:
        "warehouse/dbt/models/intermediate/analyses/int_time_intervals.sql",
      unique_id: "model.opensource_observer.int_time_intervals",
      fqn: [
        "opensource_observer",
        "intermediate",
        "analyses",
        "int_time_intervals",
      ],
      alias: "int_time_intervals",
      checksum: {
        name: "sha256",
        checksum:
          "a497bc64791fc367c61edaf268e3d4aa2c6a456fcde3045420144db418a372da",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.8551974,
      relation_name: "`opensource-observer`.`oso`.`int_time_intervals`",
      raw_code:
        "with dates as (\n  select\n    '7 DAYS' as time_interval,\n    DATE_SUB(CURRENT_DATE(), interval 7 day) as start_date\n  union all\n  select\n    '30 DAYS' as time_interval,\n    DATE_SUB(CURRENT_DATE(), interval 30 day) as start_date\n  union all\n  select\n    '90 DAYS' as time_interval,\n    DATE_SUB(CURRENT_DATE(), interval 90 day) as start_date\n  union all\n  select\n    '6 MONTHS' as time_interval,\n    DATE_SUB(CURRENT_DATE(), interval 6 month) as start_date\n  union all\n  select\n    '1 YEAR' as time_interval,\n    DATE_SUB(CURRENT_DATE(), interval 1 year) as start_date\n  union all\n  select\n    'ALL' as time_interval,\n    DATE('1970-01-01') as start_date\n)\n\nselect\n  dates.time_interval,\n  TIMESTAMP(dates.start_date) as start_date\nfrom dates",
      language: "sql",
      refs: [],
      sources: [],
      metrics: [],
      depends_on: { macros: [], nodes: [] },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/intermediate/analyses/int_time_intervals.sql",
      compiled: true,
      compiled_code:
        "with dates as (\n  select\n    '7 DAYS' as time_interval,\n    DATE_SUB(CURRENT_DATE(), interval 7 day) as start_date\n  union all\n  select\n    '30 DAYS' as time_interval,\n    DATE_SUB(CURRENT_DATE(), interval 30 day) as start_date\n  union all\n  select\n    '90 DAYS' as time_interval,\n    DATE_SUB(CURRENT_DATE(), interval 90 day) as start_date\n  union all\n  select\n    '6 MONTHS' as time_interval,\n    DATE_SUB(CURRENT_DATE(), interval 6 month) as start_date\n  union all\n  select\n    '1 YEAR' as time_interval,\n    DATE_SUB(CURRENT_DATE(), interval 1 year) as start_date\n  union all\n  select\n    'ALL' as time_interval,\n    DATE('1970-01-01') as start_date\n)\n\nselect\n  dates.time_interval,\n  TIMESTAMP(dates.start_date) as start_date\nfrom dates",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_arbitrum__deployers": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_arbitrum__deployers",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/arbitrum/stg_arbitrum__deployers.sql",
      original_file_path:
        "warehouse/dbt/models/staging/arbitrum/stg_arbitrum__deployers.sql",
      unique_id: "model.opensource_observer.stg_arbitrum__deployers",
      fqn: [
        "opensource_observer",
        "staging",
        "arbitrum",
        "stg_arbitrum__deployers",
      ],
      alias: "stg_arbitrum__deployers",
      checksum: {
        name: "sha256",
        checksum:
          "e7fe6d0524506c487714fe9b0aa9e7c634fc412fe9060a1adcc098490c2f2342",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.857121,
      relation_name: "`opensource-observer`.`oso`.`stg_arbitrum__deployers`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="transaction_hash",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{{ goog_blockchain_deployers("arbitrum") }}',
      language: "sql",
      refs: [],
      sources: [["arbitrum", "receipts"]],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.goog_blockchain_deployers"],
        nodes: ["source.opensource_observer.arbitrum.receipts"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/arbitrum/stg_arbitrum__deployers.sql",
      compiled: true,
      compiled_code:
        "\n\n\nSELECT\n  block_timestamp AS block_timestamp,\n  transaction_hash AS transaction_hash,\n  from_address AS deployer_address,\n  contract_address AS contract_address\nFROM `bigquery-public-data`.`goog_blockchain_arbitrum_one_us`.`receipts`\nWHERE\n  to_address IS null\n  AND `status` = 1\n  \n  AND block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  \n\n\n\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_ethereum__deployers": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_ethereum__deployers",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/ethereum/stg_ethereum__deployers.sql",
      original_file_path:
        "warehouse/dbt/models/staging/ethereum/stg_ethereum__deployers.sql",
      unique_id: "model.opensource_observer.stg_ethereum__deployers",
      fqn: [
        "opensource_observer",
        "staging",
        "ethereum",
        "stg_ethereum__deployers",
      ],
      alias: "stg_ethereum__deployers",
      checksum: {
        name: "sha256",
        checksum:
          "3751db70f09fd57ed35e6f5232e04e3e6dd1d6fa75c7f565b5b11fb2d4db35ff",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.865584,
      relation_name: "`opensource-observer`.`oso`.`stg_ethereum__deployers`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="transaction_hash",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n\n{% if target.name == \'production\' %}\nselect\n  block_timestamp,\n  `hash` as transaction_hash,\n  from_address as deployer_address,\n  receipt_contract_address as contract_address\nfrom {{ source("ethereum", "transactions") }}\nwhere\n  to_address is null\n  and receipt_status = 1\n  and receipt_contract_address is not null\n  {% if is_incremental() %}\n    AND block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    {{ playground_filter("block_timestamp", is_start=False) }}\n  {% else %}\n  {{ playground_filter("block_timestamp", is_start=False) }}\n  {% endif %}\n{% else %}\n  select *\n  from {{ source("base_playground", "ethereum_deployers") }}\n  {% if is_incremental() %}\n    where\n      block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, interval 1 day)\n      {{ playground_filter("block_timestamp", is_start=False) }}\n  {% endif %}\n{% endif %}',
      language: "sql",
      refs: [],
      sources: [["ethereum", "transactions"]],
      metrics: [],
      depends_on: {
        macros: [
          "macro.dbt.is_incremental",
          "macro.opensource_observer.playground_filter",
        ],
        nodes: ["source.opensource_observer.ethereum.transactions"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/ethereum/stg_ethereum__deployers.sql",
      compiled: true,
      compiled_code:
        "\n\n\nselect\n  block_timestamp,\n  `hash` as transaction_hash,\n  from_address as deployer_address,\n  receipt_contract_address as contract_address\nfrom `bigquery-public-data`.`crypto_ethereum`.`transactions`\nwhere\n  to_address is null\n  and receipt_status = 1\n  and receipt_contract_address is not null\n  \n    AND block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    \n  \n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_ethereum__factories": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_ethereum__factories",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/ethereum/stg_ethereum__factories.sql",
      original_file_path:
        "warehouse/dbt/models/staging/ethereum/stg_ethereum__factories.sql",
      unique_id: "model.opensource_observer.stg_ethereum__factories",
      fqn: [
        "opensource_observer",
        "staging",
        "ethereum",
        "stg_ethereum__factories",
      ],
      alias: "stg_ethereum__factories",
      checksum: {
        name: "sha256",
        checksum:
          "9027e5d1c26fa82d0f0aa588b786a6000fe02a9e2dac819f6ac77f98ce9a9727",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.872816,
      relation_name: "`opensource-observer`.`oso`.`stg_ethereum__factories`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="transaction_hash",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  ) \n}}\n{{ factory_deployments("ethereum") }}',
      language: "sql",
      refs: [],
      sources: [
        ["ethereum", "transactions"],
        ["ethereum", "traces"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.factory_deployments"],
        nodes: [
          "source.opensource_observer.ethereum.transactions",
          "source.opensource_observer.ethereum.traces",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/ethereum/stg_ethereum__factories.sql",
      compiled: true,
      compiled_code:
        '\n\n\n\n\n\n\n\n\n\nWITH transactions AS (\n  SELECT *\n  FROM `bigquery-public-data`.`crypto_ethereum`.`transactions`\n  \n  WHERE block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  \n)\n\nselect \n  traces.block_timestamp, \n  traces.transaction_hash, \n  \n  txs.from_address as originating_address, \n  \n  txs.to_address as originating_contract,\n  traces.from_address as factory_address, \n  traces.to_address as contract_address\nfrom `bigquery-public-data`.`crypto_ethereum`.`traces` as traces\ninner join transactions as txs\n  on `txs`.`hash` = `traces`.`transaction_hash`\nwhere\n  LOWER(traces.from_address) != "0x3fab184622dc19b6109349b94811493bf2a45362"\n  and LOWER(trace_type) in ("create", "create2")\n  and status = 1\n\n  and `traces`.block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n\n\n',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_farcaster__addresses": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_farcaster__addresses",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/farcaster/stg_farcaster__addresses.sql",
      original_file_path:
        "warehouse/dbt/models/staging/farcaster/stg_farcaster__addresses.sql",
      unique_id: "model.opensource_observer.stg_farcaster__addresses",
      fqn: [
        "opensource_observer",
        "staging",
        "farcaster",
        "stg_farcaster__addresses",
      ],
      alias: "stg_farcaster__addresses",
      checksum: {
        name: "sha256",
        checksum:
          "4dd7d29600bd2f8d3df69fc5540a4f34ebc0fc50be330240dc4290496c436781",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.8846211,
      relation_name: "`opensource-observer`.`oso`.`stg_farcaster__addresses`",
      raw_code:
        '{#\n  Get all verified addresses attached to an FID\n#}\n\nselect\n  cast(v.fid as string) as fid,\n  lower(v.address) as address\nfrom {{ source("farcaster", "farcaster_verifications") }} as v\nwhere v.deleted_at is null',
      language: "sql",
      refs: [],
      sources: [["farcaster", "farcaster_verifications"]],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["source.opensource_observer.farcaster.farcaster_verifications"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/farcaster/stg_farcaster__addresses.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  cast(v.fid as string) as fid,\n  lower(v.address) as address\nfrom `opensource-observer`.`farcaster`.`verifications` as v\nwhere v.deleted_at is null",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_farcaster__profiles": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_farcaster__profiles",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/farcaster/stg_farcaster__profiles.sql",
      original_file_path:
        "warehouse/dbt/models/staging/farcaster/stg_farcaster__profiles.sql",
      unique_id: "model.opensource_observer.stg_farcaster__profiles",
      fqn: [
        "opensource_observer",
        "staging",
        "farcaster",
        "stg_farcaster__profiles",
      ],
      alias: "stg_farcaster__profiles",
      checksum: {
        name: "sha256",
        checksum:
          "3fc18d5b13dd6e7e8a28c738ef892ff1b4370fd0b8e77dafd3a1e94afde52654",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.8866959,
      relation_name: "`opensource-observer`.`oso`.`stg_farcaster__profiles`",
      raw_code:
        '{#\n  Get all farcaster profiles from the JSON\n#}\n\nselect\n  {{ oso_id(\'"oso"\', \'fid\') }} as user_id,\n  cast(profiles.fid as string) as farcaster_id,\n  profiles.custody_address as custody_address,\n  json_value(profiles.data, "$.username") as username,\n  json_value(profiles.data, "$.display") as display_name,\n  json_value(profiles.data, "$.pfp") as profile_picture_url,\n  json_value(profiles.data, "$.bio") as bio,\n  json_value(profiles.data, "$.url") as url\nfrom {{ source("farcaster", "farcaster_profiles") }} as profiles',
      language: "sql",
      refs: [],
      sources: [["farcaster", "farcaster_profiles"]],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.oso_id"],
        nodes: ["source.opensource_observer.farcaster.farcaster_profiles"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/farcaster/stg_farcaster__profiles.sql",
      compiled: true,
      compiled_code:
        '\n\nselect\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT("oso", fid))), \'+\', \'-\'), \'/\', \'_\') as user_id,\n  cast(profiles.fid as string) as farcaster_id,\n  profiles.custody_address as custody_address,\n  json_value(profiles.data, "$.username") as username,\n  json_value(profiles.data, "$.display") as display_name,\n  json_value(profiles.data, "$.pfp") as profile_picture_url,\n  json_value(profiles.data, "$.bio") as bio,\n  json_value(profiles.data, "$.url") as url\nfrom `opensource-observer`.`farcaster`.`profiles` as profiles',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_mode__factories": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_mode__factories",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/mode/stg_mode__factories.sql",
      original_file_path:
        "warehouse/dbt/models/staging/mode/stg_mode__factories.sql",
      unique_id: "model.opensource_observer.stg_mode__factories",
      fqn: ["opensource_observer", "staging", "mode", "stg_mode__factories"],
      alias: "stg_mode__factories",
      checksum: {
        name: "sha256",
        checksum:
          "7a32bddcac75a961f0fba4e7c516c6e88c6ae9b825455888767ea1bd8f3fa99e",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.8913884,
      relation_name: "`opensource-observer`.`oso`.`stg_mode__factories`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="transaction_hash",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  ) \n}}\n{{ factory_deployments("mode") }}',
      language: "sql",
      refs: [],
      sources: [
        ["mode", "transactions"],
        ["mode", "traces"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.factory_deployments"],
        nodes: [
          "source.opensource_observer.mode.transactions",
          "source.opensource_observer.mode.traces",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/mode/stg_mode__factories.sql",
      compiled: true,
      compiled_code:
        '\n\n\n\n\n\n\n\n\n\nWITH transactions AS (\n  SELECT *\n  FROM `opensource-observer`.`superchain`.`mode_transactions`\n  \n  WHERE block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  \n)\n\nselect \n  traces.block_timestamp, \n  traces.transaction_hash, \n  \n  txs.from_address as originating_address, \n  \n  txs.to_address as originating_contract,\n  traces.from_address as factory_address, \n  traces.to_address as contract_address\nfrom `opensource-observer`.`superchain`.`mode_traces` as traces\ninner join transactions as txs\n  on `txs`.`hash` = `traces`.`transaction_hash`\nwhere\n  LOWER(traces.from_address) != "0x3fab184622dc19b6109349b94811493bf2a45362"\n  and LOWER(trace_type) in ("create", "create2")\n  and status = 1\n\n  and `traces`.block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n\n\n',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_mode__proxies": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_mode__proxies",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/mode/stg_mode__proxies.sql",
      original_file_path:
        "warehouse/dbt/models/staging/mode/stg_mode__proxies.sql",
      unique_id: "model.opensource_observer.stg_mode__proxies",
      fqn: ["opensource_observer", "staging", "mode", "stg_mode__proxies"],
      alias: "stg_mode__proxies",
      checksum: {
        name: "sha256",
        checksum:
          "701e4020e99ed63ac3e8c39c528c1f15c1f79204a83233f181073aa7d4825082",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: "id",
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_key: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.896638,
      relation_name: "`opensource-observer`.`oso`.`stg_mode__proxies`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_key="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{% if is_incremental() %}\n  {% set start = "TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)" %}\n{% else %}\n  {% set start = "\'1970-01-01\'" %}\n{% endif %}\n{{ known_proxies("mode", start) }}',
      language: "sql",
      refs: [],
      sources: [["mode", "traces"]],
      metrics: [],
      depends_on: {
        macros: [
          "macro.dbt.is_incremental",
          "macro.opensource_observer.known_proxies",
        ],
        nodes: ["source.opensource_observer.mode.traces"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/mode/stg_mode__proxies.sql",
      compiled: true,
      compiled_code:
        "\n\n  \n\n\n\n\n\nwith proxy_contracts as (\n  select * \n    from UNNEST([ STRUCT\n    (\n      'SAFE' as proxy_type,\n      '1.4.1' as `version`,\n      LOWER('0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67') as factory_address\n    ),\n    ( \n      'SAFE',\n      '1.3.0',\n      LOWER('0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC')\n    ), \n    (\n      'SAFE',\n      '1.1.1',\n      LOWER('0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B')\n    ),\n    (\n      'SAFE',\n      '1.0.0',\n      LOWER('0x12302fE9c02ff50939BaAaaf415fc226C078613C')\n    ),  \n    (\n      'ENTRYPOINT',\n      '0.0.7',\n      LOWER('0x0000000071727De22E5E9d8BAf0edAc6f37da032')\n    ),\n    (\n      'ENTRYPOINT',\n      '0.0.6',\n      LOWER('0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789')\n    )\n  ])\n  \n),\nproxy_txns as (\n  select \n    traces.id,\n    traces.block_timestamp, \n    traces.transaction_hash,     \n    traces.from_address,\n    traces.to_address,\n    proxies.proxy_type,\n    case\n      when lower(traces.from_address) = lower(proxies.factory_address)\n      then traces.from_address\n      when lower(traces.to_address) = lower(proxies.factory_address)\n      then traces.to_address\n      else null\n    end as proxy_address\n  from `opensource-observer`.`superchain`.`mode_traces` as traces\n  inner join proxy_contracts as proxies\n    on lower(traces.from_address) = lower(proxies.factory_address)\n    or lower(traces.to_address) = lower(proxies.factory_address)\n  where\n    traces.block_timestamp >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)    \n    and traces.status = 1\n    and traces.trace_type = 'call'\n    and traces.call_type != 'staticcall'\n    and traces.from_address != traces.to_address\n)\nselect\n  id,\n  block_timestamp,\n  transaction_hash,\n  proxy_type,\n  proxy_address,\n  from_address,\n  to_address\nfrom proxy_txns\nwhere proxy_address is not null\n\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_mode__deployers": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_mode__deployers",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/mode/stg_mode__deployers.sql",
      original_file_path:
        "warehouse/dbt/models/staging/mode/stg_mode__deployers.sql",
      unique_id: "model.opensource_observer.stg_mode__deployers",
      fqn: ["opensource_observer", "staging", "mode", "stg_mode__deployers"],
      alias: "stg_mode__deployers",
      checksum: {
        name: "sha256",
        checksum:
          "2092907c7d7e995e1ad4d8fa6390523a98260bac49e1bd2bd3a08f678eff27f3",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.903758,
      relation_name: "`opensource-observer`.`oso`.`stg_mode__deployers`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="transaction_hash",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{{ transactions_with_receipts_deployers("mode") }}',
      language: "sql",
      refs: [],
      sources: [["mode", "transactions"]],
      metrics: [],
      depends_on: {
        macros: [
          "macro.opensource_observer.transactions_with_receipts_deployers",
        ],
        nodes: ["source.opensource_observer.mode.transactions"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/mode/stg_mode__deployers.sql",
      compiled: true,
      compiled_code:
        "\n\n\n\nSELECT\n  block_timestamp AS block_timestamp,\n  `hash` AS transaction_hash,\n  from_address AS deployer_address,\n  receipt_contract_address AS contract_address\nFROM `opensource-observer`.`superchain`.`mode_transactions`\nWHERE\n  to_address IS null\n  AND `receipt_status` = 1\n  \n  AND block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  \n\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_metal__proxies": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_metal__proxies",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/metal/stg_metal__proxies.sql",
      original_file_path:
        "warehouse/dbt/models/staging/metal/stg_metal__proxies.sql",
      unique_id: "model.opensource_observer.stg_metal__proxies",
      fqn: ["opensource_observer", "staging", "metal", "stg_metal__proxies"],
      alias: "stg_metal__proxies",
      checksum: {
        name: "sha256",
        checksum:
          "34e3ebf44b9a5565ba261fadc1d9db7e26eca0aa265793599f9dfd59a3c47e9e",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: "id",
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_key: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.9124017,
      relation_name: "`opensource-observer`.`oso`.`stg_metal__proxies`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_key="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{% if is_incremental() %}\n  {% set start = "TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)" %}\n{% else %}\n  {% set start = "\'1970-01-01\'" %}\n{% endif %}\n{{ known_proxies("metal", start) }}',
      language: "sql",
      refs: [],
      sources: [["metal", "traces"]],
      metrics: [],
      depends_on: {
        macros: [
          "macro.dbt.is_incremental",
          "macro.opensource_observer.known_proxies",
        ],
        nodes: ["source.opensource_observer.metal.traces"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/metal/stg_metal__proxies.sql",
      compiled: true,
      compiled_code:
        "\n\n  \n\n\n\n\n\nwith proxy_contracts as (\n  select * \n    from UNNEST([ STRUCT\n    (\n      'SAFE' as proxy_type,\n      '1.4.1' as `version`,\n      LOWER('0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67') as factory_address\n    ),\n    ( \n      'SAFE',\n      '1.3.0',\n      LOWER('0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC')\n    ), \n    (\n      'SAFE',\n      '1.1.1',\n      LOWER('0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B')\n    ),\n    (\n      'SAFE',\n      '1.0.0',\n      LOWER('0x12302fE9c02ff50939BaAaaf415fc226C078613C')\n    ),  \n    (\n      'ENTRYPOINT',\n      '0.0.7',\n      LOWER('0x0000000071727De22E5E9d8BAf0edAc6f37da032')\n    ),\n    (\n      'ENTRYPOINT',\n      '0.0.6',\n      LOWER('0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789')\n    )\n  ])\n  \n),\nproxy_txns as (\n  select \n    traces.id,\n    traces.block_timestamp, \n    traces.transaction_hash,     \n    traces.from_address,\n    traces.to_address,\n    proxies.proxy_type,\n    case\n      when lower(traces.from_address) = lower(proxies.factory_address)\n      then traces.from_address\n      when lower(traces.to_address) = lower(proxies.factory_address)\n      then traces.to_address\n      else null\n    end as proxy_address\n  from `opensource-observer`.`superchain`.`metal_traces` as traces\n  inner join proxy_contracts as proxies\n    on lower(traces.from_address) = lower(proxies.factory_address)\n    or lower(traces.to_address) = lower(proxies.factory_address)\n  where\n    traces.block_timestamp >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)    \n    and traces.status = 1\n    and traces.trace_type = 'call'\n    and traces.call_type != 'staticcall'\n    and traces.from_address != traces.to_address\n)\nselect\n  id,\n  block_timestamp,\n  transaction_hash,\n  proxy_type,\n  proxy_address,\n  from_address,\n  to_address\nfrom proxy_txns\nwhere proxy_address is not null\n\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_metal__deployers": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_metal__deployers",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/metal/stg_metal__deployers.sql",
      original_file_path:
        "warehouse/dbt/models/staging/metal/stg_metal__deployers.sql",
      unique_id: "model.opensource_observer.stg_metal__deployers",
      fqn: ["opensource_observer", "staging", "metal", "stg_metal__deployers"],
      alias: "stg_metal__deployers",
      checksum: {
        name: "sha256",
        checksum:
          "4a2ae86f3021063ef509ac931b53889525f9c25d78af2b7e80afc7177e288919",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.918211,
      relation_name: "`opensource-observer`.`oso`.`stg_metal__deployers`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="transaction_hash",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{{ transactions_with_receipts_deployers("metal") }}',
      language: "sql",
      refs: [],
      sources: [["metal", "transactions"]],
      metrics: [],
      depends_on: {
        macros: [
          "macro.opensource_observer.transactions_with_receipts_deployers",
        ],
        nodes: ["source.opensource_observer.metal.transactions"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/metal/stg_metal__deployers.sql",
      compiled: true,
      compiled_code:
        "\n\n\n\nSELECT\n  block_timestamp AS block_timestamp,\n  `hash` AS transaction_hash,\n  from_address AS deployer_address,\n  receipt_contract_address AS contract_address\nFROM `opensource-observer`.`superchain`.`metal_transactions`\nWHERE\n  to_address IS null\n  AND `receipt_status` = 1\n  \n  AND block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  \n\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_metal__factories": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_metal__factories",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/metal/stg_metal__factories.sql",
      original_file_path:
        "warehouse/dbt/models/staging/metal/stg_metal__factories.sql",
      unique_id: "model.opensource_observer.stg_metal__factories",
      fqn: ["opensource_observer", "staging", "metal", "stg_metal__factories"],
      alias: "stg_metal__factories",
      checksum: {
        name: "sha256",
        checksum:
          "247734967a1a95e9c0037c33765080e173767d956461306a1c59d17b3ab80243",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.9233403,
      relation_name: "`opensource-observer`.`oso`.`stg_metal__factories`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="transaction_hash",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  ) \n}}\n{{ factory_deployments("metal") }}',
      language: "sql",
      refs: [],
      sources: [
        ["metal", "transactions"],
        ["metal", "traces"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.factory_deployments"],
        nodes: [
          "source.opensource_observer.metal.transactions",
          "source.opensource_observer.metal.traces",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/metal/stg_metal__factories.sql",
      compiled: true,
      compiled_code:
        '\n\n\n\n\n\n\n\n\n\nWITH transactions AS (\n  SELECT *\n  FROM `opensource-observer`.`superchain`.`metal_transactions`\n  \n  WHERE block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  \n)\n\nselect \n  traces.block_timestamp, \n  traces.transaction_hash, \n  \n  txs.from_address as originating_address, \n  \n  txs.to_address as originating_contract,\n  traces.from_address as factory_address, \n  traces.to_address as contract_address\nfrom `opensource-observer`.`superchain`.`metal_traces` as traces\ninner join transactions as txs\n  on `txs`.`hash` = `traces`.`transaction_hash`\nwhere\n  LOWER(traces.from_address) != "0x3fab184622dc19b6109349b94811493bf2a45362"\n  and LOWER(trace_type) in ("create", "create2")\n  and status = 1\n\n  and `traces`.block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n\n\n',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_lens__profiles": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_lens__profiles",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/lens/stg_lens__profiles.sql",
      original_file_path:
        "warehouse/dbt/models/staging/lens/stg_lens__profiles.sql",
      unique_id: "model.opensource_observer.stg_lens__profiles",
      fqn: ["opensource_observer", "staging", "lens", "stg_lens__profiles"],
      alias: "stg_lens__profiles",
      checksum: {
        name: "sha256",
        checksum:
          "15d508274448431d8e3fd08170f0547663ece6ffb783aedc23a013abebea8e91",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.928771,
      relation_name: "`opensource-observer`.`oso`.`stg_lens__profiles`",
      raw_code:
        '{#\n  Get all profile_ids mapped to the owner address and profile metadata\n#}\n\nselect\n  {{ oso_id(\'"oso"\', \'profile_id\') }} as user_id,\n  profiles.profile_id as lens_profile_id,\n  profiles.name as full_name,\n  profiles.bio as bio,\n  profiles.profile_picture_snapshot_location_url as profile_picture_url,\n  profiles.cover_picture_snapshot_location_url as cover_picture_url\nfrom {{ source("lens", "lens_profiles") }} as profiles',
      language: "sql",
      refs: [],
      sources: [["lens", "lens_profiles"]],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.oso_id"],
        nodes: ["source.opensource_observer.lens.lens_profiles"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/lens/stg_lens__profiles.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(\"oso\", profile_id))), '+', '-'), '/', '_') as user_id,\n  profiles.profile_id as lens_profile_id,\n  profiles.name as full_name,\n  profiles.bio as bio,\n  profiles.profile_picture_snapshot_location_url as profile_picture_url,\n  profiles.cover_picture_snapshot_location_url as cover_picture_url\nfrom `opensource-observer`.`lens_v2_polygon`.`profile_metadata` as profiles",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_lens__owners": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_lens__owners",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/lens/stg_lens__owners.sql",
      original_file_path:
        "warehouse/dbt/models/staging/lens/stg_lens__owners.sql",
      unique_id: "model.opensource_observer.stg_lens__owners",
      fqn: ["opensource_observer", "staging", "lens", "stg_lens__owners"],
      alias: "stg_lens__owners",
      checksum: {
        name: "sha256",
        checksum:
          "df713890e67572d7715c9ac7884aa94dadf93aced740210ef199c09cdf79ec24",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.9334056,
      relation_name: "`opensource-observer`.`oso`.`stg_lens__owners`",
      raw_code:
        '{#\n  Get the latest owners\n#}\n\nwith lens_owners_ordered as (\n  select\n    *,\n    ROW_NUMBER() over (partition by profile_id order by block_number desc)\n      as row_number\n  from {{ source("lens", "lens_owners") }}\n)\n\nselect\n  lens_owners_ordered.profile_id,\n  lens_owners_ordered.owned_by\nfrom lens_owners_ordered\nwhere row_number = 1\norder by lens_owners_ordered.profile_id',
      language: "sql",
      refs: [],
      sources: [["lens", "lens_owners"]],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["source.opensource_observer.lens.lens_owners"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/lens/stg_lens__owners.sql",
      compiled: true,
      compiled_code:
        "\n\nwith lens_owners_ordered as (\n  select\n    *,\n    ROW_NUMBER() over (partition by profile_id order by block_number desc)\n      as row_number\n  from `opensource-observer`.`lens_v2_polygon`.`profile_ownership_history`\n)\n\nselect\n  lens_owners_ordered.profile_id,\n  lens_owners_ordered.owned_by\nfrom lens_owners_ordered\nwhere row_number = 1\norder by lens_owners_ordered.profile_id",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_frax__factories": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_frax__factories",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/frax/stg_frax__factories.sql",
      original_file_path:
        "warehouse/dbt/models/staging/frax/stg_frax__factories.sql",
      unique_id: "model.opensource_observer.stg_frax__factories",
      fqn: ["opensource_observer", "staging", "frax", "stg_frax__factories"],
      alias: "stg_frax__factories",
      checksum: {
        name: "sha256",
        checksum:
          "057a7258246e556c767a0c495c0c2ed164ce5a57c46f93dee8d78f01a2c58e40",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.9354465,
      relation_name: "`opensource-observer`.`oso`.`stg_frax__factories`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="transaction_hash",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  ) \n}}\n{{ factory_deployments("frax") }}',
      language: "sql",
      refs: [],
      sources: [
        ["frax", "transactions"],
        ["frax", "traces"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.factory_deployments"],
        nodes: [
          "source.opensource_observer.frax.transactions",
          "source.opensource_observer.frax.traces",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/frax/stg_frax__factories.sql",
      compiled: true,
      compiled_code:
        '\n\n\n\n\n\n\n\n\n\nWITH transactions AS (\n  SELECT *\n  FROM `opensource-observer`.`superchain`.`frax_transactions`\n  \n  WHERE block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  \n)\n\nselect \n  traces.block_timestamp, \n  traces.transaction_hash, \n  \n  txs.from_address as originating_address, \n  \n  txs.to_address as originating_contract,\n  traces.from_address as factory_address, \n  traces.to_address as contract_address\nfrom `opensource-observer`.`superchain`.`frax_traces` as traces\ninner join transactions as txs\n  on `txs`.`hash` = `traces`.`transaction_hash`\nwhere\n  LOWER(traces.from_address) != "0x3fab184622dc19b6109349b94811493bf2a45362"\n  and LOWER(trace_type) in ("create", "create2")\n  and status = 1\n\n  and `traces`.block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n\n\n',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_frax__deployers": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_frax__deployers",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/frax/stg_frax__deployers.sql",
      original_file_path:
        "warehouse/dbt/models/staging/frax/stg_frax__deployers.sql",
      unique_id: "model.opensource_observer.stg_frax__deployers",
      fqn: ["opensource_observer", "staging", "frax", "stg_frax__deployers"],
      alias: "stg_frax__deployers",
      checksum: {
        name: "sha256",
        checksum:
          "003b88713961804dd7c1910ada02e680405151560704182ff5baea2fd09c969e",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.9422324,
      relation_name: "`opensource-observer`.`oso`.`stg_frax__deployers`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="transaction_hash",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  ) \n}}\n{{ transactions_with_receipts_deployers("frax") }}',
      language: "sql",
      refs: [],
      sources: [["frax", "transactions"]],
      metrics: [],
      depends_on: {
        macros: [
          "macro.opensource_observer.transactions_with_receipts_deployers",
        ],
        nodes: ["source.opensource_observer.frax.transactions"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/frax/stg_frax__deployers.sql",
      compiled: true,
      compiled_code:
        "\n\n\n\nSELECT\n  block_timestamp AS block_timestamp,\n  `hash` AS transaction_hash,\n  from_address AS deployer_address,\n  receipt_contract_address AS contract_address\nFROM `opensource-observer`.`superchain`.`frax_transactions`\nWHERE\n  to_address IS null\n  AND `receipt_status` = 1\n  \n  AND block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  \n\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_frax__proxies": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_frax__proxies",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/frax/stg_frax__proxies.sql",
      original_file_path:
        "warehouse/dbt/models/staging/frax/stg_frax__proxies.sql",
      unique_id: "model.opensource_observer.stg_frax__proxies",
      fqn: ["opensource_observer", "staging", "frax", "stg_frax__proxies"],
      alias: "stg_frax__proxies",
      checksum: {
        name: "sha256",
        checksum:
          "e78e58cb3f0e9c9eeaa15e0e452baf5d6b24af088d46b3989719eac86b9d37a7",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: "id",
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_key: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.9473238,
      relation_name: "`opensource-observer`.`oso`.`stg_frax__proxies`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_key="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{% if is_incremental() %}\n  {% set start = "TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)" %}\n{% else %}\n  {% set start = "\'1970-01-01\'" %}\n{% endif %}\n{{ known_proxies("frax", start) }}',
      language: "sql",
      refs: [],
      sources: [["frax", "traces"]],
      metrics: [],
      depends_on: {
        macros: [
          "macro.dbt.is_incremental",
          "macro.opensource_observer.known_proxies",
        ],
        nodes: ["source.opensource_observer.frax.traces"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/frax/stg_frax__proxies.sql",
      compiled: true,
      compiled_code:
        "\n\n  \n\n\n\n\n\nwith proxy_contracts as (\n  select * \n    from UNNEST([ STRUCT\n    (\n      'SAFE' as proxy_type,\n      '1.4.1' as `version`,\n      LOWER('0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67') as factory_address\n    ),\n    ( \n      'SAFE',\n      '1.3.0',\n      LOWER('0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC')\n    ), \n    (\n      'SAFE',\n      '1.1.1',\n      LOWER('0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B')\n    ),\n    (\n      'SAFE',\n      '1.0.0',\n      LOWER('0x12302fE9c02ff50939BaAaaf415fc226C078613C')\n    ),  \n    (\n      'ENTRYPOINT',\n      '0.0.7',\n      LOWER('0x0000000071727De22E5E9d8BAf0edAc6f37da032')\n    ),\n    (\n      'ENTRYPOINT',\n      '0.0.6',\n      LOWER('0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789')\n    )\n  ])\n  \n),\nproxy_txns as (\n  select \n    traces.id,\n    traces.block_timestamp, \n    traces.transaction_hash,     \n    traces.from_address,\n    traces.to_address,\n    proxies.proxy_type,\n    case\n      when lower(traces.from_address) = lower(proxies.factory_address)\n      then traces.from_address\n      when lower(traces.to_address) = lower(proxies.factory_address)\n      then traces.to_address\n      else null\n    end as proxy_address\n  from `opensource-observer`.`superchain`.`frax_traces` as traces\n  inner join proxy_contracts as proxies\n    on lower(traces.from_address) = lower(proxies.factory_address)\n    or lower(traces.to_address) = lower(proxies.factory_address)\n  where\n    traces.block_timestamp >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)    \n    and traces.status = 1\n    and traces.trace_type = 'call'\n    and traces.call_type != 'staticcall'\n    and traces.from_address != traces.to_address\n)\nselect\n  id,\n  block_timestamp,\n  transaction_hash,\n  proxy_type,\n  proxy_address,\n  from_address,\n  to_address\nfrom proxy_txns\nwhere proxy_address is not null\n\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_karma3__globaltrust": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_karma3__globaltrust",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/karma3/stg_karma3__globaltrust.sql",
      original_file_path:
        "warehouse/dbt/models/staging/karma3/stg_karma3__globaltrust.sql",
      unique_id: "model.opensource_observer.stg_karma3__globaltrust",
      fqn: [
        "opensource_observer",
        "staging",
        "karma3",
        "stg_karma3__globaltrust",
      ],
      alias: "stg_karma3__globaltrust",
      checksum: {
        name: "sha256",
        checksum:
          "db2857913f714a9f0cbbb71a7ff784df737c1c6d4fb4daad84c801542db6760f",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          data_type: "timestamp",
          granularity: "day",
          field: "snapshot_time",
        },
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "table",
        partition_by: {
          data_type: "timestamp",
          granularity: "day",
          field: "snapshot_time",
        },
      },
      created_at: 1719978675.9530096,
      relation_name: "`opensource-observer`.`oso`.`stg_karma3__globaltrust`",
      raw_code:
        '{#\n  Get all Karma3 EigenTrust scores\n  for Farcaster IDs\n#}\n\n{{\n  config(\n    materialized=\'table\',\n    partition_by={\n      "field": "snapshot_time",\n      "data_type": "timestamp",\n      "granularity": "day"\n    }\n  )\n}}\n\nselect\n  strategy_id,\n  i as farcaster_id,\n  CAST(v as numeric) as eigentrust_rank,\n  CAST(date as timestamp) as snapshot_time\nfrom {{ source("karma3", "globaltrust") }}',
      language: "sql",
      refs: [],
      sources: [["karma3", "globaltrust"]],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["source.opensource_observer.karma3.globaltrust"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/karma3/stg_karma3__globaltrust.sql",
      compiled: true,
      compiled_code:
        "\n\n\n\nselect\n  strategy_id,\n  i as farcaster_id,\n  CAST(v as numeric) as eigentrust_rank,\n  CAST(date as timestamp) as snapshot_time\nfrom `opensource-observer`.`karma3`.`globaltrust`",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_karma3__localtrust": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_karma3__localtrust",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/karma3/stg_karma3__localtrust.sql",
      original_file_path:
        "warehouse/dbt/models/staging/karma3/stg_karma3__localtrust.sql",
      unique_id: "model.opensource_observer.stg_karma3__localtrust",
      fqn: [
        "opensource_observer",
        "staging",
        "karma3",
        "stg_karma3__localtrust",
      ],
      alias: "stg_karma3__localtrust",
      checksum: {
        name: "sha256",
        checksum:
          "d3c2ffd9e23716bf29932f6c50647b996b8b9339d24c9c684537f7d52d2f3d7f",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "farcaster_id",
          data_type: "int64",
          range: { start: 0, end: 1000000, interval: 25000 },
        },
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "table",
        partition_by: {
          field: "farcaster_id",
          data_type: "int64",
          range: { start: 0, end: 1000000, interval: 25000 },
        },
      },
      created_at: 1719978675.9554226,
      relation_name: "`opensource-observer`.`oso`.`stg_karma3__localtrust`",
      raw_code:
        '{#\n  Get all Karma3 EigenTrust scores\n  for Farcaster IDs - Local Trust\n#}\n\n{{\n  config(\n    materialized=\'table\',\n    partition_by={\n      "field": "farcaster_id",\n      "data_type": "int64",\n      "range": {\n        "start": 0,\n        "end": 1000000,\n        "interval": 25000\n      }\n    }\n  )\n}}\n\nselect\n  strategy_id,\n  i as farcaster_id,\n  j as peer_farcaster_id,\n  CAST(v as numeric) as eigentrust_rank,\n  CAST(date as timestamp) as snapshot_time\nfrom {{ source("karma3", "localtrust") }}',
      language: "sql",
      refs: [],
      sources: [["karma3", "localtrust"]],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["source.opensource_observer.karma3.localtrust"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/karma3/stg_karma3__localtrust.sql",
      compiled: true,
      compiled_code:
        "\n\n\n\nselect\n  strategy_id,\n  i as farcaster_id,\n  j as peer_farcaster_id,\n  CAST(v as numeric) as eigentrust_rank,\n  CAST(date as timestamp) as snapshot_time\nfrom `opensource-observer`.`karma3`.`localtrust`",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_passport__scores": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_passport__scores",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/passport/stg_passport__scores.sql",
      original_file_path:
        "warehouse/dbt/models/staging/passport/stg_passport__scores.sql",
      unique_id: "model.opensource_observer.stg_passport__scores",
      fqn: [
        "opensource_observer",
        "staging",
        "passport",
        "stg_passport__scores",
      ],
      alias: "stg_passport__scores",
      checksum: {
        name: "sha256",
        checksum:
          "e8602c77dd343196d12847ea2c40d2774afe489bf5644ba148fb3fe173d8e730",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: { materialized: "view" },
      created_at: 1719978675.96052,
      relation_name: "`opensource-observer`.`oso`.`stg_passport__scores`",
      raw_code:
        '{#\n  Get all passport scores\n#}\n\nselect\n  LOWER(p.passport_address) as passport_address,\n  CAST(p.evidence_rawscore as numeric) as evidence_rawscore,\n  CAST(p.evidence_threshold as numeric) as evidence_threshold,\n  CAST(p.last_score_timestamp as timestamp) as last_score_timestamp\nfrom {{ source("gitcoin", "passport_scores") }} as p',
      language: "sql",
      refs: [],
      sources: [["gitcoin", "passport_scores"]],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["source.opensource_observer.gitcoin.passport_scores"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/passport/stg_passport__scores.sql",
      compiled: true,
      compiled_code:
        "\n\nselect\n  LOWER(p.passport_address) as passport_address,\n  CAST(p.evidence_rawscore as numeric) as evidence_rawscore,\n  CAST(p.evidence_threshold as numeric) as evidence_threshold,\n  CAST(p.last_score_timestamp as timestamp) as last_score_timestamp\nfrom `opensource-observer`.`gitcoin`.`passport_scores` as p",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_pgn__deployers": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_pgn__deployers",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/pgn/stg_pgn__deployers.sql",
      original_file_path:
        "warehouse/dbt/models/staging/pgn/stg_pgn__deployers.sql",
      unique_id: "model.opensource_observer.stg_pgn__deployers",
      fqn: ["opensource_observer", "staging", "pgn", "stg_pgn__deployers"],
      alias: "stg_pgn__deployers",
      checksum: {
        name: "sha256",
        checksum:
          "1165c87bddbc2cce71ddf73c048ecfacb82add3debcd0c82ebaf6101f5f078be",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.9624875,
      relation_name: "`opensource-observer`.`oso`.`stg_pgn__deployers`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="transaction_hash",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  ) \n}}\n{{ transactions_with_receipts_deployers("pgn") }}',
      language: "sql",
      refs: [],
      sources: [["pgn", "transactions"]],
      metrics: [],
      depends_on: {
        macros: [
          "macro.opensource_observer.transactions_with_receipts_deployers",
        ],
        nodes: ["source.opensource_observer.pgn.transactions"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/pgn/stg_pgn__deployers.sql",
      compiled: true,
      compiled_code:
        "\n\n\n\nSELECT\n  block_timestamp AS block_timestamp,\n  `hash` AS transaction_hash,\n  from_address AS deployer_address,\n  receipt_contract_address AS contract_address\nFROM `opensource-observer`.`superchain`.`pgn_transactions`\nWHERE\n  to_address IS null\n  AND `receipt_status` = 1\n  \n  AND block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  \n\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_pgn__factories": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_pgn__factories",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/pgn/stg_pgn__factories.sql",
      original_file_path:
        "warehouse/dbt/models/staging/pgn/stg_pgn__factories.sql",
      unique_id: "model.opensource_observer.stg_pgn__factories",
      fqn: ["opensource_observer", "staging", "pgn", "stg_pgn__factories"],
      alias: "stg_pgn__factories",
      checksum: {
        name: "sha256",
        checksum:
          "93679157224ad20d8714593c4166bac1174aa7ad067575fc71b59655b9a79436",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.9674115,
      relation_name: "`opensource-observer`.`oso`.`stg_pgn__factories`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="transaction_hash",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  ) \n}}\n{{ factory_deployments("pgn") }}',
      language: "sql",
      refs: [],
      sources: [
        ["pgn", "transactions"],
        ["pgn", "traces"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.factory_deployments"],
        nodes: [
          "source.opensource_observer.pgn.transactions",
          "source.opensource_observer.pgn.traces",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/pgn/stg_pgn__factories.sql",
      compiled: true,
      compiled_code:
        '\n\n\n\n\n\n\n\n\n\nWITH transactions AS (\n  SELECT *\n  FROM `opensource-observer`.`superchain`.`pgn_transactions`\n  \n  WHERE block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  \n)\n\nselect \n  traces.block_timestamp, \n  traces.transaction_hash, \n  \n  txs.from_address as originating_address, \n  \n  txs.to_address as originating_contract,\n  traces.from_address as factory_address, \n  traces.to_address as contract_address\nfrom `opensource-observer`.`superchain`.`pgn_traces` as traces\ninner join transactions as txs\n  on `txs`.`hash` = `traces`.`transaction_hash`\nwhere\n  LOWER(traces.from_address) != "0x3fab184622dc19b6109349b94811493bf2a45362"\n  and LOWER(trace_type) in ("create", "create2")\n  and status = 1\n\n  and `traces`.block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n\n\n',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_pgn__proxies": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_pgn__proxies",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/pgn/stg_pgn__proxies.sql",
      original_file_path:
        "warehouse/dbt/models/staging/pgn/stg_pgn__proxies.sql",
      unique_id: "model.opensource_observer.stg_pgn__proxies",
      fqn: ["opensource_observer", "staging", "pgn", "stg_pgn__proxies"],
      alias: "stg_pgn__proxies",
      checksum: {
        name: "sha256",
        checksum:
          "cb9a0c11fcdacb2bbe00df1fe0b013441cc673fc0bf23382e61440bf5e41a09e",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: "id",
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_key: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.97239,
      relation_name: "`opensource-observer`.`oso`.`stg_pgn__proxies`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_key="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{% if is_incremental() %}\n  {% set start = "TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)" %}\n{% else %}\n  {% set start = "\'1970-01-01\'" %}\n{% endif %}\n{{ known_proxies("pgn", start) }}',
      language: "sql",
      refs: [],
      sources: [["pgn", "traces"]],
      metrics: [],
      depends_on: {
        macros: [
          "macro.dbt.is_incremental",
          "macro.opensource_observer.known_proxies",
        ],
        nodes: ["source.opensource_observer.pgn.traces"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/pgn/stg_pgn__proxies.sql",
      compiled: true,
      compiled_code:
        "\n\n  \n\n\n\n\n\nwith proxy_contracts as (\n  select * \n    from UNNEST([ STRUCT\n    (\n      'SAFE' as proxy_type,\n      '1.4.1' as `version`,\n      LOWER('0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67') as factory_address\n    ),\n    ( \n      'SAFE',\n      '1.3.0',\n      LOWER('0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC')\n    ), \n    (\n      'SAFE',\n      '1.1.1',\n      LOWER('0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B')\n    ),\n    (\n      'SAFE',\n      '1.0.0',\n      LOWER('0x12302fE9c02ff50939BaAaaf415fc226C078613C')\n    ),  \n    (\n      'ENTRYPOINT',\n      '0.0.7',\n      LOWER('0x0000000071727De22E5E9d8BAf0edAc6f37da032')\n    ),\n    (\n      'ENTRYPOINT',\n      '0.0.6',\n      LOWER('0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789')\n    )\n  ])\n  \n),\nproxy_txns as (\n  select \n    traces.id,\n    traces.block_timestamp, \n    traces.transaction_hash,     \n    traces.from_address,\n    traces.to_address,\n    proxies.proxy_type,\n    case\n      when lower(traces.from_address) = lower(proxies.factory_address)\n      then traces.from_address\n      when lower(traces.to_address) = lower(proxies.factory_address)\n      then traces.to_address\n      else null\n    end as proxy_address\n  from `opensource-observer`.`superchain`.`pgn_traces` as traces\n  inner join proxy_contracts as proxies\n    on lower(traces.from_address) = lower(proxies.factory_address)\n    or lower(traces.to_address) = lower(proxies.factory_address)\n  where\n    traces.block_timestamp >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)    \n    and traces.status = 1\n    and traces.trace_type = 'call'\n    and traces.call_type != 'staticcall'\n    and traces.from_address != traces.to_address\n)\nselect\n  id,\n  block_timestamp,\n  transaction_hash,\n  proxy_type,\n  proxy_address,\n  from_address,\n  to_address\nfrom proxy_txns\nwhere proxy_address is not null\n\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_zora__proxies": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_zora__proxies",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/zora/stg_zora__proxies.sql",
      original_file_path:
        "warehouse/dbt/models/staging/zora/stg_zora__proxies.sql",
      unique_id: "model.opensource_observer.stg_zora__proxies",
      fqn: ["opensource_observer", "staging", "zora", "stg_zora__proxies"],
      alias: "stg_zora__proxies",
      checksum: {
        name: "sha256",
        checksum:
          "3a02f7e2adfd5c8f7d7dc1d735af03a4d3a5c5232d9b608e2461c07404090679",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: "id",
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_key: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.97797,
      relation_name: "`opensource-observer`.`oso`.`stg_zora__proxies`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_key="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{% if is_incremental() %}\n  {% set start = "TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)" %}\n{% else %}\n  {% set start = "\'1970-01-01\'" %}\n{% endif %}\n{{ known_proxies("zora", start) }}',
      language: "sql",
      refs: [],
      sources: [["zora", "traces"]],
      metrics: [],
      depends_on: {
        macros: [
          "macro.dbt.is_incremental",
          "macro.opensource_observer.known_proxies",
        ],
        nodes: ["source.opensource_observer.zora.traces"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/zora/stg_zora__proxies.sql",
      compiled: true,
      compiled_code:
        "\n\n  \n\n\n\n\n\nwith proxy_contracts as (\n  select * \n    from UNNEST([ STRUCT\n    (\n      'SAFE' as proxy_type,\n      '1.4.1' as `version`,\n      LOWER('0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67') as factory_address\n    ),\n    ( \n      'SAFE',\n      '1.3.0',\n      LOWER('0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC')\n    ), \n    (\n      'SAFE',\n      '1.1.1',\n      LOWER('0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B')\n    ),\n    (\n      'SAFE',\n      '1.0.0',\n      LOWER('0x12302fE9c02ff50939BaAaaf415fc226C078613C')\n    ),  \n    (\n      'ENTRYPOINT',\n      '0.0.7',\n      LOWER('0x0000000071727De22E5E9d8BAf0edAc6f37da032')\n    ),\n    (\n      'ENTRYPOINT',\n      '0.0.6',\n      LOWER('0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789')\n    )\n  ])\n  \n),\nproxy_txns as (\n  select \n    traces.id,\n    traces.block_timestamp, \n    traces.transaction_hash,     \n    traces.from_address,\n    traces.to_address,\n    proxies.proxy_type,\n    case\n      when lower(traces.from_address) = lower(proxies.factory_address)\n      then traces.from_address\n      when lower(traces.to_address) = lower(proxies.factory_address)\n      then traces.to_address\n      else null\n    end as proxy_address\n  from `opensource-observer`.`superchain`.`zora_traces` as traces\n  inner join proxy_contracts as proxies\n    on lower(traces.from_address) = lower(proxies.factory_address)\n    or lower(traces.to_address) = lower(proxies.factory_address)\n  where\n    traces.block_timestamp >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)    \n    and traces.status = 1\n    and traces.trace_type = 'call'\n    and traces.call_type != 'staticcall'\n    and traces.from_address != traces.to_address\n)\nselect\n  id,\n  block_timestamp,\n  transaction_hash,\n  proxy_type,\n  proxy_address,\n  from_address,\n  to_address\nfrom proxy_txns\nwhere proxy_address is not null\n\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_zora__deployers": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_zora__deployers",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/zora/stg_zora__deployers.sql",
      original_file_path:
        "warehouse/dbt/models/staging/zora/stg_zora__deployers.sql",
      unique_id: "model.opensource_observer.stg_zora__deployers",
      fqn: ["opensource_observer", "staging", "zora", "stg_zora__deployers"],
      alias: "stg_zora__deployers",
      checksum: {
        name: "sha256",
        checksum:
          "2715055be67267b1f3f5d8dff114344fd20d283715d0326964dfa86851f76881",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.9833794,
      relation_name: "`opensource-observer`.`oso`.`stg_zora__deployers`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="transaction_hash",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  ) \n}}\n{{ transactions_with_receipts_deployers("zora") }}',
      language: "sql",
      refs: [],
      sources: [["zora", "transactions"]],
      metrics: [],
      depends_on: {
        macros: [
          "macro.opensource_observer.transactions_with_receipts_deployers",
        ],
        nodes: ["source.opensource_observer.zora.transactions"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/zora/stg_zora__deployers.sql",
      compiled: true,
      compiled_code:
        "\n\n\n\nSELECT\n  block_timestamp AS block_timestamp,\n  `hash` AS transaction_hash,\n  from_address AS deployer_address,\n  receipt_contract_address AS contract_address\nFROM `opensource-observer`.`superchain`.`zora_transactions`\nWHERE\n  to_address IS null\n  AND `receipt_status` = 1\n  \n  AND block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  \n\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_zora__factories": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_zora__factories",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/zora/stg_zora__factories.sql",
      original_file_path:
        "warehouse/dbt/models/staging/zora/stg_zora__factories.sql",
      unique_id: "model.opensource_observer.stg_zora__factories",
      fqn: ["opensource_observer", "staging", "zora", "stg_zora__factories"],
      alias: "stg_zora__factories",
      checksum: {
        name: "sha256",
        checksum:
          "ba1810b4ef89c314fd79a01085d4c3e06ba99a7f055854a87ed501f26b22e00e",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.9881985,
      relation_name: "`opensource-observer`.`oso`.`stg_zora__factories`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="transaction_hash",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  ) \n}}\n{{ factory_deployments("zora") }}',
      language: "sql",
      refs: [],
      sources: [
        ["zora", "transactions"],
        ["zora", "traces"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.factory_deployments"],
        nodes: [
          "source.opensource_observer.zora.transactions",
          "source.opensource_observer.zora.traces",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/zora/stg_zora__factories.sql",
      compiled: true,
      compiled_code:
        '\n\n\n\n\n\n\n\n\n\nWITH transactions AS (\n  SELECT *\n  FROM `opensource-observer`.`superchain`.`zora_transactions`\n  \n  WHERE block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  \n)\n\nselect \n  traces.block_timestamp, \n  traces.transaction_hash, \n  \n  txs.from_address as originating_address, \n  \n  txs.to_address as originating_contract,\n  traces.from_address as factory_address, \n  traces.to_address as contract_address\nfrom `opensource-observer`.`superchain`.`zora_traces` as traces\ninner join transactions as txs\n  on `txs`.`hash` = `traces`.`transaction_hash`\nwhere\n  LOWER(traces.from_address) != "0x3fab184622dc19b6109349b94811493bf2a45362"\n  and LOWER(trace_type) in ("create", "create2")\n  and status = 1\n\n  and `traces`.block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n\n\n',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_base__proxies": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_base__proxies",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/base/stg_base__proxies.sql",
      original_file_path:
        "warehouse/dbt/models/staging/base/stg_base__proxies.sql",
      unique_id: "model.opensource_observer.stg_base__proxies",
      fqn: ["opensource_observer", "staging", "base", "stg_base__proxies"],
      alias: "stg_base__proxies",
      checksum: {
        name: "sha256",
        checksum:
          "66059a4fb8e20ea08468c79795611e3ac1e0b336f3cdc890c02d1da62241ec54",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: "id",
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_key: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.9929771,
      relation_name: "`opensource-observer`.`oso`.`stg_base__proxies`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_key="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{% if is_incremental() %}\n  {% set start = "TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)" %}\n{% else %}\n  {% set start = "\'1970-01-01\'" %}\n{% endif %}\n{{ known_proxies("base", start) }}',
      language: "sql",
      refs: [],
      sources: [["base", "traces"]],
      metrics: [],
      depends_on: {
        macros: [
          "macro.dbt.is_incremental",
          "macro.opensource_observer.known_proxies",
        ],
        nodes: ["source.opensource_observer.base.traces"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/base/stg_base__proxies.sql",
      compiled: true,
      compiled_code:
        "\n\n  \n\n\n\n\n\nwith proxy_contracts as (\n  select * \n    from UNNEST([ STRUCT\n    (\n      'SAFE' as proxy_type,\n      '1.4.1' as `version`,\n      LOWER('0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67') as factory_address\n    ),\n    ( \n      'SAFE',\n      '1.3.0',\n      LOWER('0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC')\n    ), \n    (\n      'SAFE',\n      '1.1.1',\n      LOWER('0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B')\n    ),\n    (\n      'SAFE',\n      '1.0.0',\n      LOWER('0x12302fE9c02ff50939BaAaaf415fc226C078613C')\n    ),  \n    (\n      'ENTRYPOINT',\n      '0.0.7',\n      LOWER('0x0000000071727De22E5E9d8BAf0edAc6f37da032')\n    ),\n    (\n      'ENTRYPOINT',\n      '0.0.6',\n      LOWER('0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789')\n    )\n  ])\n  \n),\nproxy_txns as (\n  select \n    traces.id,\n    traces.block_timestamp, \n    traces.transaction_hash,     \n    traces.from_address,\n    traces.to_address,\n    proxies.proxy_type,\n    case\n      when lower(traces.from_address) = lower(proxies.factory_address)\n      then traces.from_address\n      when lower(traces.to_address) = lower(proxies.factory_address)\n      then traces.to_address\n      else null\n    end as proxy_address\n  from `opensource-observer`.`superchain`.`base_traces` as traces\n  inner join proxy_contracts as proxies\n    on lower(traces.from_address) = lower(proxies.factory_address)\n    or lower(traces.to_address) = lower(proxies.factory_address)\n  where\n    traces.block_timestamp >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)    \n    and traces.status = 1\n    and traces.trace_type = 'call'\n    and traces.call_type != 'staticcall'\n    and traces.from_address != traces.to_address\n)\nselect\n  id,\n  block_timestamp,\n  transaction_hash,\n  proxy_type,\n  proxy_address,\n  from_address,\n  to_address\nfrom proxy_txns\nwhere proxy_address is not null\n\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_base__deployers": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_base__deployers",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/base/stg_base__deployers.sql",
      original_file_path:
        "warehouse/dbt/models/staging/base/stg_base__deployers.sql",
      unique_id: "model.opensource_observer.stg_base__deployers",
      fqn: ["opensource_observer", "staging", "base", "stg_base__deployers"],
      alias: "stg_base__deployers",
      checksum: {
        name: "sha256",
        checksum:
          "884077739d4ce10d6e5c1e222e5cb375eec3732ee1b5aa2f80981b5d4dd5af95",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978675.9996288,
      relation_name: "`opensource-observer`.`oso`.`stg_base__deployers`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="transaction_hash",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  ) \n}}\n{{ transactions_with_receipts_deployers("base") }}',
      language: "sql",
      refs: [],
      sources: [["base", "transactions"]],
      metrics: [],
      depends_on: {
        macros: [
          "macro.opensource_observer.transactions_with_receipts_deployers",
        ],
        nodes: ["source.opensource_observer.base.transactions"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/base/stg_base__deployers.sql",
      compiled: true,
      compiled_code:
        "\n\n\n\nSELECT\n  block_timestamp AS block_timestamp,\n  `hash` AS transaction_hash,\n  from_address AS deployer_address,\n  receipt_contract_address AS contract_address\nFROM `opensource-observer`.`superchain`.`base_transactions`\nWHERE\n  to_address IS null\n  AND `receipt_status` = 1\n  \n  AND block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  \n\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_base__factories": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_base__factories",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/base/stg_base__factories.sql",
      original_file_path:
        "warehouse/dbt/models/staging/base/stg_base__factories.sql",
      unique_id: "model.opensource_observer.stg_base__factories",
      fqn: ["opensource_observer", "staging", "base", "stg_base__factories"],
      alias: "stg_base__factories",
      checksum: {
        name: "sha256",
        checksum:
          "5b5bf750ef8bd6f6d3b7f92f169b4f88c9c0b741ce098caab3f0b0b6e7e41dae",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978676.004391,
      relation_name: "`opensource-observer`.`oso`.`stg_base__factories`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="transaction_hash",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  ) \n}}\n{{ factory_deployments("base") }}',
      language: "sql",
      refs: [],
      sources: [
        ["base", "transactions"],
        ["base", "traces"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.factory_deployments"],
        nodes: [
          "source.opensource_observer.base.transactions",
          "source.opensource_observer.base.traces",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/base/stg_base__factories.sql",
      compiled: true,
      compiled_code:
        '\n\n\n\n\n\n\n\n\n\nWITH transactions AS (\n  SELECT *\n  FROM `opensource-observer`.`superchain`.`base_transactions`\n  \n  WHERE block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  \n)\n\nselect \n  traces.block_timestamp, \n  traces.transaction_hash, \n  \n  txs.from_address as originating_address, \n  \n  txs.to_address as originating_contract,\n  traces.from_address as factory_address, \n  traces.to_address as contract_address\nfrom `opensource-observer`.`superchain`.`base_traces` as traces\ninner join transactions as txs\n  on `txs`.`hash` = `traces`.`transaction_hash`\nwhere\n  LOWER(traces.from_address) != "0x3fab184622dc19b6109349b94811493bf2a45362"\n  and LOWER(trace_type) in ("create", "create2")\n  and status = 1\n\n  and `traces`.block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n\n\n',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_ossd__current_collections": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_ossd__current_collections",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/oss-directory/stg_ossd__current_collections.sql",
      original_file_path:
        "warehouse/dbt/models/staging/oss-directory/stg_ossd__current_collections.sql",
      unique_id: "model.opensource_observer.stg_ossd__current_collections",
      fqn: [
        "opensource_observer",
        "staging",
        "oss-directory",
        "stg_ossd__current_collections",
      ],
      alias: "stg_ossd__current_collections",
      checksum: {
        name: "sha256",
        checksum:
          "1755a13f3a88f005c16d2a103e1dea6a81b32837c46e5af80bbb0809e09b5664",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: ["staging", "oss-directory", "collection"],
        meta: { contributors: "oso-team, tomfutago" },
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: ["staging", "oss-directory", "collection"],
      description: "Collections",
      columns: {
        id: {
          name: "id",
          description:
            "collection unique id - SHA256 hash derived from namespace and slug",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        namespace: {
          name: "namespace",
          description: "namespace",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        _cq_sync_time: {
          name: "_cq_sync_time",
          description: "sync time",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        _cq_source_name: {
          name: "_cq_source_name",
          description: "source name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        slug: {
          name: "slug",
          description: "slug",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        name: {
          name: "name",
          description: "collection name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        version: {
          name: "version",
          description: "collection version",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        projects: {
          name: "projects",
          description: "list of projects",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        sync_time: {
          name: "sync_time",
          description: "sync time",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
      },
      meta: { contributors: "oso-team, tomfutago" },
      group: null,
      docs: { show: true, node_color: null },
      patch_path:
        "opensource_observer://warehouse/dbt/models/staging/oss-directory/stg_ossd__schema.yml",
      build_path: null,
      unrendered_config: {
        materialized: "view",
        tags: ["staging", "oss-directory", "collection"],
        meta: { contributors: "oso-team, tomfutago" },
      },
      created_at: 1719978676.3540456,
      relation_name:
        "`opensource-observer`.`oso`.`stg_ossd__current_collections`",
      raw_code:
        "{# \n  The most recent view of collections from the ossd cloudquery plugin.\n#}\nwith most_recent_sync as (\n  select MAX(_cq_sync_time) as sync_time\n  from {{ oso_source('ossd', 'collections') }}\n)\n\nselect\n  {# \n    id is the SHA256 of namespace + slug. We hardcode our namespace\n    \"oso\" for now but we are assuming we will allow users to add their on the\n    OSO website\n  #}\n  {{ oso_id('\"oso\"', 'name') }} as collection_id,\n  \"OSS_DIRECTORY\" as collection_source,\n  \"oso\" as collection_namespace,\n  collections.name as collection_name,\n  collections.display_name,\n  collections.description,\n  collections.projects,\n  collections.sync_time\nfrom {{ oso_source('ossd', 'collections') }} as collections\nwhere _cq_sync_time = (select * from most_recent_sync)",
      language: "sql",
      refs: [],
      sources: [
        ["ossd", "collections"],
        ["ossd", "collections"],
      ],
      metrics: [],
      depends_on: {
        macros: [
          "macro.opensource_observer.oso_source",
          "macro.opensource_observer.oso_id",
        ],
        nodes: ["source.opensource_observer.ossd.collections"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/oss-directory/stg_ossd__current_collections.sql",
      compiled: true,
      compiled_code:
        "\nwith most_recent_sync as (\n  select MAX(_cq_sync_time) as sync_time\n  from `opensource-observer`.`oso`.`collections_ossd`\n)\n\nselect\n  \n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(\"oso\", name))), '+', '-'), '/', '_') as collection_id,\n  \"OSS_DIRECTORY\" as collection_source,\n  \"oso\" as collection_namespace,\n  collections.name as collection_name,\n  collections.display_name,\n  collections.description,\n  collections.projects,\n  collections.sync_time\nfrom `opensource-observer`.`oso`.`collections_ossd` as collections\nwhere _cq_sync_time = (select * from most_recent_sync)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_ossd__current_repositories": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_ossd__current_repositories",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/oss-directory/stg_ossd__current_repositories.sql",
      original_file_path:
        "warehouse/dbt/models/staging/oss-directory/stg_ossd__current_repositories.sql",
      unique_id: "model.opensource_observer.stg_ossd__current_repositories",
      fqn: [
        "opensource_observer",
        "staging",
        "oss-directory",
        "stg_ossd__current_repositories",
      ],
      alias: "stg_ossd__current_repositories",
      checksum: {
        name: "sha256",
        checksum:
          "4273a7c60c0688a8f41632e45ac84f0e3fbd9aa2a3279c37207e632fc5023058",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: ["staging", "oss-directory", "repository"],
        meta: { contributors: "oso-team, tomfutago" },
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: ["staging", "oss-directory", "repository"],
      description: "GitHub repositories",
      columns: {
        _cq_sync_time: {
          name: "_cq_sync_time",
          description: "sync time",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        _cq_source_name: {
          name: "_cq_source_name",
          description: "source name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        node_id: {
          name: "node_id",
          description: "node id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        id: {
          name: "id",
          description: "repository id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        url: {
          name: "url",
          description: "repository id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        name: {
          name: "name",
          description: "repository name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        name_with_owner: {
          name: "name_with_owner",
          description: "repository name and its owner, format: owner/repo_name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        owner: {
          name: "owner",
          description: "repository owner name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        branch: {
          name: "branch",
          description: "repository branch name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        star_count: {
          name: "star_count",
          description: "repo star count",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        watcher_count: {
          name: "watcher_count",
          description: "repo watcher count",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        fork_count: {
          name: "fork_count",
          description: "repo fork count",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        is_fork: {
          name: "is_fork",
          description: "is this repo a fork?",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
      },
      meta: { contributors: "oso-team, tomfutago" },
      group: null,
      docs: { show: true, node_color: null },
      patch_path:
        "opensource_observer://warehouse/dbt/models/staging/oss-directory/stg_ossd__schema.yml",
      build_path: null,
      unrendered_config: {
        materialized: "view",
        tags: ["staging", "oss-directory", "repository"],
        meta: { contributors: "oso-team, tomfutago" },
      },
      created_at: 1719978676.3636155,
      relation_name:
        "`opensource-observer`.`oso`.`stg_ossd__current_repositories`",
      raw_code:
        "{# \n  The most recent view of repositories from the github-resolve-repos cloudquery plugin.\n#}\nwith most_recent_sync as (\n  select MAX(_cq_sync_time) as sync_time\n  from {{ oso_source('ossd', 'repositories') }}\n)\n\nselect\n  repositories.node_id,\n  repositories.id,\n  repositories.url,\n  repositories.name,\n  repositories.name_with_owner,\n  repositories.owner,\n  repositories.branch,\n  repositories.star_count,\n  repositories.watcher_count,\n  repositories.fork_count,\n  repositories.is_fork,\n  repositories.license_name,\n  repositories.license_spdx_id,\n  repositories.language,\n  repositories._cq_sync_time as `sync_time`\nfrom {{ oso_source('ossd', 'repositories') }} as repositories\nwhere _cq_sync_time = (select * from most_recent_sync)",
      language: "sql",
      refs: [],
      sources: [
        ["ossd", "repositories"],
        ["ossd", "repositories"],
      ],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.oso_source"],
        nodes: ["source.opensource_observer.ossd.repositories"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/oss-directory/stg_ossd__current_repositories.sql",
      compiled: true,
      compiled_code:
        "\nwith most_recent_sync as (\n  select MAX(_cq_sync_time) as sync_time\n  from `opensource-observer`.`oso`.`repositories_ossd`\n)\n\nselect\n  repositories.node_id,\n  repositories.id,\n  repositories.url,\n  repositories.name,\n  repositories.name_with_owner,\n  repositories.owner,\n  repositories.branch,\n  repositories.star_count,\n  repositories.watcher_count,\n  repositories.fork_count,\n  repositories.is_fork,\n  repositories.license_name,\n  repositories.license_spdx_id,\n  repositories.language,\n  repositories._cq_sync_time as `sync_time`\nfrom `opensource-observer`.`oso`.`repositories_ossd` as repositories\nwhere _cq_sync_time = (select * from most_recent_sync)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_ossd__current_projects": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_ossd__current_projects",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/oss-directory/stg_ossd__current_projects.sql",
      original_file_path:
        "warehouse/dbt/models/staging/oss-directory/stg_ossd__current_projects.sql",
      unique_id: "model.opensource_observer.stg_ossd__current_projects",
      fqn: [
        "opensource_observer",
        "staging",
        "oss-directory",
        "stg_ossd__current_projects",
      ],
      alias: "stg_ossd__current_projects",
      checksum: {
        name: "sha256",
        checksum:
          "49615173abc07d731db0bb8c3f7d60043738a6cc03718ae368a4e1bbcd205148",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: ["staging", "oss-directory", "project"],
        meta: { contributors: "oso-team, tomfutago" },
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: ["staging", "oss-directory", "project"],
      description: "Projects",
      columns: {
        id: {
          name: "id",
          description:
            "project unique id - SHA256 hash derived from namespace and slug",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        namespace: {
          name: "namespace",
          description: "namespace",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        _cq_sync_time: {
          name: "_cq_sync_time",
          description: "sync time",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        _cq_source_name: {
          name: "_cq_source_name",
          description: "source name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        slug: {
          name: "slug",
          description: "slug",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        name: {
          name: "name",
          description: "project name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        github: {
          name: "github",
          description: "JSON array containing GitHub url(s)",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        npm: {
          name: "npm",
          description: "JSON array containing npm url(s)",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        blockchain: {
          name: "blockchain",
          description: "JSON array containing blockchain address(es)",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        sync_time: {
          name: "sync_time",
          description: "sync time",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
      },
      meta: { contributors: "oso-team, tomfutago" },
      group: null,
      docs: { show: true, node_color: null },
      patch_path:
        "opensource_observer://warehouse/dbt/models/staging/oss-directory/stg_ossd__schema.yml",
      build_path: null,
      unrendered_config: {
        materialized: "view",
        tags: ["staging", "oss-directory", "project"],
        meta: { contributors: "oso-team, tomfutago" },
      },
      created_at: 1719978676.3569474,
      relation_name: "`opensource-observer`.`oso`.`stg_ossd__current_projects`",
      raw_code:
        "{# \n  The most recent view of projects from the ossd cloudquery plugin.\n#}\nwith most_recent_sync as (\n  select MAX(_cq_sync_time) as sync_time\n  from {{ oso_source('ossd', 'projects') }}\n)\n\nselect\n  {# \n    id is the SHA256 of namespace + slug. We hardcode our namespace\n    \"oso\" for now but we are assuming we will allow users to add their on the\n    OSO website\n  #}\n  {{ oso_id('\"oso\"', 'name') }} as project_id,\n  \"OSS_DIRECTORY\" as project_source,\n  \"oso\" as project_namespace,\n  projects.name as project_name,\n  projects.display_name,\n  projects.description,\n  projects.github,\n  projects.npm,\n  projects.blockchain,\n  projects.sync_time\nfrom {{ oso_source('ossd', 'projects') }} as projects\nwhere _cq_sync_time = (select * from most_recent_sync)",
      language: "sql",
      refs: [],
      sources: [
        ["ossd", "projects"],
        ["ossd", "projects"],
      ],
      metrics: [],
      depends_on: {
        macros: [
          "macro.opensource_observer.oso_source",
          "macro.opensource_observer.oso_id",
        ],
        nodes: ["source.opensource_observer.ossd.projects"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/oss-directory/stg_ossd__current_projects.sql",
      compiled: true,
      compiled_code:
        "\nwith most_recent_sync as (\n  select MAX(_cq_sync_time) as sync_time\n  from `opensource-observer`.`oso`.`projects_ossd`\n)\n\nselect\n  \n  REPLACE(REPLACE(TO_BASE64(SHA256(CONCAT(\"oso\", name))), '+', '-'), '/', '_') as project_id,\n  \"OSS_DIRECTORY\" as project_source,\n  \"oso\" as project_namespace,\n  projects.name as project_name,\n  projects.display_name,\n  projects.description,\n  projects.github,\n  projects.npm,\n  projects.blockchain,\n  projects.sync_time\nfrom `opensource-observer`.`oso`.`projects_ossd` as projects\nwhere _cq_sync_time = (select * from most_recent_sync)",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_github__pull_requests": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_github__pull_requests",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/github/stg_github__pull_requests.sql",
      original_file_path:
        "warehouse/dbt/models/staging/github/stg_github__pull_requests.sql",
      unique_id: "model.opensource_observer.stg_github__pull_requests",
      fqn: [
        "opensource_observer",
        "staging",
        "github",
        "stg_github__pull_requests",
      ],
      alias: "stg_github__pull_requests",
      checksum: {
        name: "sha256",
        checksum:
          "1d4d09dafa0cb39204f711ab045f30ae3f4299f1c53e234341ffe6382eeed8a8",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: ["staging", "github", "events", "pull"],
        meta: { contributors: "oso-team, tomfutago" },
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: ["staging", "github", "events", "pull"],
      description: "GitHub pull requests",
      columns: {
        id: {
          name: "id",
          description: "event id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        created_at: {
          name: "created_at",
          description: "event timestamp",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "repo.id": {
          name: "repo.id",
          description: "element of repo struct: repository id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "repo.name": {
          name: "repo.name",
          description: "element of repo struct: repository name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "actor.id": {
          name: "actor.id",
          description: "element of actor struct: user id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "actor.login": {
          name: "actor.login",
          description: "element of actor struct: user login",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        type: {
          name: "type",
          description: "payload action type",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
      },
      meta: { contributors: "oso-team, tomfutago" },
      group: null,
      docs: { show: true, node_color: null },
      patch_path:
        "opensource_observer://warehouse/dbt/models/staging/github/stg_github__schema.yml",
      build_path: null,
      unrendered_config: {
        materialized: "view",
        tags: ["staging", "github", "events", "pull"],
        meta: { contributors: "oso-team, tomfutago" },
      },
      created_at: 1719978676.3774264,
      relation_name: "`opensource-observer`.`oso`.`stg_github__pull_requests`",
      raw_code:
        '{#\n  Turns all watch events into push events\n#}\n\nwith pull_request_events as (\n  select *\n  from {{ ref(\'stg_github__events\') }} as ghe\n  where ghe.type = "PullRequestEvent"\n)\n\nselect\n  pre.id as id,\n  pre.created_at as created_at,\n  pre.repo.id as repository_id,\n  pre.repo.name as repository_name,\n  pre.actor.id as actor_id,\n  pre.actor.login as actor_login,\n  CONCAT("PULL_REQUEST_", UPPER(JSON_VALUE(pre.payload, "$.action")))\n    as `type`\nfrom pull_request_events as pre',
      language: "sql",
      refs: [{ name: "stg_github__events", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.stg_github__events"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/github/stg_github__pull_requests.sql",
      compiled: true,
      compiled_code:
        '\n\nwith pull_request_events as (\n  select *\n  from `opensource-observer`.`oso`.`stg_github__events` as ghe\n  where ghe.type = "PullRequestEvent"\n)\n\nselect\n  pre.id as id,\n  pre.created_at as created_at,\n  pre.repo.id as repository_id,\n  pre.repo.name as repository_name,\n  pre.actor.id as actor_id,\n  pre.actor.login as actor_login,\n  CONCAT("PULL_REQUEST_", UPPER(JSON_VALUE(pre.payload, "$.action")))\n    as `type`\nfrom pull_request_events as pre',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_github__commits": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_github__commits",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/github/stg_github__commits.sql",
      original_file_path:
        "warehouse/dbt/models/staging/github/stg_github__commits.sql",
      unique_id: "model.opensource_observer.stg_github__commits",
      fqn: ["opensource_observer", "staging", "github", "stg_github__commits"],
      alias: "stg_github__commits",
      checksum: {
        name: "sha256",
        checksum:
          "ed2d6f172ca718080a96a6004ced17a2214b473cf3d81178a5fb795f4e4875f4",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: ["staging", "github", "events", "commits"],
        meta: { contributors: "oso-team, tomfutago" },
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: ["staging", "github", "events", "commits"],
      description: "GitHub push events",
      columns: {
        created_at: {
          name: "created_at",
          description: "event timestamp",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "repo.id": {
          name: "repo.id",
          description: "element of repo struct: repository id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "repo.name": {
          name: "repo.name",
          description: "element of repo struct: repository name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        push_id: {
          name: "push_id",
          description: "payload push_id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        ref: {
          name: "ref",
          description: "payload ref",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "actor.id": {
          name: "actor.id",
          description: "element of actor struct: user id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "actor.login": {
          name: "actor.login",
          description: "element of actor struct: user login",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        sha: {
          name: "sha",
          description: "sha",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        author_email: {
          name: "author_email",
          description: "author email",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        author_name: {
          name: "author_name",
          description: "author name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        is_distinct: {
          name: "is_distinct",
          description: "is this commit distinct?",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        api_url: {
          name: "api_url",
          description: "api url",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
      },
      meta: { contributors: "oso-team, tomfutago" },
      group: null,
      docs: { show: true, node_color: null },
      patch_path:
        "opensource_observer://warehouse/dbt/models/staging/github/stg_github__schema.yml",
      build_path: null,
      unrendered_config: {
        materialized: "view",
        tags: ["staging", "github", "events", "commits"],
        meta: { contributors: "oso-team, tomfutago" },
      },
      created_at: 1719978676.3885586,
      relation_name: "`opensource-observer`.`oso`.`stg_github__commits`",
      raw_code:
        '{#\n  Turns all push events into their commit objects\n#}\n\nselect\n  ghpe.created_at as created_at,\n  ghpe.repository_id as repository_id,\n  ghpe.repository_name as repository_name,\n  ghpe.push_id as push_id,\n  ghpe.ref as ref,\n  ghpe.actor_id as actor_id,\n  ghpe.actor_login as actor_login,\n  JSON_VALUE(commit_details, "$.sha") as sha,\n  JSON_VALUE(commit_details, "$.author.email") as author_email,\n  JSON_VALUE(commit_details, "$.author.name") as author_name,\n  CAST(JSON_VALUE(commit_details, "$.distinct") as BOOL) as is_distinct,\n  JSON_VALUE(commit_details, "$.url") as api_url\nfrom {{ ref(\'stg_github__push_events\') }} as ghpe\ncross join UNNEST(ghpe.commits) as commit_details',
      language: "sql",
      refs: [{ name: "stg_github__push_events", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.stg_github__push_events"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/github/stg_github__commits.sql",
      compiled: true,
      compiled_code:
        '\n\nselect\n  ghpe.created_at as created_at,\n  ghpe.repository_id as repository_id,\n  ghpe.repository_name as repository_name,\n  ghpe.push_id as push_id,\n  ghpe.ref as ref,\n  ghpe.actor_id as actor_id,\n  ghpe.actor_login as actor_login,\n  JSON_VALUE(commit_details, "$.sha") as sha,\n  JSON_VALUE(commit_details, "$.author.email") as author_email,\n  JSON_VALUE(commit_details, "$.author.name") as author_name,\n  CAST(JSON_VALUE(commit_details, "$.distinct") as BOOL) as is_distinct,\n  JSON_VALUE(commit_details, "$.url") as api_url\nfrom `opensource-observer`.`oso`.`stg_github__push_events` as ghpe\ncross join UNNEST(ghpe.commits) as commit_details',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_github__distinct_main_commits": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_github__distinct_main_commits",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/github/stg_github__distinct_main_commits.sql",
      original_file_path:
        "warehouse/dbt/models/staging/github/stg_github__distinct_main_commits.sql",
      unique_id: "model.opensource_observer.stg_github__distinct_main_commits",
      fqn: [
        "opensource_observer",
        "staging",
        "github",
        "stg_github__distinct_main_commits",
      ],
      alias: "stg_github__distinct_main_commits",
      checksum: {
        name: "sha256",
        checksum:
          "e4f01eb899eb4e8ac19004d698263de7f6c014233e6065b325ec571021b40f9e",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: ["staging", "github", "events", "commits", "main"],
        meta: { contributors: "oso-team, tomfutago" },
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: ["staging", "github", "events", "commits", "main"],
      description: "GitHub push events",
      columns: {
        created_at: {
          name: "created_at",
          description: "event timestamp",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "repo.id": {
          name: "repo.id",
          description: "element of repo struct: repository id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "repo.name": {
          name: "repo.name",
          description: "element of repo struct: repository name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        push_id: {
          name: "push_id",
          description: "payload push_id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        ref: {
          name: "ref",
          description: "payload ref",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "actor.id": {
          name: "actor.id",
          description: "element of actor struct: user id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "actor.login": {
          name: "actor.login",
          description: "element of actor struct: user login",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        sha: {
          name: "sha",
          description: "sha",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        author_email: {
          name: "author_email",
          description: "author email",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        author_name: {
          name: "author_name",
          description: "author name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        is_distinct: {
          name: "is_distinct",
          description: "is this commit distinct?",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        api_url: {
          name: "api_url",
          description: "api url",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
      },
      meta: { contributors: "oso-team, tomfutago" },
      group: null,
      docs: { show: true, node_color: null },
      patch_path:
        "opensource_observer://warehouse/dbt/models/staging/github/stg_github__schema.yml",
      build_path: null,
      unrendered_config: {
        materialized: "view",
        tags: ["staging", "github", "events", "commits", "main"],
        meta: { contributors: "oso-team, tomfutago" },
      },
      created_at: 1719978676.3909917,
      relation_name:
        "`opensource-observer`.`oso`.`stg_github__distinct_main_commits`",
      raw_code:
        "{#\n  Gathers all github commits on the default branch of a repo that are distinct.\n\n  We use the `MIN_BY` method here to grab the first occurrence of a given commit\n  in the case of duplicated event counts (which does seem to happen with some\n  frequency)\n#}\nselect\n  ghc.repository_id,\n  ghc.sha,\n  MIN(ghc.created_at) as created_at,\n  MIN_BY(ghc.repository_name, ghc.created_at) as repository_name,\n  MIN_BY(ghc.push_id, ghc.created_at) as push_id,\n  MIN_BY(ghc.ref, ghc.created_at) as ref,\n  MIN_BY(ghc.actor_id, ghc.created_at) as actor_id,\n  MIN_BY(ghc.actor_login, ghc.created_at) as actor_login,\n  MIN_BY(ghc.author_email, ghc.created_at) as author_email,\n  MIN_BY(ghc.author_name, ghc.created_at) as author_name,\n  MIN_BY(ghc.is_distinct, ghc.created_at) as is_distinct,\n  MIN_BY(ghc.api_url, ghc.created_at) as api_url\nfrom {{ ref('stg_github__commits') }} as ghc\ninner join {{ ref('stg_ossd__current_repositories') }} as repos\n  on ghc.repository_id = repos.id\nwhere ghc.ref = CONCAT(\"refs/heads/\", repos.branch)\n\n{# \n  We group by the repository id and sha to prevent merging commits between forks\n  and in cases where duplicate shas exist between different repos\n#}\ngroup by ghc.repository_id, ghc.sha",
      language: "sql",
      refs: [
        { name: "stg_github__commits", package: null, version: null },
        {
          name: "stg_ossd__current_repositories",
          package: null,
          version: null,
        },
      ],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: [
          "model.opensource_observer.stg_github__commits",
          "model.opensource_observer.stg_ossd__current_repositories",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/github/stg_github__distinct_main_commits.sql",
      compiled: true,
      compiled_code:
        '\nselect\n  ghc.repository_id,\n  ghc.sha,\n  MIN(ghc.created_at) as created_at,\n  MIN_BY(ghc.repository_name, ghc.created_at) as repository_name,\n  MIN_BY(ghc.push_id, ghc.created_at) as push_id,\n  MIN_BY(ghc.ref, ghc.created_at) as ref,\n  MIN_BY(ghc.actor_id, ghc.created_at) as actor_id,\n  MIN_BY(ghc.actor_login, ghc.created_at) as actor_login,\n  MIN_BY(ghc.author_email, ghc.created_at) as author_email,\n  MIN_BY(ghc.author_name, ghc.created_at) as author_name,\n  MIN_BY(ghc.is_distinct, ghc.created_at) as is_distinct,\n  MIN_BY(ghc.api_url, ghc.created_at) as api_url\nfrom `opensource-observer`.`oso`.`stg_github__commits` as ghc\ninner join `opensource-observer`.`oso`.`stg_ossd__current_repositories` as repos\n  on ghc.repository_id = repos.id\nwhere ghc.ref = CONCAT("refs/heads/", repos.branch)\n\n\ngroup by ghc.repository_id, ghc.sha',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_github__issues": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_github__issues",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/github/stg_github__issues.sql",
      original_file_path:
        "warehouse/dbt/models/staging/github/stg_github__issues.sql",
      unique_id: "model.opensource_observer.stg_github__issues",
      fqn: ["opensource_observer", "staging", "github", "stg_github__issues"],
      alias: "stg_github__issues",
      checksum: {
        name: "sha256",
        checksum:
          "55f55a73372cb6cb3475e6af60f03934e7cd6f471a135206ca02bf5c87a1e413",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: ["staging", "github", "events", "issues"],
        meta: { contributors: "oso-team, tomfutago" },
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: ["staging", "github", "events", "issues"],
      description: "GitHub push events",
      columns: {
        id: {
          name: "id",
          description: "event id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        created_at: {
          name: "created_at",
          description: "event timestamp",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "repo.id": {
          name: "repo.id",
          description: "element of repo struct: repository id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "repo.name": {
          name: "repo.name",
          description: "element of repo struct: repository name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "actor.id": {
          name: "actor.id",
          description: "element of actor struct: user id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "actor.login": {
          name: "actor.login",
          description: "element of actor struct: user login",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        type: {
          name: "type",
          description: "payload action type",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
      },
      meta: { contributors: "oso-team, tomfutago" },
      group: null,
      docs: { show: true, node_color: null },
      patch_path:
        "opensource_observer://warehouse/dbt/models/staging/github/stg_github__schema.yml",
      build_path: null,
      unrendered_config: {
        materialized: "view",
        tags: ["staging", "github", "events", "issues"],
        meta: { contributors: "oso-team, tomfutago" },
      },
      created_at: 1719978676.38503,
      relation_name: "`opensource-observer`.`oso`.`stg_github__issues`",
      raw_code:
        '{#\n  Turns all watch events into push events\n#}\n\nwith issue_events as (\n  select *\n  from {{ ref(\'stg_github__events\') }} as ghe\n  where ghe.type = "IssuesEvent"\n)\n\nselect\n  ie.id as id,\n  ie.created_at as created_at,\n  ie.repo.id as repository_id,\n  ie.repo.name as repository_name,\n  ie.actor.id as actor_id,\n  ie.actor.login as actor_login,\n  CONCAT("ISSUE_", UPPER(JSON_VALUE(ie.payload, "$.action"))) as `type`\nfrom issue_events as ie',
      language: "sql",
      refs: [{ name: "stg_github__events", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.stg_github__events"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/github/stg_github__issues.sql",
      compiled: true,
      compiled_code:
        '\n\nwith issue_events as (\n  select *\n  from `opensource-observer`.`oso`.`stg_github__events` as ghe\n  where ghe.type = "IssuesEvent"\n)\n\nselect\n  ie.id as id,\n  ie.created_at as created_at,\n  ie.repo.id as repository_id,\n  ie.repo.name as repository_name,\n  ie.actor.id as actor_id,\n  ie.actor.login as actor_login,\n  CONCAT("ISSUE_", UPPER(JSON_VALUE(ie.payload, "$.action"))) as `type`\nfrom issue_events as ie',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_github__push_events": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_github__push_events",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/github/stg_github__push_events.sql",
      original_file_path:
        "warehouse/dbt/models/staging/github/stg_github__push_events.sql",
      unique_id: "model.opensource_observer.stg_github__push_events",
      fqn: [
        "opensource_observer",
        "staging",
        "github",
        "stg_github__push_events",
      ],
      alias: "stg_github__push_events",
      checksum: {
        name: "sha256",
        checksum:
          "9350a2f0382e488d08a239a141816cd473809293bb141f0834407058ded9b324",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: ["staging", "github", "events", "push"],
        meta: { contributors: "oso-team, tomfutago" },
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: ["staging", "github", "events", "push"],
      description: "GitHub push events",
      columns: {
        created_at: {
          name: "created_at",
          description: "event timestamp",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "repo.id": {
          name: "repo.id",
          description: "element of repo struct: repository id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "repo.name": {
          name: "repo.name",
          description: "element of repo struct: repository name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        push_id: {
          name: "push_id",
          description: "payload push_id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        ref: {
          name: "ref",
          description: "payload ref",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        commits: {
          name: "commits",
          description: "JSON containing push event commits",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        available_commits_count: {
          name: "available_commits_count",
          description: "available commits count",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        actual_commits_count: {
          name: "actual_commits_count",
          description: "actual commits count",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "actor.id": {
          name: "actor.id",
          description: "element of actor struct: user id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "actor.login": {
          name: "actor.login",
          description: "element of actor struct: user login",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
      },
      meta: { contributors: "oso-team, tomfutago" },
      group: null,
      docs: { show: true, node_color: null },
      patch_path:
        "opensource_observer://warehouse/dbt/models/staging/github/stg_github__schema.yml",
      build_path: null,
      unrendered_config: {
        materialized: "view",
        tags: ["staging", "github", "events", "push"],
        meta: { contributors: "oso-team, tomfutago" },
      },
      created_at: 1719978676.3751445,
      relation_name: "`opensource-observer`.`oso`.`stg_github__push_events`",
      raw_code:
        '{#\n  Gathers all github events for all github artifacts\n#}\n\nselect\n  ghe.created_at as created_at,\n  ghe.repo.id as repository_id,\n  ghe.repo.name as repository_name,\n  ghe.actor.id as actor_id,\n  ghe.actor.login as actor_login,\n  JSON_VALUE(ghe.payload, "$.push_id") as push_id,\n  JSON_VALUE(ghe.payload, "$.ref") as ref,\n  JSON_QUERY_ARRAY(ghe.payload, "$.commits") as commits,\n  ARRAY_LENGTH(\n    JSON_QUERY_ARRAY(ghe.payload, "$.commits")\n  ) as available_commits_count,\n  CAST(\n    JSON_VALUE(ghe.payload, "$.distinct_size") as INT\n  ) as actual_commits_count\nfrom {{ ref(\'stg_github__events\') }} as ghe\nwhere ghe.type = "PushEvent"',
      language: "sql",
      refs: [{ name: "stg_github__events", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.stg_github__events"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/github/stg_github__push_events.sql",
      compiled: true,
      compiled_code:
        '\n\nselect\n  ghe.created_at as created_at,\n  ghe.repo.id as repository_id,\n  ghe.repo.name as repository_name,\n  ghe.actor.id as actor_id,\n  ghe.actor.login as actor_login,\n  JSON_VALUE(ghe.payload, "$.push_id") as push_id,\n  JSON_VALUE(ghe.payload, "$.ref") as ref,\n  JSON_QUERY_ARRAY(ghe.payload, "$.commits") as commits,\n  ARRAY_LENGTH(\n    JSON_QUERY_ARRAY(ghe.payload, "$.commits")\n  ) as available_commits_count,\n  CAST(\n    JSON_VALUE(ghe.payload, "$.distinct_size") as INT\n  ) as actual_commits_count\nfrom `opensource-observer`.`oso`.`stg_github__events` as ghe\nwhere ghe.type = "PushEvent"',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_github__stars_and_forks": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_github__stars_and_forks",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/github/stg_github__stars_and_forks.sql",
      original_file_path:
        "warehouse/dbt/models/staging/github/stg_github__stars_and_forks.sql",
      unique_id: "model.opensource_observer.stg_github__stars_and_forks",
      fqn: [
        "opensource_observer",
        "staging",
        "github",
        "stg_github__stars_and_forks",
      ],
      alias: "stg_github__stars_and_forks",
      checksum: {
        name: "sha256",
        checksum:
          "b141065fc81c76fd43938f550362640d0d6af262e9058b8c657142952b78d9bc",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: ["staging", "github", "events", "stars", "forks"],
        meta: { contributors: "oso-team, tomfutago" },
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: ["staging", "github", "events", "stars", "forks"],
      description: "GitHub starts and forks",
      columns: {
        id: {
          name: "id",
          description: "event id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        created_at: {
          name: "created_at",
          description: "event timestamp",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "repo.id": {
          name: "repo.id",
          description: "element of repo struct: repository id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "repo.name": {
          name: "repo.name",
          description: "element of repo struct: repository name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "actor.id": {
          name: "actor.id",
          description: "element of actor struct: user id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "actor.login": {
          name: "actor.login",
          description: "element of actor struct: user login",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        type: {
          name: "type",
          description: "type name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
      },
      meta: { contributors: "oso-team, tomfutago" },
      group: null,
      docs: { show: true, node_color: null },
      patch_path:
        "opensource_observer://warehouse/dbt/models/staging/github/stg_github__schema.yml",
      build_path: null,
      unrendered_config: {
        materialized: "view",
        tags: ["staging", "github", "events", "stars", "forks"],
        meta: { contributors: "oso-team, tomfutago" },
      },
      created_at: 1719978676.3827581,
      relation_name:
        "`opensource-observer`.`oso`.`stg_github__stars_and_forks`",
      raw_code:
        '{#\n  Turns all watch events into push events\n#}\n\nwith watch_events as (\n  select *\n  from {{ ref(\'stg_github__events\') }} as ghe\n  where ghe.type in ("WatchEvent", "ForkEvent")\n)\n\nselect\n  we.id as id,\n  we.created_at as created_at,\n  we.repo.id as repository_id,\n  we.repo.name as repository_name,\n  we.actor.id as actor_id,\n  we.actor.login as actor_login,\n  case we.type\n    when "WatchEvent" then "STARRED"\n    when "ForkEvent" then "FORKED"\n  end as `type`\nfrom watch_events as we',
      language: "sql",
      refs: [{ name: "stg_github__events", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.stg_github__events"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/github/stg_github__stars_and_forks.sql",
      compiled: true,
      compiled_code:
        '\n\nwith watch_events as (\n  select *\n  from `opensource-observer`.`oso`.`stg_github__events` as ghe\n  where ghe.type in ("WatchEvent", "ForkEvent")\n)\n\nselect\n  we.id as id,\n  we.created_at as created_at,\n  we.repo.id as repository_id,\n  we.repo.name as repository_name,\n  we.actor.id as actor_id,\n  we.actor.login as actor_login,\n  case we.type\n    when "WatchEvent" then "STARRED"\n    when "ForkEvent" then "FORKED"\n  end as `type`\nfrom watch_events as we',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_github__distinct_commits_resolved_mergebot":
      {
        database: "opensource-observer",
        schema: "oso",
        name: "stg_github__distinct_commits_resolved_mergebot",
        resource_type: "model",
        package_name: "opensource_observer",
        path: "staging/github/stg_github__distinct_commits_resolved_mergebot.sql",
        original_file_path:
          "warehouse/dbt/models/staging/github/stg_github__distinct_commits_resolved_mergebot.sql",
        unique_id:
          "model.opensource_observer.stg_github__distinct_commits_resolved_mergebot",
        fqn: [
          "opensource_observer",
          "staging",
          "github",
          "stg_github__distinct_commits_resolved_mergebot",
        ],
        alias: "stg_github__distinct_commits_resolved_mergebot",
        checksum: {
          name: "sha256",
          checksum:
            "18ca7f61eeaa051dd87b35ab80554a5b209b501c6c0b3578c08809621cd9265e",
        },
        config: {
          enabled: true,
          alias: null,
          schema: null,
          database: null,
          tags: ["staging", "github", "events", "commits", "merge"],
          meta: { contributors: "oso-team, tomfutago" },
          group: null,
          materialized: "view",
          incremental_strategy: null,
          persist_docs: {},
          "post-hook": [],
          "pre-hook": [],
          quoting: {},
          column_types: {},
          full_refresh: null,
          unique_key: null,
          on_schema_change: "ignore",
          on_configuration_change: "apply",
          grants: {},
          packages: [],
          docs: { show: true, node_color: null },
          contract: { enforced: false, alias_types: true },
          access: "protected",
        },
        tags: ["staging", "github", "events", "commits", "merge"],
        description: "GitHub push events",
        columns: {
          created_at: {
            name: "created_at",
            description: "event timestamp",
            meta: {},
            data_type: null,
            constraints: [],
            quote: null,
            tags: [],
          },
          "repo.id": {
            name: "repo.id",
            description: "element of repo struct: repository id",
            meta: {},
            data_type: null,
            constraints: [],
            quote: null,
            tags: [],
          },
          "repo.name": {
            name: "repo.name",
            description: "element of repo struct: repository name",
            meta: {},
            data_type: null,
            constraints: [],
            quote: null,
            tags: [],
          },
          push_id: {
            name: "push_id",
            description: "payload push_id",
            meta: {},
            data_type: null,
            constraints: [],
            quote: null,
            tags: [],
          },
          ref: {
            name: "ref",
            description: "payload ref",
            meta: {},
            data_type: null,
            constraints: [],
            quote: null,
            tags: [],
          },
          "actor.id": {
            name: "actor.id",
            description: "element of actor struct: user id",
            meta: {},
            data_type: null,
            constraints: [],
            quote: null,
            tags: [],
          },
          "actor.login": {
            name: "actor.login",
            description: "element of actor struct: user login",
            meta: {},
            data_type: null,
            constraints: [],
            quote: null,
            tags: [],
          },
          sha: {
            name: "sha",
            description: "sha",
            meta: {},
            data_type: null,
            constraints: [],
            quote: null,
            tags: [],
          },
          author_email: {
            name: "author_email",
            description: "author email",
            meta: {},
            data_type: null,
            constraints: [],
            quote: null,
            tags: [],
          },
          author_name: {
            name: "author_name",
            description: "author name",
            meta: {},
            data_type: null,
            constraints: [],
            quote: null,
            tags: [],
          },
          is_distinct: {
            name: "is_distinct",
            description: "is this commit distinct?",
            meta: {},
            data_type: null,
            constraints: [],
            quote: null,
            tags: [],
          },
          api_url: {
            name: "api_url",
            description: "api url",
            meta: {},
            data_type: null,
            constraints: [],
            quote: null,
            tags: [],
          },
        },
        meta: { contributors: "oso-team, tomfutago" },
        group: null,
        docs: { show: true, node_color: null },
        patch_path:
          "opensource_observer://warehouse/dbt/models/staging/github/stg_github__schema.yml",
        build_path: null,
        unrendered_config: {
          materialized: "view",
          tags: ["staging", "github", "events", "commits", "merge"],
          meta: { contributors: "oso-team, tomfutago" },
        },
        created_at: 1719978676.3929734,
        relation_name:
          "`opensource-observer`.`oso`.`stg_github__distinct_commits_resolved_mergebot`",
        raw_code:
          "{#\n  Resolve merges that were created by the mergebot\n#}\n\nwith merge_bot_commits as (\n  select *\n  from {{ ref('stg_github__distinct_main_commits') }}\n  where actor_id = 118344674\n),\n\nresolved_merge_bot_commits as (\n  select\n    mbc.repository_id,\n    mbc.sha,\n    mbc.created_at,\n    mbc.repository_name,\n    mbc.push_id,\n    mbc.ref,\n    ghprme.actor_id,\n    ghprme.actor_login,\n    mbc.author_email,\n    mbc.author_name,\n    mbc.is_distinct,\n    mbc.api_url\n  from merge_bot_commits as mbc\n  inner join\n    {{ ref('stg_github__pull_request_merge_events') }} as ghprme\n    on\n      mbc.repository_id = ghprme.repository_id\n      and mbc.sha = ghprme.merge_commit_sha\n),\n\nno_merge_bot_commits as (\n  select *\n  from {{ ref('stg_github__distinct_main_commits') }}\n  {# The following is the actor_id for the github merge bot #}\n  where actor_id != 118344674\n)\n\nselect * from resolved_merge_bot_commits\nunion all\nselect * from no_merge_bot_commits",
        language: "sql",
        refs: [
          {
            name: "stg_github__distinct_main_commits",
            package: null,
            version: null,
          },
          {
            name: "stg_github__pull_request_merge_events",
            package: null,
            version: null,
          },
          {
            name: "stg_github__distinct_main_commits",
            package: null,
            version: null,
          },
        ],
        sources: [],
        metrics: [],
        depends_on: {
          macros: [],
          nodes: [
            "model.opensource_observer.stg_github__distinct_main_commits",
            "model.opensource_observer.stg_github__pull_request_merge_events",
          ],
        },
        compiled_path:
          "target/compiled/opensource_observer/warehouse/dbt/models/staging/github/stg_github__distinct_commits_resolved_mergebot.sql",
        compiled: true,
        compiled_code:
          "\n\nwith merge_bot_commits as (\n  select *\n  from `opensource-observer`.`oso`.`stg_github__distinct_main_commits`\n  where actor_id = 118344674\n),\n\nresolved_merge_bot_commits as (\n  select\n    mbc.repository_id,\n    mbc.sha,\n    mbc.created_at,\n    mbc.repository_name,\n    mbc.push_id,\n    mbc.ref,\n    ghprme.actor_id,\n    ghprme.actor_login,\n    mbc.author_email,\n    mbc.author_name,\n    mbc.is_distinct,\n    mbc.api_url\n  from merge_bot_commits as mbc\n  inner join\n    `opensource-observer`.`oso`.`stg_github__pull_request_merge_events` as ghprme\n    on\n      mbc.repository_id = ghprme.repository_id\n      and mbc.sha = ghprme.merge_commit_sha\n),\n\nno_merge_bot_commits as (\n  select *\n  from `opensource-observer`.`oso`.`stg_github__distinct_main_commits`\n  \n  where actor_id != 118344674\n)\n\nselect * from resolved_merge_bot_commits\nunion all\nselect * from no_merge_bot_commits",
        extra_ctes_injected: true,
        extra_ctes: [],
        contract: { enforced: false, alias_types: true, checksum: null },
        access: "protected",
        constraints: [],
        version: null,
        latest_version: null,
        deprecation_date: null,
      },
    "model.opensource_observer.stg_github__events": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_github__events",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/github/stg_github__events.sql",
      original_file_path:
        "warehouse/dbt/models/staging/github/stg_github__events.sql",
      unique_id: "model.opensource_observer.stg_github__events",
      fqn: ["opensource_observer", "staging", "github", "stg_github__events"],
      alias: "stg_github__events",
      checksum: {
        name: "sha256",
        checksum:
          "5d0cf49c3ed3749cde32c92d8860dbad8a13e3f48ef84c17ca7643c1c89cc8cf",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: ["staging", "github", "events"],
        meta: { contributors: "oso-team, tomfutago" },
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "created_at",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
      },
      tags: ["staging", "github", "events"],
      description: "GitHub events",
      columns: {
        type: {
          name: "type",
          description: "event type",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        public: {
          name: "public",
          description: "is this repository public?",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        payload: {
          name: "payload",
          description: "JSON containing event payload",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "repo.id": {
          name: "repo.id",
          description: "element of repo struct: repository id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "repo.name": {
          name: "repo.name",
          description: "element of repo struct: repository name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "repo.url": {
          name: "repo.url",
          description: "element of repo struct: repository url",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "actor.id": {
          name: "actor.id",
          description: "element of actor struct: user id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "actor.login": {
          name: "actor.login",
          description: "element of actor struct: user login",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "actor.gravatar_id": {
          name: "actor.gravatar_id",
          description: "element of actor struct: user gravatar id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "actor.avatar_url": {
          name: "actor.avatar_url",
          description: "element of actor struct: user avatar url",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "actor.url": {
          name: "actor.url",
          description: "element of actor struct: user url",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "org.id": {
          name: "org.id",
          description: "element of org struct: org id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "org.login": {
          name: "org.login",
          description: "element of org struct: org login",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "org.gravatar_id": {
          name: "org.gravatar_id",
          description: "element of org struct: org gravatar id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "org.avatar_url": {
          name: "org.avatar_url",
          description: "element of org struct: org avatar url",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "org.url": {
          name: "org.url",
          description: "element of org struct: org url",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        created_at: {
          name: "created_at",
          description: "event timestamp",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        id: {
          name: "id",
          description: "event id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        other: {
          name: "other",
          description: "JSON containing event other info",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
      },
      meta: { contributors: "oso-team, tomfutago" },
      group: null,
      docs: { show: true, node_color: null },
      patch_path:
        "opensource_observer://warehouse/dbt/models/staging/github/stg_github__schema.yml",
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        tags: ["staging", "github", "events"],
        meta: { contributors: "oso-team, tomfutago" },
        partition_by: {
          field: "created_at",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978676.371349,
      relation_name: "`opensource-observer`.`oso`.`stg_github__events`",
      raw_code:
        '{#\n  Gathers all github events for all github artifacts in the oss directory\n\n  If this is not targetting production then the behavior is to generate a\n  smaller table by using the canonical "production" database that is available\n  publicly at opensource-observer.oso.stg_github__events. This is handled in the\n  sources file and here. \n#}\n{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "created_at",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n\nselect gh.*\nfrom {{ oso_source(\'github_archive\', \'events\') }} as gh\nwhere\n  gh.repo.id in (\n    select id from {{ ref(\'stg_ossd__current_repositories\') }}\n  )\n  {# If this is production then make sure it\'s incremental #}\n  {% if target.name == \'production\' %}\n  {% if is_incremental() %}\n  AND _TABLE_SUFFIX > FORMAT_TIMESTAMP(\n    "%y%m%d", \n    TIMESTAMP_SUB(_dbt_max_partition, interval 1 day)\n  )\n  {% else %}\n    {# \n    If/when we do full refreshes we are currently only taking data from 2015\n    onward due to schema changes of the github events in the githubarchive \n    #}\n    AND _TABLE_SUFFIX >= "150101" \n  {% endif %}\n  {% else %}\n    {% if is_incremental() %}\n      and created_at >= TIMESTAMP_SUB(_dbt_max_partition, interval 1 day)\n      {{ playground_filter("created_at", is_start=False) }}\n    {% else %}\n    {{ playground_filter("created_at", is_start=False) }}\n    {% endif %}\n  {% endif %}',
      language: "sql",
      refs: [
        {
          name: "stg_ossd__current_repositories",
          package: null,
          version: null,
        },
      ],
      sources: [["github_archive", "events"]],
      metrics: [],
      depends_on: {
        macros: [
          "macro.opensource_observer.oso_source",
          "macro.dbt.is_incremental",
        ],
        nodes: [
          "source.opensource_observer.github_archive.events",
          "model.opensource_observer.stg_ossd__current_repositories",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/github/stg_github__events.sql",
      compiled: true,
      compiled_code:
        '\n\n\nselect gh.*\nfrom `githubarchive`.`day`.`20*` as gh\nwhere\n  gh.repo.id in (\n    select id from `opensource-observer`.`oso`.`stg_ossd__current_repositories`\n  )\n  \n  \n  \n  AND _TABLE_SUFFIX > FORMAT_TIMESTAMP(\n    "%y%m%d", \n    TIMESTAMP_SUB(_dbt_max_partition, interval 1 day)\n  )\n  \n  ',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_github__pull_request_merge_events": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_github__pull_request_merge_events",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/github/stg_github__pull_request_merge_events.sql",
      original_file_path:
        "warehouse/dbt/models/staging/github/stg_github__pull_request_merge_events.sql",
      unique_id:
        "model.opensource_observer.stg_github__pull_request_merge_events",
      fqn: [
        "opensource_observer",
        "staging",
        "github",
        "stg_github__pull_request_merge_events",
      ],
      alias: "stg_github__pull_request_merge_events",
      checksum: {
        name: "sha256",
        checksum:
          "b61cdbdfe47506af478636fa9608299118704159e2ea0b6a2f231d1c8242d058",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: ["staging", "github", "events", "pull", "merge"],
        meta: { contributors: "oso-team, tomfutago" },
        group: null,
        materialized: "view",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
      },
      tags: ["staging", "github", "events", "pull", "merge"],
      description: "GitHub pull requests + merge events",
      columns: {
        id: {
          name: "id",
          description: "event id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        created_at: {
          name: "created_at",
          description: "event timestamp",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "repo.id": {
          name: "repo.id",
          description: "element of repo struct: repository id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "repo.name": {
          name: "repo.name",
          description: "element of repo struct: repository name",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "actor.id": {
          name: "actor.id",
          description: "element of actor struct: user id",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        "actor.login": {
          name: "actor.login",
          description: "element of actor struct: user login",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        type: {
          name: "type",
          description: "event type",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        state: {
          name: "state",
          description: "payload state",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
        merge_commit_sha: {
          name: "merge_commit_sha",
          description: "payload merge commit sha",
          meta: {},
          data_type: null,
          constraints: [],
          quote: null,
          tags: [],
        },
      },
      meta: { contributors: "oso-team, tomfutago" },
      group: null,
      docs: { show: true, node_color: null },
      patch_path:
        "opensource_observer://warehouse/dbt/models/staging/github/stg_github__schema.yml",
      build_path: null,
      unrendered_config: {
        materialized: "view",
        tags: ["staging", "github", "events", "pull", "merge"],
        meta: { contributors: "oso-team, tomfutago" },
      },
      created_at: 1719978676.3802898,
      relation_name:
        "`opensource-observer`.`oso`.`stg_github__pull_request_merge_events`",
      raw_code:
        'with pull_request_events as (\n  select *\n  from {{ ref(\'stg_github__events\') }} as ghe\n  where ghe.type = "PullRequestEvent"\n)\n\nselect distinct\n  pre.repo.id as repository_id,\n  pre.repo.name as repository_name,\n  "PULL_REQUEST_MERGED" as `type`,\n  JSON_VALUE(pre.payload, "$.pull_request.id") as id,\n  PARSE_TIMESTAMP(\n    "%Y-%m-%dT%H:%M:%E*SZ",\n    JSON_VALUE(pre.payload, "$.pull_request.merged_at")\n  ) as created_at,\n  CAST(JSON_VALUE(pre.payload, "$.pull_request.user.id") as INTEGER)\n    as actor_id,\n  JSON_VALUE(\n    pre.payload, "$.pull_request.user.login"\n  ) as actor_login,\n  JSON_VALUE(\n    pre.payload, "$.pull_request.state"\n  ) as state,\n  JSON_VALUE(\n    pre.payload, "$.pull_request.merge_commit_sha"\n  ) as merge_commit_sha,\n  JSON_VALUE(\n    pre.payload, "$.pull_request.changed_files"\n  ) as changed_files,\n  JSON_VALUE(\n    pre.payload, "$.pull_request.additions"\n  ) as additions,\n  JSON_VALUE(\n    pre.payload, "$.pull_request.deletions"\n  ) as deletions,\n  JSON_VALUE(\n    pre.payload, "$.pull_request.review_comments"\n  ) as review_comments,\n  JSON_VALUE(\n    pre.payload, "$.pull_request.author_association"\n  ) as author_association\nfrom pull_request_events as pre\nwhere\n  JSON_VALUE(pre.payload, "$.pull_request.merged_at") is not null\n  and JSON_VALUE(pre.payload, "$.action") = "closed"',
      language: "sql",
      refs: [{ name: "stg_github__events", package: null, version: null }],
      sources: [],
      metrics: [],
      depends_on: {
        macros: [],
        nodes: ["model.opensource_observer.stg_github__events"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/github/stg_github__pull_request_merge_events.sql",
      compiled: true,
      compiled_code:
        'with pull_request_events as (\n  select *\n  from `opensource-observer`.`oso`.`stg_github__events` as ghe\n  where ghe.type = "PullRequestEvent"\n)\n\nselect distinct\n  pre.repo.id as repository_id,\n  pre.repo.name as repository_name,\n  "PULL_REQUEST_MERGED" as `type`,\n  JSON_VALUE(pre.payload, "$.pull_request.id") as id,\n  PARSE_TIMESTAMP(\n    "%Y-%m-%dT%H:%M:%E*SZ",\n    JSON_VALUE(pre.payload, "$.pull_request.merged_at")\n  ) as created_at,\n  CAST(JSON_VALUE(pre.payload, "$.pull_request.user.id") as INTEGER)\n    as actor_id,\n  JSON_VALUE(\n    pre.payload, "$.pull_request.user.login"\n  ) as actor_login,\n  JSON_VALUE(\n    pre.payload, "$.pull_request.state"\n  ) as state,\n  JSON_VALUE(\n    pre.payload, "$.pull_request.merge_commit_sha"\n  ) as merge_commit_sha,\n  JSON_VALUE(\n    pre.payload, "$.pull_request.changed_files"\n  ) as changed_files,\n  JSON_VALUE(\n    pre.payload, "$.pull_request.additions"\n  ) as additions,\n  JSON_VALUE(\n    pre.payload, "$.pull_request.deletions"\n  ) as deletions,\n  JSON_VALUE(\n    pre.payload, "$.pull_request.review_comments"\n  ) as review_comments,\n  JSON_VALUE(\n    pre.payload, "$.pull_request.author_association"\n  ) as author_association\nfrom pull_request_events as pre\nwhere\n  JSON_VALUE(pre.payload, "$.pull_request.merged_at") is not null\n  and JSON_VALUE(pre.payload, "$.action") = "closed"',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_optimism__proxies": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_optimism__proxies",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/optimism/stg_optimism__proxies.sql",
      original_file_path:
        "warehouse/dbt/models/staging/optimism/stg_optimism__proxies.sql",
      unique_id: "model.opensource_observer.stg_optimism__proxies",
      fqn: [
        "opensource_observer",
        "staging",
        "optimism",
        "stg_optimism__proxies",
      ],
      alias: "stg_optimism__proxies",
      checksum: {
        name: "sha256",
        checksum:
          "e89cb681f398f716cb81446730bdb05acc9b1ed76da9fbf5b77e9ce182f5346e",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: "id",
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_key: "id",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978676.0449998,
      relation_name: "`opensource-observer`.`oso`.`stg_optimism__proxies`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_key="id",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{% if is_incremental() %}\n  {% set start = "TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)" %}\n{% else %}\n  {% set start = "\'1970-01-01\'" %}\n{% endif %}\n{{ known_proxies("superchain", start, traces="optimism_traces") }}',
      language: "sql",
      refs: [],
      sources: [["superchain", "optimism_traces"]],
      metrics: [],
      depends_on: {
        macros: [
          "macro.dbt.is_incremental",
          "macro.opensource_observer.known_proxies",
        ],
        nodes: ["source.opensource_observer.superchain.optimism_traces"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/optimism/stg_optimism__proxies.sql",
      compiled: true,
      compiled_code:
        "\n\n  \n\n\n\n\n\nwith proxy_contracts as (\n  select * \n    from UNNEST([ STRUCT\n    (\n      'SAFE' as proxy_type,\n      '1.4.1' as `version`,\n      LOWER('0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67') as factory_address\n    ),\n    ( \n      'SAFE',\n      '1.3.0',\n      LOWER('0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC')\n    ), \n    (\n      'SAFE',\n      '1.1.1',\n      LOWER('0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B')\n    ),\n    (\n      'SAFE',\n      '1.0.0',\n      LOWER('0x12302fE9c02ff50939BaAaaf415fc226C078613C')\n    ),  \n    (\n      'ENTRYPOINT',\n      '0.0.7',\n      LOWER('0x0000000071727De22E5E9d8BAf0edAc6f37da032')\n    ),\n    (\n      'ENTRYPOINT',\n      '0.0.6',\n      LOWER('0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789')\n    )\n  ])\n  \n),\nproxy_txns as (\n  select \n    traces.id,\n    traces.block_timestamp, \n    traces.transaction_hash,     \n    traces.from_address,\n    traces.to_address,\n    proxies.proxy_type,\n    case\n      when lower(traces.from_address) = lower(proxies.factory_address)\n      then traces.from_address\n      when lower(traces.to_address) = lower(proxies.factory_address)\n      then traces.to_address\n      else null\n    end as proxy_address\n  from `opensource-observer`.`superchain`.`optimism_traces` as traces\n  inner join proxy_contracts as proxies\n    on lower(traces.from_address) = lower(proxies.factory_address)\n    or lower(traces.to_address) = lower(proxies.factory_address)\n  where\n    traces.block_timestamp >= TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)    \n    and traces.status = 1\n    and traces.trace_type = 'call'\n    and traces.call_type != 'staticcall'\n    and traces.from_address != traces.to_address\n)\nselect\n  id,\n  block_timestamp,\n  transaction_hash,\n  proxy_type,\n  proxy_address,\n  from_address,\n  to_address\nfrom proxy_txns\nwhere proxy_address is not null\n\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_optimism__factories": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_optimism__factories",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/optimism/stg_optimism__factories.sql",
      original_file_path:
        "warehouse/dbt/models/staging/optimism/stg_optimism__factories.sql",
      unique_id: "model.opensource_observer.stg_optimism__factories",
      fqn: [
        "opensource_observer",
        "staging",
        "optimism",
        "stg_optimism__factories",
      ],
      alias: "stg_optimism__factories",
      checksum: {
        name: "sha256",
        checksum:
          "fb0aac20d23f776970d1a451cf26f682c8eb99a0f732e41f758f5d3eba78b509",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978676.0504682,
      relation_name: "`opensource-observer`.`oso`.`stg_optimism__factories`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="transaction_hash",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  ) \n}}\n{{ \n  factory_deployments(\n    "superchain", \n    traces="optimism_traces",\n    transactions_source=oso_source("optimism", "transactions"),\n    transactions_table_transaction_hash_column="transaction_hash",\n  ) \n}}',
      language: "sql",
      refs: [],
      sources: [
        ["optimism", "transactions"],
        ["superchain", "optimism_traces"],
      ],
      metrics: [],
      depends_on: {
        macros: [
          "macro.opensource_observer.oso_source",
          "macro.opensource_observer.factory_deployments",
        ],
        nodes: [
          "source.opensource_observer.optimism.transactions",
          "source.opensource_observer.superchain.optimism_traces",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/optimism/stg_optimism__factories.sql",
      compiled: true,
      compiled_code:
        '\n\n\n\n\n\n\n\nWITH transactions AS (\n  SELECT *\n  FROM `bigquery-public-data`.`goog_blockchain_optimism_mainnet_us`.`transactions`\n  \n  WHERE block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  \n)\n\nselect \n  traces.block_timestamp, \n  traces.transaction_hash, \n  \n  txs.from_address as originating_address, \n  \n  txs.to_address as originating_contract,\n  traces.from_address as factory_address, \n  traces.to_address as contract_address\nfrom `opensource-observer`.`superchain`.`optimism_traces` as traces\ninner join transactions as txs\n  on `txs`.`transaction_hash` = `traces`.`transaction_hash`\nwhere\n  LOWER(traces.from_address) != "0x3fab184622dc19b6109349b94811493bf2a45362"\n  and LOWER(trace_type) in ("create", "create2")\n  and status = 1\n\n  and `traces`.block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n\n\n',
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_optimism__deployers": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_optimism__deployers",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/optimism/stg_optimism__deployers.sql",
      original_file_path:
        "warehouse/dbt/models/staging/optimism/stg_optimism__deployers.sql",
      unique_id: "model.opensource_observer.stg_optimism__deployers",
      fqn: [
        "opensource_observer",
        "staging",
        "optimism",
        "stg_optimism__deployers",
      ],
      alias: "stg_optimism__deployers",
      checksum: {
        name: "sha256",
        checksum:
          "3c7de717245229d6cce0963b6b0c691a0dcf3e0b5217b302621ab272a883dac1",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "incremental",
        incremental_strategy: "insert_overwrite",
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "append_new_columns",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "incremental",
        partition_by: {
          field: "block_timestamp",
          data_type: "timestamp",
          granularity: "day",
        },
        unique_id: "transaction_hash",
        on_schema_change: "append_new_columns",
        incremental_strategy: "insert_overwrite",
      },
      created_at: 1719978676.0568945,
      relation_name: "`opensource-observer`.`oso`.`stg_optimism__deployers`",
      raw_code:
        '{{\n  config(\n    materialized=\'incremental\',\n    partition_by={\n      "field": "block_timestamp",\n      "data_type": "timestamp",\n      "granularity": "day",\n    },\n    unique_id="transaction_hash",\n    on_schema_change="append_new_columns",\n    incremental_strategy="insert_overwrite"\n  )\n}}\n{{ goog_blockchain_deployers("optimism") }}',
      language: "sql",
      refs: [],
      sources: [["optimism", "receipts"]],
      metrics: [],
      depends_on: {
        macros: ["macro.opensource_observer.goog_blockchain_deployers"],
        nodes: ["source.opensource_observer.optimism.receipts"],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/optimism/stg_optimism__deployers.sql",
      compiled: true,
      compiled_code:
        "\n\n\nSELECT\n  block_timestamp AS block_timestamp,\n  transaction_hash AS transaction_hash,\n  from_address AS deployer_address,\n  contract_address AS contract_address\nFROM `bigquery-public-data`.`goog_blockchain_optimism_mainnet_us`.`receipts`\nWHERE\n  to_address IS null\n  AND `status` = 1\n  \n  AND block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  \n\n\n\n",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
    "model.opensource_observer.stg_optimism__airdrop_addresses": {
      database: "opensource-observer",
      schema: "oso",
      name: "stg_optimism__airdrop_addresses",
      resource_type: "model",
      package_name: "opensource_observer",
      path: "staging/optimism/stg_optimism__airdrop_addresses.sql",
      original_file_path:
        "warehouse/dbt/models/staging/optimism/stg_optimism__airdrop_addresses.sql",
      unique_id: "model.opensource_observer.stg_optimism__airdrop_addresses",
      fqn: [
        "opensource_observer",
        "staging",
        "optimism",
        "stg_optimism__airdrop_addresses",
      ],
      alias: "stg_optimism__airdrop_addresses",
      checksum: {
        name: "sha256",
        checksum:
          "8bea9e5de5353be1e13d0efc94b280769a001293a639bd4805313cc5085ff7e4",
      },
      config: {
        enabled: true,
        alias: null,
        schema: null,
        database: null,
        tags: [],
        meta: {},
        group: null,
        materialized: "table",
        incremental_strategy: null,
        persist_docs: {},
        "post-hook": [],
        "pre-hook": [],
        quoting: {},
        column_types: {},
        full_refresh: null,
        unique_key: null,
        on_schema_change: "ignore",
        on_configuration_change: "apply",
        grants: {},
        packages: [],
        docs: { show: true, node_color: null },
        contract: { enforced: false, alias_types: true },
        access: "protected",
        partition_by: {
          field: "airdrop_round",
          data_type: "int64",
          range: { start: 0, end: 100, interval: 10 },
        },
      },
      tags: [],
      description: "",
      columns: {},
      meta: {},
      group: null,
      docs: { show: true, node_color: null },
      patch_path: null,
      build_path: null,
      unrendered_config: {
        materialized: "table",
        partition_by: {
          field: "airdrop_round",
          data_type: "int64",
          range: { start: 0, end: 100, interval: 10 },
        },
      },
      created_at: 1719978676.0615697,
      relation_name:
        "`opensource-observer`.`oso`.`stg_optimism__airdrop_addresses`",
      raw_code:
        '{{ config(\n    materialized=\'table\',\n    partition_by={\n      "field": "airdrop_round",\n      "data_type": "int64",\n      "range": {\n        "start": 0,\n        "end": 100,\n        "interval": 10\n      }\n    }\n) }}\n\n{{\n  combine_op_airdrops(generate_range(1, 4))\n}}',
      language: "sql",
      refs: [],
      sources: [
        ["static_data_sources", "op_airdrop1_addresses_detailed_list"],
        ["static_data_sources", "op_airdrop2_addresses_detailed_list"],
        ["static_data_sources", "op_airdrop3_addresses_detailed_list"],
        ["static_data_sources", "op_airdrop4_addresses_detailed_list"],
      ],
      metrics: [],
      depends_on: {
        macros: [
          "macro.opensource_observer.generate_range",
          "macro.opensource_observer.combine_op_airdrops",
        ],
        nodes: [
          "source.opensource_observer.static_data_sources.op_airdrop1_addresses_detailed_list",
          "source.opensource_observer.static_data_sources.op_airdrop2_addresses_detailed_list",
          "source.opensource_observer.static_data_sources.op_airdrop3_addresses_detailed_list",
          "source.opensource_observer.static_data_sources.op_airdrop4_addresses_detailed_list",
        ],
      },
      compiled_path:
        "target/compiled/opensource_observer/warehouse/dbt/models/staging/optimism/stg_optimism__airdrop_addresses.sql",
      compiled: true,
      compiled_code:
        "\n\nselect lower(cast(address as string)) as address, cast(op_amount_raw as numeric)/1e18 as op_amount, cast('1' as int) as airdrop_round from `opensource-observer`.`static_data_sources`.`op_airdrop1_addresses_detailed_list` UNION ALL\nselect lower(cast(address as string)) as address, cast(op_amount_raw as numeric)/1e18 as op_amount, cast('2' as int) as airdrop_round from `opensource-observer`.`static_data_sources`.`op_airdrop2_addresses_detailed_list` UNION ALL\nselect lower(cast(address as string)) as address, cast(op_amount_raw as numeric)/1e18 as op_amount, cast('3' as int) as airdrop_round from `opensource-observer`.`static_data_sources`.`op_airdrop3_addresses_detailed_list` UNION ALL\nselect lower(cast(address as string)) as address, cast(op_amount_raw as numeric)/1e18 as op_amount, cast('4' as int) as airdrop_round from `opensource-observer`.`static_data_sources`.`op_airdrop4_addresses_detailed_list`",
      extra_ctes_injected: true,
      extra_ctes: [],
      contract: { enforced: false, alias_types: true, checksum: null },
      access: "protected",
      constraints: [],
      version: null,
      latest_version: null,
      deprecation_date: null,
    },
  },
  sources: {
    "source.opensource_observer.mode.blocks": {
      database: "opensource-observer",
      schema: "superchain",
      name: "blocks",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/mode_sources.yml",
      original_file_path: "warehouse/dbt/models/mode_sources.yml",
      unique_id: "source.opensource_observer.mode.blocks",
      fqn: ["opensource_observer", "mode", "blocks"],
      source_name: "mode",
      source_description: "",
      loader: "",
      identifier: "mode_blocks",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`superchain`.`mode_blocks`",
      created_at: 1719978676.3974717,
    },
    "source.opensource_observer.mode.transactions": {
      database: "opensource-observer",
      schema: "superchain",
      name: "transactions",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/mode_sources.yml",
      original_file_path: "warehouse/dbt/models/mode_sources.yml",
      unique_id: "source.opensource_observer.mode.transactions",
      fqn: ["opensource_observer", "mode", "transactions"],
      source_name: "mode",
      source_description: "",
      loader: "",
      identifier: "mode_transactions",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`superchain`.`mode_transactions`",
      created_at: 1719978676.3986633,
    },
    "source.opensource_observer.mode.traces": {
      database: "opensource-observer",
      schema: "superchain",
      name: "traces",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/mode_sources.yml",
      original_file_path: "warehouse/dbt/models/mode_sources.yml",
      unique_id: "source.opensource_observer.mode.traces",
      fqn: ["opensource_observer", "mode", "traces"],
      source_name: "mode",
      source_description: "",
      loader: "",
      identifier: "mode_traces",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`superchain`.`mode_traces`",
      created_at: 1719978676.3988357,
    },
    "source.opensource_observer.github_archive.events": {
      database: "githubarchive",
      schema: "day",
      name: "events",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/github_sources.yml",
      original_file_path: "warehouse/dbt/models/github_sources.yml",
      unique_id: "source.opensource_observer.github_archive.events",
      fqn: ["opensource_observer", "github_archive", "events"],
      source_name: "github_archive",
      source_description: "",
      loader: "",
      identifier: "20*",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`githubarchive`.`day`.`20*`",
      created_at: 1719978676.3989966,
    },
    "source.opensource_observer.frax.blocks": {
      database: "opensource-observer",
      schema: "superchain",
      name: "blocks",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/frax_sources.yml",
      original_file_path: "warehouse/dbt/models/frax_sources.yml",
      unique_id: "source.opensource_observer.frax.blocks",
      fqn: ["opensource_observer", "frax", "blocks"],
      source_name: "frax",
      source_description: "",
      loader: "",
      identifier: "frax_blocks",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`superchain`.`frax_blocks`",
      created_at: 1719978676.3991776,
    },
    "source.opensource_observer.frax.transactions": {
      database: "opensource-observer",
      schema: "superchain",
      name: "transactions",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/frax_sources.yml",
      original_file_path: "warehouse/dbt/models/frax_sources.yml",
      unique_id: "source.opensource_observer.frax.transactions",
      fqn: ["opensource_observer", "frax", "transactions"],
      source_name: "frax",
      source_description: "",
      loader: "",
      identifier: "frax_transactions",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`superchain`.`frax_transactions`",
      created_at: 1719978676.3993385,
    },
    "source.opensource_observer.frax.traces": {
      database: "opensource-observer",
      schema: "superchain",
      name: "traces",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/frax_sources.yml",
      original_file_path: "warehouse/dbt/models/frax_sources.yml",
      unique_id: "source.opensource_observer.frax.traces",
      fqn: ["opensource_observer", "frax", "traces"],
      source_name: "frax",
      source_description: "",
      loader: "",
      identifier: "frax_traces",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`superchain`.`frax_traces`",
      created_at: 1719978676.3994865,
    },
    "source.opensource_observer.superchain.optimism_traces": {
      database: "opensource-observer",
      schema: "superchain",
      name: "optimism_traces",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/superchain_sources.yml",
      original_file_path: "warehouse/dbt/models/superchain_sources.yml",
      unique_id: "source.opensource_observer.superchain.optimism_traces",
      fqn: ["opensource_observer", "superchain", "optimism_traces"],
      source_name: "superchain",
      source_description: "",
      loader: "",
      identifier: "optimism_traces",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: { dagster: { asset_key: ["optimism", "traces"] } },
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`superchain`.`optimism_traces`",
      created_at: 1719978676.3996308,
    },
    "source.opensource_observer.ethereum.transactions": {
      database: "bigquery-public-data",
      schema: "crypto_ethereum",
      name: "transactions",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/ethereum_sources.yml",
      original_file_path: "warehouse/dbt/models/ethereum_sources.yml",
      unique_id: "source.opensource_observer.ethereum.transactions",
      fqn: ["opensource_observer", "ethereum", "transactions"],
      source_name: "ethereum",
      source_description: "",
      loader: "",
      identifier: "transactions",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`bigquery-public-data`.`crypto_ethereum`.`transactions`",
      created_at: 1719978676.3997736,
    },
    "source.opensource_observer.ethereum.traces": {
      database: "bigquery-public-data",
      schema: "crypto_ethereum",
      name: "traces",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/ethereum_sources.yml",
      original_file_path: "warehouse/dbt/models/ethereum_sources.yml",
      unique_id: "source.opensource_observer.ethereum.traces",
      fqn: ["opensource_observer", "ethereum", "traces"],
      source_name: "ethereum",
      source_description: "",
      loader: "",
      identifier: "traces",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`bigquery-public-data`.`crypto_ethereum`.`traces`",
      created_at: 1719978676.3999116,
    },
    "source.opensource_observer.metal.blocks": {
      database: "opensource-observer",
      schema: "superchain",
      name: "blocks",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/metal_sources.yml",
      original_file_path: "warehouse/dbt/models/metal_sources.yml",
      unique_id: "source.opensource_observer.metal.blocks",
      fqn: ["opensource_observer", "metal", "blocks"],
      source_name: "metal",
      source_description: "",
      loader: "",
      identifier: "metal_blocks",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`superchain`.`metal_blocks`",
      created_at: 1719978676.4043858,
    },
    "source.opensource_observer.metal.transactions": {
      database: "opensource-observer",
      schema: "superchain",
      name: "transactions",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/metal_sources.yml",
      original_file_path: "warehouse/dbt/models/metal_sources.yml",
      unique_id: "source.opensource_observer.metal.transactions",
      fqn: ["opensource_observer", "metal", "transactions"],
      source_name: "metal",
      source_description: "",
      loader: "",
      identifier: "metal_transactions",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`superchain`.`metal_transactions`",
      created_at: 1719978676.404669,
    },
    "source.opensource_observer.metal.traces": {
      database: "opensource-observer",
      schema: "superchain",
      name: "traces",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/metal_sources.yml",
      original_file_path: "warehouse/dbt/models/metal_sources.yml",
      unique_id: "source.opensource_observer.metal.traces",
      fqn: ["opensource_observer", "metal", "traces"],
      source_name: "metal",
      source_description: "",
      loader: "",
      identifier: "metal_traces",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`superchain`.`metal_traces`",
      created_at: 1719978676.4048166,
    },
    "source.opensource_observer.gitcoin.passport_scores": {
      database: "opensource-observer",
      schema: "gitcoin",
      name: "passport_scores",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/passport_sources.yml",
      original_file_path: "warehouse/dbt/models/passport_sources.yml",
      unique_id: "source.opensource_observer.gitcoin.passport_scores",
      fqn: ["opensource_observer", "gitcoin", "passport_scores"],
      source_name: "gitcoin",
      source_description: "",
      loader: "",
      identifier: "passport_scores",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`gitcoin`.`passport_scores`",
      created_at: 1719978676.4049585,
    },
    "source.opensource_observer.farcaster.farcaster_verifications": {
      database: "opensource-observer",
      schema: "farcaster",
      name: "farcaster_verifications",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/farcaster_sources.yml",
      original_file_path: "warehouse/dbt/models/farcaster_sources.yml",
      unique_id: "source.opensource_observer.farcaster.farcaster_verifications",
      fqn: ["opensource_observer", "farcaster", "farcaster_verifications"],
      source_name: "farcaster",
      source_description: "",
      loader: "",
      identifier: "verifications",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`farcaster`.`verifications`",
      created_at: 1719978676.4050965,
    },
    "source.opensource_observer.farcaster.farcaster_profiles": {
      database: "opensource-observer",
      schema: "farcaster",
      name: "farcaster_profiles",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/farcaster_sources.yml",
      original_file_path: "warehouse/dbt/models/farcaster_sources.yml",
      unique_id: "source.opensource_observer.farcaster.farcaster_profiles",
      fqn: ["opensource_observer", "farcaster", "farcaster_profiles"],
      source_name: "farcaster",
      source_description: "",
      loader: "",
      identifier: "profiles",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`farcaster`.`profiles`",
      created_at: 1719978676.4052374,
    },
    "source.opensource_observer.pgn.blocks": {
      database: "opensource-observer",
      schema: "superchain",
      name: "blocks",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/pgn_sources.yml",
      original_file_path: "warehouse/dbt/models/pgn_sources.yml",
      unique_id: "source.opensource_observer.pgn.blocks",
      fqn: ["opensource_observer", "pgn", "blocks"],
      source_name: "pgn",
      source_description: "",
      loader: "",
      identifier: "pgn_blocks",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`superchain`.`pgn_blocks`",
      created_at: 1719978676.4053762,
    },
    "source.opensource_observer.pgn.transactions": {
      database: "opensource-observer",
      schema: "superchain",
      name: "transactions",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/pgn_sources.yml",
      original_file_path: "warehouse/dbt/models/pgn_sources.yml",
      unique_id: "source.opensource_observer.pgn.transactions",
      fqn: ["opensource_observer", "pgn", "transactions"],
      source_name: "pgn",
      source_description: "",
      loader: "",
      identifier: "pgn_transactions",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`superchain`.`pgn_transactions`",
      created_at: 1719978676.405522,
    },
    "source.opensource_observer.pgn.traces": {
      database: "opensource-observer",
      schema: "superchain",
      name: "traces",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/pgn_sources.yml",
      original_file_path: "warehouse/dbt/models/pgn_sources.yml",
      unique_id: "source.opensource_observer.pgn.traces",
      fqn: ["opensource_observer", "pgn", "traces"],
      source_name: "pgn",
      source_description: "",
      loader: "",
      identifier: "pgn_traces",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`superchain`.`pgn_traces`",
      created_at: 1719978676.4056563,
    },
    "source.opensource_observer.ossd.projects": {
      database: "opensource-observer",
      schema: "oso",
      name: "projects",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/oss_directory_source.yml",
      original_file_path: "warehouse/dbt/models/oss_directory_source.yml",
      unique_id: "source.opensource_observer.ossd.projects",
      fqn: ["opensource_observer", "ossd", "projects"],
      source_name: "ossd",
      source_description: "",
      loader: "",
      identifier: "projects_ossd",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`oso`.`projects_ossd`",
      created_at: 1719978676.4057896,
    },
    "source.opensource_observer.ossd.collections": {
      database: "opensource-observer",
      schema: "oso",
      name: "collections",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/oss_directory_source.yml",
      original_file_path: "warehouse/dbt/models/oss_directory_source.yml",
      unique_id: "source.opensource_observer.ossd.collections",
      fqn: ["opensource_observer", "ossd", "collections"],
      source_name: "ossd",
      source_description: "",
      loader: "",
      identifier: "collections_ossd",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`oso`.`collections_ossd`",
      created_at: 1719978676.4059262,
    },
    "source.opensource_observer.ossd.repositories": {
      database: "opensource-observer",
      schema: "oso",
      name: "repositories",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/oss_directory_source.yml",
      original_file_path: "warehouse/dbt/models/oss_directory_source.yml",
      unique_id: "source.opensource_observer.ossd.repositories",
      fqn: ["opensource_observer", "ossd", "repositories"],
      source_name: "ossd",
      source_description: "",
      loader: "",
      identifier: "repositories_ossd",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`oso`.`repositories_ossd`",
      created_at: 1719978676.4060614,
    },
    "source.opensource_observer.base.blocks": {
      database: "opensource-observer",
      schema: "superchain",
      name: "blocks",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/base_sources.yml",
      original_file_path: "warehouse/dbt/models/base_sources.yml",
      unique_id: "source.opensource_observer.base.blocks",
      fqn: ["opensource_observer", "base", "blocks"],
      source_name: "base",
      source_description: "",
      loader: "",
      identifier: "base_blocks",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`superchain`.`base_blocks`",
      created_at: 1719978676.4061942,
    },
    "source.opensource_observer.base.transactions": {
      database: "opensource-observer",
      schema: "superchain",
      name: "transactions",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/base_sources.yml",
      original_file_path: "warehouse/dbt/models/base_sources.yml",
      unique_id: "source.opensource_observer.base.transactions",
      fqn: ["opensource_observer", "base", "transactions"],
      source_name: "base",
      source_description: "",
      loader: "",
      identifier: "base_transactions",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`superchain`.`base_transactions`",
      created_at: 1719978676.406327,
    },
    "source.opensource_observer.base.traces": {
      database: "opensource-observer",
      schema: "superchain",
      name: "traces",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/base_sources.yml",
      original_file_path: "warehouse/dbt/models/base_sources.yml",
      unique_id: "source.opensource_observer.base.traces",
      fqn: ["opensource_observer", "base", "traces"],
      source_name: "base",
      source_description: "",
      loader: "",
      identifier: "base_traces",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`superchain`.`base_traces`",
      created_at: 1719978676.406461,
    },
    "source.opensource_observer.arbitrum.transactions": {
      database: "bigquery-public-data",
      schema: "goog_blockchain_arbitrum_one_us",
      name: "transactions",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/arbitrum_sources.yml",
      original_file_path: "warehouse/dbt/models/arbitrum_sources.yml",
      unique_id: "source.opensource_observer.arbitrum.transactions",
      fqn: ["opensource_observer", "arbitrum", "transactions"],
      source_name: "arbitrum",
      source_description: "",
      loader: "",
      identifier: "transactions",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name:
        "`bigquery-public-data`.`goog_blockchain_arbitrum_one_us`.`transactions`",
      created_at: 1719978676.406594,
    },
    "source.opensource_observer.arbitrum.logs": {
      database: "bigquery-public-data",
      schema: "goog_blockchain_arbitrum_one_us",
      name: "logs",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/arbitrum_sources.yml",
      original_file_path: "warehouse/dbt/models/arbitrum_sources.yml",
      unique_id: "source.opensource_observer.arbitrum.logs",
      fqn: ["opensource_observer", "arbitrum", "logs"],
      source_name: "arbitrum",
      source_description: "",
      loader: "",
      identifier: "logs",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name:
        "`bigquery-public-data`.`goog_blockchain_arbitrum_one_us`.`logs`",
      created_at: 1719978676.4067266,
    },
    "source.opensource_observer.arbitrum.receipts": {
      database: "bigquery-public-data",
      schema: "goog_blockchain_arbitrum_one_us",
      name: "receipts",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/arbitrum_sources.yml",
      original_file_path: "warehouse/dbt/models/arbitrum_sources.yml",
      unique_id: "source.opensource_observer.arbitrum.receipts",
      fqn: ["opensource_observer", "arbitrum", "receipts"],
      source_name: "arbitrum",
      source_description: "",
      loader: "",
      identifier: "receipts",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name:
        "`bigquery-public-data`.`goog_blockchain_arbitrum_one_us`.`receipts`",
      created_at: 1719978676.406858,
    },
    "source.opensource_observer.karma3.globaltrust": {
      database: "opensource-observer",
      schema: "karma3",
      name: "globaltrust",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/karma3_sources.yml",
      original_file_path: "warehouse/dbt/models/karma3_sources.yml",
      unique_id: "source.opensource_observer.karma3.globaltrust",
      fqn: ["opensource_observer", "karma3", "globaltrust"],
      source_name: "karma3",
      source_description: "",
      loader: "",
      identifier: "globaltrust",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`karma3`.`globaltrust`",
      created_at: 1719978676.4069898,
    },
    "source.opensource_observer.karma3.localtrust": {
      database: "opensource-observer",
      schema: "karma3",
      name: "localtrust",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/karma3_sources.yml",
      original_file_path: "warehouse/dbt/models/karma3_sources.yml",
      unique_id: "source.opensource_observer.karma3.localtrust",
      fqn: ["opensource_observer", "karma3", "localtrust"],
      source_name: "karma3",
      source_description: "",
      loader: "",
      identifier: "localtrust",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`karma3`.`localtrust`",
      created_at: 1719978676.4071417,
    },
    "source.opensource_observer.lens.lens_owners": {
      database: "opensource-observer",
      schema: "lens_v2_polygon",
      name: "lens_owners",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/lens_sources.yml",
      original_file_path: "warehouse/dbt/models/lens_sources.yml",
      unique_id: "source.opensource_observer.lens.lens_owners",
      fqn: ["opensource_observer", "lens", "lens_owners"],
      source_name: "lens",
      source_description: "",
      loader: "",
      identifier: "profile_ownership_history",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name:
        "`opensource-observer`.`lens_v2_polygon`.`profile_ownership_history`",
      created_at: 1719978676.4116027,
    },
    "source.opensource_observer.lens.lens_profiles": {
      database: "opensource-observer",
      schema: "lens_v2_polygon",
      name: "lens_profiles",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/lens_sources.yml",
      original_file_path: "warehouse/dbt/models/lens_sources.yml",
      unique_id: "source.opensource_observer.lens.lens_profiles",
      fqn: ["opensource_observer", "lens", "lens_profiles"],
      source_name: "lens",
      source_description: "",
      loader: "",
      identifier: "profile_metadata",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name:
        "`opensource-observer`.`lens_v2_polygon`.`profile_metadata`",
      created_at: 1719978676.4117362,
    },
    "source.opensource_observer.zora.blocks": {
      database: "opensource-observer",
      schema: "superchain",
      name: "blocks",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/zora_sources.yml",
      original_file_path: "warehouse/dbt/models/zora_sources.yml",
      unique_id: "source.opensource_observer.zora.blocks",
      fqn: ["opensource_observer", "zora", "blocks"],
      source_name: "zora",
      source_description: "",
      loader: "",
      identifier: "zora_blocks",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`superchain`.`zora_blocks`",
      created_at: 1719978676.4118686,
    },
    "source.opensource_observer.zora.transactions": {
      database: "opensource-observer",
      schema: "superchain",
      name: "transactions",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/zora_sources.yml",
      original_file_path: "warehouse/dbt/models/zora_sources.yml",
      unique_id: "source.opensource_observer.zora.transactions",
      fqn: ["opensource_observer", "zora", "transactions"],
      source_name: "zora",
      source_description: "",
      loader: "",
      identifier: "zora_transactions",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`superchain`.`zora_transactions`",
      created_at: 1719978676.4120054,
    },
    "source.opensource_observer.zora.traces": {
      database: "opensource-observer",
      schema: "superchain",
      name: "traces",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/zora_sources.yml",
      original_file_path: "warehouse/dbt/models/zora_sources.yml",
      unique_id: "source.opensource_observer.zora.traces",
      fqn: ["opensource_observer", "zora", "traces"],
      source_name: "zora",
      source_description: "",
      loader: "",
      identifier: "zora_traces",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`superchain`.`zora_traces`",
      created_at: 1719978676.4121704,
    },
    "source.opensource_observer.dune.arbitrum_contract_usage": {
      database: "opensource-observer",
      schema: "oso",
      name: "arbitrum_contract_usage",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/dune_sources.yml",
      original_file_path: "warehouse/dbt/models/dune_sources.yml",
      unique_id: "source.opensource_observer.dune.arbitrum_contract_usage",
      fqn: ["opensource_observer", "dune", "arbitrum_contract_usage"],
      source_name: "dune",
      source_description: "",
      loader: "",
      identifier: "arbitrum_contract_usage",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`oso`.`arbitrum_contract_usage`",
      created_at: 1719978676.4123116,
    },
    "source.opensource_observer.dune.optimism_contract_usage": {
      database: "opensource-observer",
      schema: "oso",
      name: "optimism_contract_usage",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/dune_sources.yml",
      original_file_path: "warehouse/dbt/models/dune_sources.yml",
      unique_id: "source.opensource_observer.dune.optimism_contract_usage",
      fqn: ["opensource_observer", "dune", "optimism_contract_usage"],
      source_name: "dune",
      source_description: "",
      loader: "",
      identifier: "optimism_contract_usage",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name: "`opensource-observer`.`oso`.`optimism_contract_usage`",
      created_at: 1719978676.4124439,
    },
    "source.opensource_observer.optimism.transactions": {
      database: "bigquery-public-data",
      schema: "goog_blockchain_optimism_mainnet_us",
      name: "transactions",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/optimism_sources.yml",
      original_file_path: "warehouse/dbt/models/optimism_sources.yml",
      unique_id: "source.opensource_observer.optimism.transactions",
      fqn: ["opensource_observer", "optimism", "transactions"],
      source_name: "optimism",
      source_description: "",
      loader: "",
      identifier: "transactions",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name:
        "`bigquery-public-data`.`goog_blockchain_optimism_mainnet_us`.`transactions`",
      created_at: 1719978676.4125767,
    },
    "source.opensource_observer.optimism.logs": {
      database: "bigquery-public-data",
      schema: "goog_blockchain_optimism_mainnet_us",
      name: "logs",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/optimism_sources.yml",
      original_file_path: "warehouse/dbt/models/optimism_sources.yml",
      unique_id: "source.opensource_observer.optimism.logs",
      fqn: ["opensource_observer", "optimism", "logs"],
      source_name: "optimism",
      source_description: "",
      loader: "",
      identifier: "logs",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name:
        "`bigquery-public-data`.`goog_blockchain_optimism_mainnet_us`.`logs`",
      created_at: 1719978676.4127226,
    },
    "source.opensource_observer.optimism.receipts": {
      database: "bigquery-public-data",
      schema: "goog_blockchain_optimism_mainnet_us",
      name: "receipts",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/optimism_sources.yml",
      original_file_path: "warehouse/dbt/models/optimism_sources.yml",
      unique_id: "source.opensource_observer.optimism.receipts",
      fqn: ["opensource_observer", "optimism", "receipts"],
      source_name: "optimism",
      source_description: "",
      loader: "",
      identifier: "receipts",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name:
        "`bigquery-public-data`.`goog_blockchain_optimism_mainnet_us`.`receipts`",
      created_at: 1719978676.4128678,
    },
    "source.opensource_observer.optimism.blocks": {
      database: "bigquery-public-data",
      schema: "goog_blockchain_optimism_mainnet_us",
      name: "blocks",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/optimism_sources.yml",
      original_file_path: "warehouse/dbt/models/optimism_sources.yml",
      unique_id: "source.opensource_observer.optimism.blocks",
      fqn: ["opensource_observer", "optimism", "blocks"],
      source_name: "optimism",
      source_description: "",
      loader: "",
      identifier: "blocks",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name:
        "`bigquery-public-data`.`goog_blockchain_optimism_mainnet_us`.`blocks`",
      created_at: 1719978676.4129992,
    },
    "source.opensource_observer.static_data_sources.op_rf4_trusted_addresses": {
      database: "opensource-observer",
      schema: "static_data_sources",
      name: "op_rf4_trusted_addresses",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/static_data_sources.yml",
      original_file_path: "warehouse/dbt/models/static_data_sources.yml",
      unique_id:
        "source.opensource_observer.static_data_sources.op_rf4_trusted_addresses",
      fqn: [
        "opensource_observer",
        "static_data_sources",
        "op_rf4_trusted_addresses",
      ],
      source_name: "static_data_sources",
      source_description: "",
      loader: "",
      identifier: "op_rf4_trusted_addresses",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name:
        "`opensource-observer`.`static_data_sources`.`op_rf4_trusted_addresses`",
      created_at: 1719978676.4131308,
    },
    "source.opensource_observer.static_data_sources.optimist_nft_holders": {
      database: "opensource-observer",
      schema: "static_data_sources",
      name: "optimist_nft_holders",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/static_data_sources.yml",
      original_file_path: "warehouse/dbt/models/static_data_sources.yml",
      unique_id:
        "source.opensource_observer.static_data_sources.optimist_nft_holders",
      fqn: [
        "opensource_observer",
        "static_data_sources",
        "optimist_nft_holders",
      ],
      source_name: "static_data_sources",
      source_description: "",
      loader: "",
      identifier: "optimist_nft_holders",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name:
        "`opensource-observer`.`static_data_sources`.`optimist_nft_holders`",
      created_at: 1719978676.413262,
    },
    "source.opensource_observer.static_data_sources.agora_rf4_applications": {
      database: "opensource-observer",
      schema: "static_data_sources",
      name: "agora_rf4_applications",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/static_data_sources.yml",
      original_file_path: "warehouse/dbt/models/static_data_sources.yml",
      unique_id:
        "source.opensource_observer.static_data_sources.agora_rf4_applications",
      fqn: [
        "opensource_observer",
        "static_data_sources",
        "agora_rf4_applications",
      ],
      source_name: "static_data_sources",
      source_description: "",
      loader: "",
      identifier: "agora_rf4_applications",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name:
        "`opensource-observer`.`static_data_sources`.`agora_rf4_applications`",
      created_at: 1719978676.413395,
    },
    "source.opensource_observer.static_data_sources.agora_rf4_artifacts_by_app":
      {
        database: "opensource-observer",
        schema: "static_data_sources",
        name: "agora_rf4_artifacts_by_app",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/static_data_sources.yml",
        original_file_path: "warehouse/dbt/models/static_data_sources.yml",
        unique_id:
          "source.opensource_observer.static_data_sources.agora_rf4_artifacts_by_app",
        fqn: [
          "opensource_observer",
          "static_data_sources",
          "agora_rf4_artifacts_by_app",
        ],
        source_name: "static_data_sources",
        source_description: "",
        loader: "",
        identifier: "agora_rf4_artifacts_by_app",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: true },
        patch_path: null,
        unrendered_config: {},
        relation_name:
          "`opensource-observer`.`static_data_sources`.`agora_rf4_artifacts_by_app`",
        created_at: 1719978676.4135268,
      },
    "source.opensource_observer.static_data_sources.rf4_project_eligibility": {
      database: "opensource-observer",
      schema: "static_data_sources",
      name: "rf4_project_eligibility",
      resource_type: "source",
      package_name: "opensource_observer",
      path: "warehouse/dbt/models/static_data_sources.yml",
      original_file_path: "warehouse/dbt/models/static_data_sources.yml",
      unique_id:
        "source.opensource_observer.static_data_sources.rf4_project_eligibility",
      fqn: [
        "opensource_observer",
        "static_data_sources",
        "rf4_project_eligibility",
      ],
      source_name: "static_data_sources",
      source_description: "",
      loader: "",
      identifier: "rf4_project_eligibility",
      quoting: { database: null, schema: null, identifier: null, column: null },
      loaded_at_field: null,
      freshness: {
        warn_after: { count: null, period: null },
        error_after: { count: null, period: null },
        filter: null,
      },
      external: null,
      description: "",
      columns: {},
      meta: {},
      source_meta: {},
      tags: [],
      config: { enabled: true },
      patch_path: null,
      unrendered_config: {},
      relation_name:
        "`opensource-observer`.`static_data_sources`.`rf4_project_eligibility`",
      created_at: 1719978676.4136577,
    },
    "source.opensource_observer.static_data_sources.agora_rf4_repos_with_contracts":
      {
        database: "opensource-observer",
        schema: "static_data_sources",
        name: "agora_rf4_repos_with_contracts",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/static_data_sources.yml",
        original_file_path: "warehouse/dbt/models/static_data_sources.yml",
        unique_id:
          "source.opensource_observer.static_data_sources.agora_rf4_repos_with_contracts",
        fqn: [
          "opensource_observer",
          "static_data_sources",
          "agora_rf4_repos_with_contracts",
        ],
        source_name: "static_data_sources",
        source_description: "",
        loader: "",
        identifier: "agora_rf4_repos_with_contracts",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: true },
        patch_path: null,
        unrendered_config: {},
        relation_name:
          "`opensource-observer`.`static_data_sources`.`agora_rf4_repos_with_contracts`",
        created_at: 1719978676.413793,
      },
    "source.opensource_observer.static_data_sources.op_airdrop1_addresses_detailed_list":
      {
        database: "opensource-observer",
        schema: "static_data_sources",
        name: "op_airdrop1_addresses_detailed_list",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/static_data_sources.yml",
        original_file_path: "warehouse/dbt/models/static_data_sources.yml",
        unique_id:
          "source.opensource_observer.static_data_sources.op_airdrop1_addresses_detailed_list",
        fqn: [
          "opensource_observer",
          "static_data_sources",
          "op_airdrop1_addresses_detailed_list",
        ],
        source_name: "static_data_sources",
        source_description: "",
        loader: "",
        identifier: "op_airdrop1_addresses_detailed_list",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {
          address: {
            name: "address",
            description: "",
            meta: {},
            data_type: "string",
            constraints: [],
            quote: null,
            tags: [],
          },
        },
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: true },
        patch_path: null,
        unrendered_config: {},
        relation_name:
          "`opensource-observer`.`static_data_sources`.`op_airdrop1_addresses_detailed_list`",
        created_at: 1719978676.4139433,
      },
    "source.opensource_observer.static_data_sources.op_airdrop2_addresses_detailed_list":
      {
        database: "opensource-observer",
        schema: "static_data_sources",
        name: "op_airdrop2_addresses_detailed_list",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/static_data_sources.yml",
        original_file_path: "warehouse/dbt/models/static_data_sources.yml",
        unique_id:
          "source.opensource_observer.static_data_sources.op_airdrop2_addresses_detailed_list",
        fqn: [
          "opensource_observer",
          "static_data_sources",
          "op_airdrop2_addresses_detailed_list",
        ],
        source_name: "static_data_sources",
        source_description: "",
        loader: "",
        identifier: "op_airdrop2_addresses_detailed_list",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {
          address: {
            name: "address",
            description: "",
            meta: {},
            data_type: "string",
            constraints: [],
            quote: null,
            tags: [],
          },
        },
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: true },
        patch_path: null,
        unrendered_config: {},
        relation_name:
          "`opensource-observer`.`static_data_sources`.`op_airdrop2_addresses_detailed_list`",
        created_at: 1719978676.414085,
      },
    "source.opensource_observer.static_data_sources.op_airdrop3_addresses_detailed_list":
      {
        database: "opensource-observer",
        schema: "static_data_sources",
        name: "op_airdrop3_addresses_detailed_list",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/static_data_sources.yml",
        original_file_path: "warehouse/dbt/models/static_data_sources.yml",
        unique_id:
          "source.opensource_observer.static_data_sources.op_airdrop3_addresses_detailed_list",
        fqn: [
          "opensource_observer",
          "static_data_sources",
          "op_airdrop3_addresses_detailed_list",
        ],
        source_name: "static_data_sources",
        source_description: "",
        loader: "",
        identifier: "op_airdrop3_addresses_detailed_list",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {
          address: {
            name: "address",
            description: "",
            meta: {},
            data_type: "string",
            constraints: [],
            quote: null,
            tags: [],
          },
        },
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: true },
        patch_path: null,
        unrendered_config: {},
        relation_name:
          "`opensource-observer`.`static_data_sources`.`op_airdrop3_addresses_detailed_list`",
        created_at: 1719978676.4142218,
      },
    "source.opensource_observer.static_data_sources.op_airdrop4_addresses_detailed_list":
      {
        database: "opensource-observer",
        schema: "static_data_sources",
        name: "op_airdrop4_addresses_detailed_list",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/static_data_sources.yml",
        original_file_path: "warehouse/dbt/models/static_data_sources.yml",
        unique_id:
          "source.opensource_observer.static_data_sources.op_airdrop4_addresses_detailed_list",
        fqn: [
          "opensource_observer",
          "static_data_sources",
          "op_airdrop4_addresses_detailed_list",
        ],
        source_name: "static_data_sources",
        source_description: "",
        loader: "",
        identifier: "op_airdrop4_addresses_detailed_list",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {
          address: {
            name: "address",
            description: "",
            meta: {},
            data_type: "string",
            constraints: [],
            quote: null,
            tags: [],
          },
        },
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: true },
        patch_path: null,
        unrendered_config: {},
        relation_name:
          "`opensource-observer`.`static_data_sources`.`op_airdrop4_addresses_detailed_list`",
        created_at: 1719978676.4143584,
      },
  },
  macros: {
    "macro.opensource_observer.urlsafe_base64": {
      name: "urlsafe_base64",
      resource_type: "macro",
      package_name: "opensource_observer",
      path: "warehouse/dbt/macros/urlsafe_base64.sql",
      original_file_path: "warehouse/dbt/macros/urlsafe_base64.sql",
      unique_id: "macro.opensource_observer.urlsafe_base64",
      macro_sql:
        "{% macro urlsafe_base64(bytes_column) -%}\n    REPLACE(REPLACE(TO_BASE64({{ bytes_column }}), '+', '-'), '/', '_')\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3644276,
      supported_languages: null,
    },
    "macro.opensource_observer.current_playground": {
      name: "current_playground",
      resource_type: "macro",
      package_name: "opensource_observer",
      path: "warehouse/dbt/macros/current_playground.sql",
      original_file_path: "warehouse/dbt/macros/current_playground.sql",
      unique_id: "macro.opensource_observer.current_playground",
      macro_sql:
        "{%- macro current_playground() -%}\n{%- if target.name == 'production' -%}\nNONE\n{%- elif target.name == 'base_playground' -%}\nbase_playground\n{%- else -%}\nplayground\n{%- endif -%}\n{%- endmacro -%}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3650045,
      supported_languages: null,
    },
    "macro.opensource_observer.playground_filter": {
      name: "playground_filter",
      resource_type: "macro",
      package_name: "opensource_observer",
      path: "warehouse/dbt/macros/playground_filter.sql",
      original_file_path: "warehouse/dbt/macros/playground_filter.sql",
      unique_id: "macro.opensource_observer.playground_filter",
      macro_sql:
        "{%- macro playground_filter(time_column, is_start=True, interval_type=\"DAY\") -%}\n{%- if target.name in ['playground', 'dev'] -%}\n{% if is_start %}\n  where\n{% else %}\n  and\n{% endif %}\n{{ time_column }} > TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL {{ env_var('PLAYGROUND_DAYS', '90') }} {{ interval_type }})\n{%- else -%}\n{%- endif -%}\n{%- endmacro -%}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3659117,
      supported_languages: null,
    },
    "macro.opensource_observer.oso_artifact_id": {
      name: "oso_artifact_id",
      resource_type: "macro",
      package_name: "opensource_observer",
      path: "warehouse/dbt/macros/oso_artifact_id.sql",
      original_file_path: "warehouse/dbt/macros/oso_artifact_id.sql",
      unique_id: "macro.opensource_observer.oso_artifact_id",
      macro_sql:
        '{% macro oso_artifact_id(artifact_source, prefix, table_alias="") -%}\n    {%- set _prefix = prefix -%}\n    {%- if not prefix.endswith(\'_\') and prefix != "" %}\n        {%- set _prefix = prefix + \'_\' -%}\n    {% endif -%}\n    {%- if table_alias != "" %}\n        {%- set _prefix = "%s.%s" % (table_alias, _prefix) -%}\n    {% endif -%}\n    {%- set namespace = "%s%s" % (_prefix, \'namespace\') -%}\n    {%- set source_id = "%s%s" % (_prefix, \'source_id\') -%}\n    {{- oso_id(artifact_source, namespace, source_id) -}}\n{%- endmacro %}',
      depends_on: { macros: ["macro.opensource_observer.oso_id"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.367435,
      supported_languages: null,
    },
    "macro.opensource_observer.oso_id": {
      name: "oso_id",
      resource_type: "macro",
      package_name: "opensource_observer",
      path: "warehouse/dbt/macros/oso_id.sql",
      original_file_path: "warehouse/dbt/macros/oso_id.sql",
      unique_id: "macro.opensource_observer.oso_id",
      macro_sql:
        "{% macro oso_id() -%}\n    {%- set id_bytes = 'SHA256(CONCAT(' + ', '.join(varargs) + '))' -%}\n    {{- urlsafe_base64(id_bytes) -}}\n{%- endmacro %}",
      depends_on: { macros: ["macro.opensource_observer.urlsafe_base64"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.367912,
      supported_languages: null,
    },
    "macro.opensource_observer.oso_source": {
      name: "oso_source",
      resource_type: "macro",
      package_name: "opensource_observer",
      path: "warehouse/dbt/macros/oso_source.sql",
      original_file_path: "warehouse/dbt/macros/oso_source.sql",
      unique_id: "macro.opensource_observer.oso_source",
      macro_sql:
        '\n{%- macro oso_source(source_name, table_name) -%}\n  {%- if target.name in [\'playground\', \'dev\'] -%}\n    {{ source("playground", "%s_%s" % (source_name, table_name)) }}\n  {%- elif target.name == \'base_playground\' -%}\n    {{ source("base_playground", "%s_%s" % (source_name, table_name)) }}\n  {%- else -%} \n    {{ source(source_name, table_name) }}\n  {%- endif -%}\n{%- endmacro -%}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3689072,
      supported_languages: null,
    },
    "macro.opensource_observer.contract_invocation_events_with_l1": {
      name: "contract_invocation_events_with_l1",
      resource_type: "macro",
      package_name: "opensource_observer",
      path: "warehouse/dbt/macros/models/contract_invocation_events_with_l1.sql",
      original_file_path:
        "warehouse/dbt/macros/models/contract_invocation_events_with_l1.sql",
      unique_id: "macro.opensource_observer.contract_invocation_events_with_l1",
      macro_sql:
        "{% macro contract_invocation_events_with_l1(network_name, start) %}\n{% set lower_network_name = network_name.lower() %}\n{% set upper_network_name = network_name.upper() %}\n\nwith bridges as (\n  select distinct artifact_source_id\n  from {{ ref('int_artifacts_in_ossd_by_project') }}\n  where artifact_type = 'BRIDGE'\n),\n\ntransactions as (\n  select -- noqa: ST06\n    TIMESTAMP_TRUNC(block_timestamp, day) as `time`,\n    LOWER(to_address) as to_artifact_source_id,    \n    LOWER(from_address) as from_artifact_source_id,\n    receipt_status,\n    (receipt_gas_used * receipt_effective_gas_price) as l2_gas_fee\n  from {{ ref('int_%s_transactions' % lower_network_name) }}\n  where\n    block_timestamp >= {{ start }}\n    and (\n      input != \"0x\"\n      or LOWER(to_address) in (select * from bridges)\n    )\n),\n\ncontract_invocations as (\n  select\n    time,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    SUM(l2_gas_fee) as total_l2_gas_used,\n    COUNT(*) as total_count,\n    SUM(case when receipt_status = 1 then 1 else 0 end) as success_count\n  from transactions\n  where to_artifact_source_id not in (\n    select address\n    from {{ ref('int_safes') }}\n    where network = '{{ upper_network_name }}'\n  )\n  group by\n    time,\n    to_artifact_source_id,\n    from_artifact_source_id\n),\n\nunion_events as (\n  select \n    time,    \n    'CONTRACT_INVOCATION_DAILY_L2_GAS_USED' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    total_l2_gas_used as amount\n  from contract_invocations\n  union all\n  select \n    time,\n    'CONTRACT_INVOCATION_DAILY_COUNT' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    total_count as amount\n  from contract_invocations\n  union all\n  select \n    time,\n    'CONTRACT_INVOCATION_SUCCESS_DAILY_COUNT' as event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    success_count as amount\n  from contract_invocations\n),\n\nall_events as (\n  select\n    time,\n    event_type,\n    to_artifact_source_id,\n    from_artifact_source_id,\n    amount,\n    \"{{ upper_network_name }}\" as event_source,\n  from union_events\n)\nselect\n  time,\n  event_type,  \n  event_source,\n  {{ oso_id('event_source', 'to_artifact_source_id') }}\n    as to_artifact_id,\n  to_artifact_source_id as to_artifact_name,\n  \"{{ lower_network_name }}\" as to_artifact_namespace,\n  \"CONTRACT\" as to_artifact_type,\n  to_artifact_source_id,\n  {{ oso_id('event_source', 'from_artifact_source_id') }}\n    as from_artifact_id,\n  from_artifact_source_id as from_artifact_name,\n  \"{{ lower_network_name }}\" as from_artifact_namespace,\n  \"EOA\" as from_artifact_type,\n  from_artifact_source_id,\n  amount,\n  {{ oso_id('event_source', 'time', 'to_artifact_source_id', 'from_artifact_source_id') }} as event_source_id\nfrom all_events\n{% endmacro %}",
      depends_on: { macros: ["macro.opensource_observer.oso_id"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3714015,
      supported_languages: null,
    },
    "macro.opensource_observer.goog_blockchain_deployers": {
      name: "goog_blockchain_deployers",
      resource_type: "macro",
      package_name: "opensource_observer",
      path: "warehouse/dbt/macros/models/goog_blockchain_deployers.sql",
      original_file_path:
        "warehouse/dbt/macros/models/goog_blockchain_deployers.sql",
      unique_id: "macro.opensource_observer.goog_blockchain_deployers",
      macro_sql:
        '{% macro goog_blockchain_deployers(network_name) %}\n{% if target.name == \'production\' %}\nSELECT\n  block_timestamp AS block_timestamp,\n  transaction_hash AS transaction_hash,\n  from_address AS deployer_address,\n  contract_address AS contract_address\nFROM {{ oso_source(network_name, "receipts") }}\nWHERE\n  to_address IS null\n  AND `status` = 1\n  {% if is_incremental() %}\n  AND block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  {% endif %}\n\n{% else %}\nselect\n  *\nfrom {{ source("base_playground", "%s_deployers" % network_name) }}\n{% if is_incremental() %}\nwhere block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  {{ playground_filter("block_timestamp", is_start=False) }}\n{% else %}\n{{ playground_filter("block_timestamp") }}\n{% endif %}\n\n{% endif %}\n\n{% endmacro %}',
      depends_on: {
        macros: [
          "macro.opensource_observer.oso_source",
          "macro.dbt.is_incremental",
          "macro.opensource_observer.playground_filter",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.372744,
      supported_languages: null,
    },
    "macro.opensource_observer.generate_range": {
      name: "generate_range",
      resource_type: "macro",
      package_name: "opensource_observer",
      path: "warehouse/dbt/macros/models/combine_op_airdrops.sql",
      original_file_path: "warehouse/dbt/macros/models/combine_op_airdrops.sql",
      unique_id: "macro.opensource_observer.generate_range",
      macro_sql:
        "{% macro generate_range(start, end) %}\n  {% set range_list = [] %}\n  {% for i in range(start, end + 1) %}\n    {% do range_list.append(i) %}\n  {% endfor %}\n  {{ return(range_list) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3737433,
      supported_languages: null,
    },
    "macro.opensource_observer.combine_op_airdrops": {
      name: "combine_op_airdrops",
      resource_type: "macro",
      package_name: "opensource_observer",
      path: "warehouse/dbt/macros/models/combine_op_airdrops.sql",
      original_file_path: "warehouse/dbt/macros/models/combine_op_airdrops.sql",
      unique_id: "macro.opensource_observer.combine_op_airdrops",
      macro_sql:
        "{% macro combine_op_airdrops(suffixes) %}\n\n{% set queries = [] %}\n\n-- Loop through each suffix and generate the full table reference\n{% for suffix in suffixes %}\n    {% set table_name = 'op_airdrop' ~ suffix ~ '_addresses_detailed_list' %}\n    {% set query = \"select lower(cast(address as string)) as address, cast(op_amount_raw as numeric)/1e18 as op_amount, cast('\" ~ suffix ~ \"' as int) as airdrop_round from \" ~ source('static_data_sources', table_name) %}\n    {% do queries.append(query) %}\n{% endfor %}\n\n{# Join all queries with UNION ALL #}\n{{ return(queries | join(' UNION ALL\\n')) }}\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3746188,
      supported_languages: null,
    },
    "macro.opensource_observer.dune_contract_invocation": {
      name: "dune_contract_invocation",
      resource_type: "macro",
      package_name: "opensource_observer",
      path: "warehouse/dbt/macros/models/dune_contract_invocation.sql",
      original_file_path:
        "warehouse/dbt/macros/models/dune_contract_invocation.sql",
      unique_id: "macro.opensource_observer.dune_contract_invocation",
      macro_sql:
        '{% macro dune_contract_invocation(network_name) %}\n{%- set network_source = "%s_contract_usage" % (network_name) -%}\n{%- set network_namespace = network_name.upper() -%}\nSELECT \n  CAST(cu.date AS Timestamp) AS `time`,\n  TO_BASE64(\n    SHA1(\n      CONCAT(\n        CAST(cu.date AS STRING), \n        cu.address, \n        CASE \n          WHEN cu.user_address IS NULL THEN "" \n          ELSE cu.user_address\n        END,\n        CASE \n          WHEN cu.safe_address IS NULL THEN "" \n          ELSE cu.safe_address\n        END\n      ))\n  ) AS `source_id`,\n  cu.address AS `to_name`,\n  "{{ network_namespace }}" AS `to_namespace`,\n  "CONTRACT" AS `to_type`,\n  cu.address AS `to_source_id`,\n  \n  CASE\n    WHEN cu.safe_address IS NULL THEN cu.user_address\n    WHEN cu.user_address IS NULL THEN cu.safe_address\n    ELSE "unknown"\n  END AS `from_name`,\n\n  "{{ network_namespace }}" AS `from_namespace`,\n\n  CASE\n    WHEN cu.safe_address IS NULL THEN "EOA"\n    WHEN cu.user_address IS NULL THEN "SAFE"\n    ELSE "unknown"\n  END AS `from_type`,\n\n  CASE\n    WHEN cu.safe_address IS NULL THEN cu.user_address\n    WHEN cu.user_address IS NULL THEN cu.safe_address\n    ELSE "unknown"\n  END AS `from_source_id`,\n\n  CAST(cu.l1_gas AS FLOAT64) AS `l1_gas`,\n  CAST(cu.l2_gas AS FLOAT64) AS `l2_gas`,\n  CAST(cu.tx_count AS FLOAT64) AS `tx_count`\n\nFROM {{ oso_source(\'dune\', network_source) }} AS cu \n{% endmacro %}',
      depends_on: { macros: ["macro.opensource_observer.oso_source"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3756359,
      supported_languages: null,
    },
    "macro.opensource_observer.transactions_with_receipts_deployers": {
      name: "transactions_with_receipts_deployers",
      resource_type: "macro",
      package_name: "opensource_observer",
      path: "warehouse/dbt/macros/models/transactions_with_receipts_deployers.sql",
      original_file_path:
        "warehouse/dbt/macros/models/transactions_with_receipts_deployers.sql",
      unique_id:
        "macro.opensource_observer.transactions_with_receipts_deployers",
      macro_sql:
        '{% macro transactions_with_receipts_deployers(network_name) %}\n\n{% if target.name == \'production\' %}\nSELECT\n  block_timestamp AS block_timestamp,\n  `hash` AS transaction_hash,\n  from_address AS deployer_address,\n  receipt_contract_address AS contract_address\nFROM {{ source(network_name, "transactions") }}\nWHERE\n  to_address IS null\n  AND `receipt_status` = 1\n  {% if is_incremental() %}\n  AND block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  {% else %}\n  {{ playground_filter("block_timestamp", is_start=False) }}\n  {% endif %}\n{% else %}\nselect \n  *\nfrom {{ source("base_playground", "%s_deployers" % network_name) }}\n{% if is_incremental() %}\nwhere block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  {{ playground_filter("block_timestamp", is_start=False) }}\n{% else %}\n{{ playground_filter("block_timestamp") }}\n{% endif %}\n\n{% endif %}\n{% endmacro %}',
      depends_on: {
        macros: [
          "macro.dbt.is_incremental",
          "macro.opensource_observer.playground_filter",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.377051,
      supported_languages: null,
    },
    "macro.opensource_observer.factory_deployments": {
      name: "factory_deployments",
      resource_type: "macro",
      package_name: "opensource_observer",
      path: "warehouse/dbt/macros/models/factory_deployments.sql",
      original_file_path: "warehouse/dbt/macros/models/factory_deployments.sql",
      unique_id: "macro.opensource_observer.factory_deployments",
      macro_sql:
        '{% macro factory_deployments(\n    network_name, \n    traces="traces", \n    transactions_source=None, \n    transactions_table_transaction_hash_column="hash", \n    traces_table_transaction_hash_column="transaction_hash", \n    block_timestamp_column="block_timestamp") \n%}\n\n{% if not transactions_source %}\n{% set transactions_source = source(network_name, "transactions") %}\n{% endif %}\n{% set transactions_table_hash_value = "`txs`.`%s`" % (\n    transactions_table_transaction_hash_column,\n  )\n%}\n{% set traces_table_hash_value = "`traces`.`%s`" % (\n    traces_table_transaction_hash_column,\n  )\n%}\n{% set aliased_block_timestamp_column = "`traces`.%s" % (\n    block_timestamp_column,\n  )\n%}\n\nWITH transactions AS (\n  SELECT *\n  FROM {{ transactions_source }}\n  {% if is_incremental() %}\n  WHERE {{ block_timestamp_column }} > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n  {% else %}\n  {{ playground_filter(block_timestamp_column, is_start=True) }}\n  {% endif %}\n)\n\nselect \n  traces.block_timestamp, \n  traces.transaction_hash, \n  {# this is the eoa that triggered the request #}\n  txs.from_address as originating_address, \n  {# \n    It is possible for originating_contract and factory address to be the same.\n    In the case of something like a safe, the originating_contract would be the\n    safe.\n  #}\n  txs.to_address as originating_contract,\n  traces.from_address as factory_address, \n  traces.to_address as contract_address\nfrom {{ source(network_name, traces) }} as traces\ninner join transactions as txs\n  on {{ transactions_table_hash_value }} = {{ traces_table_hash_value }}\nwhere\n  LOWER(traces.from_address) != "0x3fab184622dc19b6109349b94811493bf2a45362"\n  and LOWER(trace_type) in ("create", "create2")\n  and status = 1\n{% if is_incremental() %}\n  and {{ aliased_block_timestamp_column }} > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n{% else %}\n{{ playground_filter(aliased_block_timestamp_column, is_start=False) }}\n{% endif %}\n\n{% endmacro %}',
      depends_on: {
        macros: [
          "macro.dbt.is_incremental",
          "macro.opensource_observer.playground_filter",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.379364,
      supported_languages: null,
    },
    "macro.opensource_observer.known_proxies": {
      name: "known_proxies",
      resource_type: "macro",
      package_name: "opensource_observer",
      path: "warehouse/dbt/macros/models/known_proxies.sql",
      original_file_path: "warehouse/dbt/macros/models/known_proxies.sql",
      unique_id: "macro.opensource_observer.known_proxies",
      macro_sql:
        "{% macro known_proxies(network_name, start, traces=\"traces\") %}\n\n{# \n  \n  This model is used to help identify smart contract accounts by looking for transactions that interact with the most widespread proxy contracts.\n  \n#}\n\nwith proxy_contracts as (\n  select * \n    from UNNEST([ STRUCT\n    (\n      'SAFE' as proxy_type,\n      '1.4.1' as `version`,\n      LOWER('0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67') as factory_address\n    ),\n    ( \n      'SAFE',\n      '1.3.0',\n      LOWER('0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC')\n    ), \n    (\n      'SAFE',\n      '1.1.1',\n      LOWER('0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B')\n    ),\n    (\n      'SAFE',\n      '1.0.0',\n      LOWER('0x12302fE9c02ff50939BaAaaf415fc226C078613C')\n    ),  \n    (\n      'ENTRYPOINT',\n      '0.0.7',\n      LOWER('0x0000000071727De22E5E9d8BAf0edAc6f37da032')\n    ),\n    (\n      'ENTRYPOINT',\n      '0.0.6',\n      LOWER('0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789')\n    )\n  ])\n  \n),\nproxy_txns as (\n  select \n    traces.id,\n    traces.block_timestamp, \n    traces.transaction_hash,     \n    traces.from_address,\n    traces.to_address,\n    proxies.proxy_type,\n    case\n      when lower(traces.from_address) = lower(proxies.factory_address)\n      then traces.from_address\n      when lower(traces.to_address) = lower(proxies.factory_address)\n      then traces.to_address\n      else null\n    end as proxy_address\n  from {{ source(network_name, traces) }} as traces\n  inner join proxy_contracts as proxies\n    on lower(traces.from_address) = lower(proxies.factory_address)\n    or lower(traces.to_address) = lower(proxies.factory_address)\n  where\n    traces.block_timestamp >= {{ start }}    \n    and traces.status = 1\n    and traces.trace_type = 'call'\n    and traces.call_type != 'staticcall'\n    and traces.from_address != traces.to_address\n)\nselect\n  id,\n  block_timestamp,\n  transaction_hash,\n  proxy_type,\n  proxy_address,\n  from_address,\n  to_address\nfrom proxy_txns\nwhere proxy_address is not null\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3801813,
      supported_languages: null,
    },
    "macro.opensource_observer.filtered_blockchain_events": {
      name: "filtered_blockchain_events",
      resource_type: "macro",
      package_name: "opensource_observer",
      path: "warehouse/dbt/macros/models/filtered_blockchain_events.sql",
      original_file_path:
        "warehouse/dbt/macros/models/filtered_blockchain_events.sql",
      unique_id: "macro.opensource_observer.filtered_blockchain_events",
      macro_sql:
        '{% macro filtered_blockchain_events(artifact_source, source_name, source_table) %}\nwith known_addresses as (\n  select distinct `artifact_source_id` as `address`\n  from {{ ref("int_all_artifacts") }} \n  where UPPER(artifact_source) in (UPPER(\'{{ artifact_source }}\'), \'ANY_EVM\')\n), known_to as (\nselect events.* \nfrom {{ oso_source(source_name, source_table)}} as events\ninner join known_addresses known\n  on known.address = events.to_address\n  {% if is_incremental() %}\n    {# \n      We are using insert_overwrite so this will consistently select everything\n      that would go into the latest partition (and any new partitions after\n      that). It will overwrite any data in the partitions for which this select\n      statement matches\n    #}\n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    {{ playground_filter("block_timestamp", is_start=False) }}\n  {% else %}\n  {{ playground_filter("block_timestamp") }}\n  {% endif %}\n), known_from as (\n  select events.* \n  from {{ oso_source(source_name, source_table)}} as events\n  inner join known_addresses known\n    on known.address = events.from_address\n  {% if is_incremental() %}\n  where block_timestamp > TIMESTAMP_SUB(_dbt_max_partition, INTERVAL 1 DAY)\n    {{ playground_filter("block_timestamp", is_start=False) }}\n  {% else %}\n  {{ playground_filter("block_timestamp") }}\n  {% endif %}\n), txs_with_dupes as (\n  select * from known_to\n  union all\n  select * from known_from\n)\nselect\n  *\nfrom txs_with_dupes\nqualify\n  ROW_NUMBER() OVER (PARTITION BY `id` ORDER BY block_timestamp ASC) = 1\n{% endmacro %}',
      depends_on: {
        macros: [
          "macro.opensource_observer.oso_source",
          "macro.dbt.is_incremental",
          "macro.opensource_observer.playground_filter",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.381731,
      supported_languages: null,
    },
    "macro.dbt_bigquery.date_sharded_table": {
      name: "date_sharded_table",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/etc.sql",
      original_file_path: "macros/etc.sql",
      unique_id: "macro.dbt_bigquery.date_sharded_table",
      macro_sql:
        '{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ "[DBT__PARTITION_DATE]") }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3822145,
      supported_languages: null,
    },
    "macro.dbt_bigquery.grant_access_to": {
      name: "grant_access_to",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/etc.sql",
      original_file_path: "macros/etc.sql",
      unique_id: "macro.dbt_bigquery.grant_access_to",
      macro_sql:
        "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.382565,
      supported_languages: null,
    },
    "macro.dbt_bigquery.get_partitions_metadata": {
      name: "get_partitions_metadata",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/etc.sql",
      original_file_path: "macros/etc.sql",
      unique_id: "macro.dbt_bigquery.get_partitions_metadata",
      macro_sql:
        "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3830082,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__create_table_as": {
      name: "bigquery__create_table_as",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/adapters.sql",
      original_file_path: "macros/adapters.sql",
      unique_id: "macro.dbt_bigquery.bigquery__create_table_as",
      macro_sql:
        "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n",
      depends_on: {
        macros: [
          "macro.dbt_bigquery.get_columns_with_types_in_query_sql",
          "macro.dbt_bigquery.columns_without_partition_fields_csv",
          "macro.dbt.get_assert_columns_equivalent",
          "macro.dbt.get_table_columns_and_constraints",
          "macro.dbt.get_select_subquery",
          "macro.dbt_bigquery.partition_by",
          "macro.dbt_bigquery.cluster_by",
          "macro.dbt_bigquery.bigquery_table_options",
          "macro.dbt.should_full_refresh",
          "macro.dbt_bigquery.py_write_table",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3894885,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__create_view_as": {
      name: "bigquery__create_view_as",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/adapters.sql",
      original_file_path: "macros/adapters.sql",
      unique_id: "macro.dbt_bigquery.bigquery__create_view_as",
      macro_sql:
        "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt_bigquery.bigquery_view_options",
          "macro.dbt.get_assert_columns_equivalent",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.390297,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__drop_schema": {
      name: "bigquery__drop_schema",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/adapters.sql",
      original_file_path: "macros/adapters.sql",
      unique_id: "macro.dbt_bigquery.bigquery__drop_schema",
      macro_sql:
        "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.390528,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__get_columns_in_relation": {
      name: "bigquery__get_columns_in_relation",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/adapters.sql",
      original_file_path: "macros/adapters.sql",
      unique_id: "macro.dbt_bigquery.bigquery__get_columns_in_relation",
      macro_sql:
        "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3907921,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__list_relations_without_caching": {
      name: "bigquery__list_relations_without_caching",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/adapters.sql",
      original_file_path: "macros/adapters.sql",
      unique_id: "macro.dbt_bigquery.bigquery__list_relations_without_caching",
      macro_sql:
        "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3910344,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__list_schemas": {
      name: "bigquery__list_schemas",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/adapters.sql",
      original_file_path: "macros/adapters.sql",
      unique_id: "macro.dbt_bigquery.bigquery__list_schemas",
      macro_sql:
        "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.391305,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__check_schema_exists": {
      name: "bigquery__check_schema_exists",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/adapters.sql",
      original_file_path: "macros/adapters.sql",
      unique_id: "macro.dbt_bigquery.bigquery__check_schema_exists",
      macro_sql:
        "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3916044,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__persist_docs": {
      name: "bigquery__persist_docs",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/adapters.sql",
      original_file_path: "macros/adapters.sql",
      unique_id: "macro.dbt_bigquery.bigquery__persist_docs",
      macro_sql:
        "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.alter_column_comment"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3921237,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__alter_column_comment": {
      name: "bigquery__alter_column_comment",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/adapters.sql",
      original_file_path: "macros/adapters.sql",
      unique_id: "macro.dbt_bigquery.bigquery__alter_column_comment",
      macro_sql:
        "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3924007,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {
      name: "bigquery__alter_relation_add_columns",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/adapters.sql",
      original_file_path: "macros/adapters.sql",
      unique_id: "macro.dbt_bigquery.bigquery__alter_relation_add_columns",
      macro_sql:
        "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.run_query"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3930962,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {
      name: "bigquery__alter_relation_drop_columns",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/adapters.sql",
      original_file_path: "macros/adapters.sql",
      unique_id: "macro.dbt_bigquery.bigquery__alter_relation_drop_columns",
      macro_sql:
        "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.run_query"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3937333,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__alter_column_type": {
      name: "bigquery__alter_column_type",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/adapters.sql",
      original_file_path: "macros/adapters.sql",
      unique_id: "macro.dbt_bigquery.bigquery__alter_column_type",
      macro_sql:
        "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.get_columns_in_relation",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.394985,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__test_unique": {
      name: "bigquery__test_unique",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/adapters.sql",
      original_file_path: "macros/adapters.sql",
      unique_id: "macro.dbt_bigquery.bigquery__test_unique",
      macro_sql:
        "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.395305,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__upload_file": {
      name: "bigquery__upload_file",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/adapters.sql",
      original_file_path: "macros/adapters.sql",
      unique_id: "macro.dbt_bigquery.bigquery__upload_file",
      macro_sql:
        '{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log("kwargs: " ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3957763,
      supported_languages: null,
    },
    "macro.dbt_bigquery.partition_by": {
      name: "partition_by",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/relations/partition.sql",
      original_file_path: "macros/relations/partition.sql",
      unique_id: "macro.dbt_bigquery.partition_by",
      macro_sql:
        "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3971343,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery_options": {
      name: "bigquery_options",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/relations/options.sql",
      original_file_path: "macros/relations/options.sql",
      unique_id: "macro.dbt_bigquery.bigquery_options",
      macro_sql:
        '{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ "," if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.397878,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__drop_relation": {
      name: "bigquery__drop_relation",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/relations/drop.sql",
      original_file_path: "macros/relations/drop.sql",
      unique_id: "macro.dbt_bigquery.bigquery__drop_relation",
      macro_sql:
        "{% macro bigquery__drop_relation(relation) -%}\n    {% do adapter.drop_relation(relation) %}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3981783,
      supported_languages: null,
    },
    "macro.dbt_bigquery.cluster_by": {
      name: "cluster_by",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/relations/cluster.sql",
      original_file_path: "macros/relations/cluster.sql",
      unique_id: "macro.dbt_bigquery.cluster_by",
      macro_sql:
        "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3989785,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__rename_relation": {
      name: "bigquery__rename_relation",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/relations/rename.sql",
      original_file_path: "macros/relations/rename.sql",
      unique_id: "macro.dbt_bigquery.bigquery__rename_relation",
      macro_sql:
        "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.399335,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery_table_options": {
      name: "bigquery_table_options",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/relations/table/options.sql",
      original_file_path: "macros/relations/table/options.sql",
      unique_id: "macro.dbt_bigquery.bigquery_table_options",
      macro_sql:
        "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery_options"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.3998206,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__drop_table": {
      name: "bigquery__drop_table",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/relations/table/drop.sql",
      original_file_path: "macros/relations/table/drop.sql",
      unique_id: "macro.dbt_bigquery.bigquery__drop_table",
      macro_sql:
        "{% macro bigquery__drop_table(relation) %}\n    drop table if exists {{ relation }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4000561,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__get_rename_table_sql": {
      name: "bigquery__get_rename_table_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/relations/table/rename.sql",
      original_file_path: "macros/relations/table/rename.sql",
      unique_id: "macro.dbt_bigquery.bigquery__get_rename_table_sql",
      macro_sql:
        "{%- macro bigquery__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4003377,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__drop_materialized_view": {
      name: "bigquery__drop_materialized_view",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/relations/materialized_view/drop.sql",
      original_file_path: "macros/relations/materialized_view/drop.sql",
      unique_id: "macro.dbt_bigquery.bigquery__drop_materialized_view",
      macro_sql:
        "{% macro bigquery__drop_materialized_view(relation) %}\n    drop materialized view if exists {{ relation }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4005659,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql": {
      name: "bigquery__get_alter_materialized_view_as_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/relations/materialized_view/alter.sql",
      original_file_path: "macros/relations/materialized_view/alter.sql",
      unique_id:
        "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql",
      macro_sql:
        "{% macro bigquery__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n    {% else %}\n\n        alter materialized view {{ relation }}\n            set {{ bigquery_options(configuration_changes.options.context.as_ddl_dict()) }}\n\n    {%- endif %}\n\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.get_replace_sql",
          "macro.dbt_bigquery.bigquery_options",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4014885,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes":
      {
        name: "bigquery__get_materialized_view_configuration_changes",
        resource_type: "macro",
        package_name: "dbt_bigquery",
        path: "macros/relations/materialized_view/alter.sql",
        original_file_path: "macros/relations/materialized_view/alter.sql",
        unique_id:
          "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes",
        macro_sql:
          "{% macro bigquery__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = adapter.describe_relation(existing_relation) %}\n    {% set _configuration_changes = existing_relation.materialized_view_config_changeset(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}",
        depends_on: { macros: [] },
        description: "",
        meta: {},
        docs: { show: true, node_color: null },
        patch_path: null,
        arguments: [],
        created_at: 1719978674.401994,
        supported_languages: null,
      },
    "macro.dbt_bigquery.bigquery__refresh_materialized_view": {
      name: "bigquery__refresh_materialized_view",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/relations/materialized_view/refresh.sql",
      original_file_path: "macros/relations/materialized_view/refresh.sql",
      unique_id: "macro.dbt_bigquery.bigquery__refresh_materialized_view",
      macro_sql:
        "{% macro bigquery__refresh_materialized_view(relation) %}\n    call bq.refresh_materialized_view('{{ relation.database }}.{{ relation.schema }}.{{ relation.identifier }}')\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4023561,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql": {
      name: "bigquery__get_replace_materialized_view_as_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/relations/materialized_view/replace.sql",
      original_file_path: "macros/relations/materialized_view/replace.sql",
      unique_id:
        "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql",
      macro_sql:
        "{% macro bigquery__get_replace_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create or replace materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt_bigquery.partition_by",
          "macro.dbt_bigquery.cluster_by",
          "macro.dbt_bigquery.bigquery_options",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4033892,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql": {
      name: "bigquery__get_create_materialized_view_as_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/relations/materialized_view/create.sql",
      original_file_path: "macros/relations/materialized_view/create.sql",
      unique_id:
        "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql",
      macro_sql:
        "{% macro bigquery__get_create_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt_bigquery.partition_by",
          "macro.dbt_bigquery.cluster_by",
          "macro.dbt_bigquery.bigquery_options",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4043858,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery_view_options": {
      name: "bigquery_view_options",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/relations/view/options.sql",
      original_file_path: "macros/relations/view/options.sql",
      unique_id: "macro.dbt_bigquery.bigquery_view_options",
      macro_sql:
        "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery_options"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4048314,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__drop_view": {
      name: "bigquery__drop_view",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/relations/view/drop.sql",
      original_file_path: "macros/relations/view/drop.sql",
      unique_id: "macro.dbt_bigquery.bigquery__drop_view",
      macro_sql:
        "{% macro bigquery__drop_view(relation) %}\n    drop view if exists {{ relation }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4050598,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__create_or_replace_view": {
      name: "bigquery__create_or_replace_view",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/relations/view/replace.sql",
      original_file_path: "macros/relations/view/replace.sql",
      unique_id: "macro.dbt_bigquery.bigquery__create_or_replace_view",
      macro_sql:
        "{% macro bigquery__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.run_hooks",
          "macro.dbt_bigquery.handle_existing_table",
          "macro.dbt.should_full_refresh",
          "macro.dbt.statement",
          "macro.dbt.get_create_view_as_sql",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4077404,
      supported_languages: null,
    },
    "macro.dbt_bigquery.handle_existing_table": {
      name: "handle_existing_table",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/relations/view/replace.sql",
      original_file_path: "macros/relations/view/replace.sql",
      unique_id: "macro.dbt_bigquery.handle_existing_table",
      macro_sql:
        "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__handle_existing_table"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4080818,
      supported_languages: null,
    },
    "macro.dbt_bigquery.default__handle_existing_table": {
      name: "default__handle_existing_table",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/relations/view/replace.sql",
      original_file_path: "macros/relations/view/replace.sql",
      unique_id: "macro.dbt_bigquery.default__handle_existing_table",
      macro_sql:
        '{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log("Dropping relation " ~ old_relation ~ " because it is of type " ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4085066,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__get_rename_view_sql": {
      name: "bigquery__get_rename_view_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/relations/view/rename.sql",
      original_file_path: "macros/relations/view/rename.sql",
      unique_id: "macro.dbt_bigquery.bigquery__get_rename_view_sql",
      macro_sql:
        "{%- macro bigquery__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4088051,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__get_show_grant_sql": {
      name: "bigquery__get_show_grant_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id: "macro.dbt_bigquery.bigquery__get_show_grant_sql",
      macro_sql:
        '{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema("OBJECT_PRIVILEGES") }}\n    where object_schema = "{{ relation.dataset }}"\n      and object_name = "{{ relation.identifier }}"\n      -- filter out current user\n      and split(grantee, \':\')[offset(1)] != session_user()\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.409789,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__get_grant_sql": {
      name: "bigquery__get_grant_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id: "macro.dbt_bigquery.bigquery__get_grant_sql",
      macro_sql:
        "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4102116,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__get_revoke_sql": {
      name: "bigquery__get_revoke_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id: "macro.dbt_bigquery.bigquery__get_revoke_sql",
      macro_sql:
        "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4106152,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__get_empty_subquery_sql": {
      name: "bigquery__get_empty_subquery_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/adapters/columns.sql",
      original_file_path: "macros/adapters/columns.sql",
      unique_id: "macro.dbt_bigquery.bigquery__get_empty_subquery_sql",
      macro_sql:
        "{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.411136,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__handle_existing_table": {
      name: "bigquery__handle_existing_table",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/view.sql",
      original_file_path: "macros/materializations/view.sql",
      unique_id: "macro.dbt_bigquery.bigquery__handle_existing_table",
      macro_sql:
        "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.412036,
      supported_languages: null,
    },
    "macro.dbt_bigquery.materialization_view_bigquery": {
      name: "materialization_view_bigquery",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/view.sql",
      original_file_path: "macros/materializations/view.sql",
      unique_id: "macro.dbt_bigquery.materialization_view_bigquery",
      macro_sql:
        "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = bigquery__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}",
      depends_on: {
        macros: [
          "macro.dbt_bigquery.bigquery__create_or_replace_view",
          "macro.dbt.persist_docs",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4132862,
      supported_languages: ["sql"],
    },
    "macro.dbt_bigquery.materialization_table_bigquery": {
      name: "materialization_table_bigquery",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/table.sql",
      original_file_path: "macros/materializations/table.sql",
      unique_id: "macro.dbt_bigquery.materialization_table_bigquery",
      macro_sql:
        "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      depends_on: {
        macros: [
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4195733,
      supported_languages: ["sql", "python"],
    },
    "macro.dbt_bigquery.py_write_table": {
      name: "py_write_table",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/table.sql",
      original_file_path: "macros/materializations/table.sql",
      unique_id: "macro.dbt_bigquery.py_write_table",
      macro_sql:
        '{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n{%- set raw_partition_by = config.get(\'partition_by\', none) -%}\n{%- set raw_cluster_by = config.get(\'cluster_by\', none) -%}\n{%- set enable_list_inference = config.get(\'enable_list_inference\', true) -%}\n{%- set intermediate_format = config.get(\'intermediate_format\', none) -%}\n\n{%- set partition_config = adapter.parse_partition_by(raw_partition_by) %}\n\nspark = SparkSession.builder.appName(\'smallTest\').getOrCreate()\n\nspark.conf.set("viewsEnabled","true")\nspark.conf.set("temporaryGcsBucket","{{target.gcs_bucket}}")\nspark.conf.set("enableListInference", "{{ enable_list_inference }}")\n{% if intermediate_format %}\nspark.conf.set("intermediateFormat", "{{ intermediate_format }}")\n{% endif %}\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format("bigquery").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f"{type(df)} is not a supported type for dbt Python materialization"\n  raise Exception(msg)\n\ndf.write \\\n  .mode("overwrite") \\\n  .format("bigquery") \\\n  .option("writeMethod", "indirect").option("writeDisposition", \'WRITE_TRUNCATE\') \\\n  {%- if partition_config is not none %}\n  {%- if partition_config.data_type | lower in (\'date\',\'timestamp\',\'datetime\') %}\n  .option("partitionField", "{{- partition_config.field -}}") \\\n  {%- if partition_config.granularity is not none %}\n  .option("partitionType", "{{- partition_config.granularity| upper -}}") \\\n  {%- endif %}\n  {%- endif %}\n  {%- endif %}\n  {%- if raw_cluster_by is not none %}\n  .option("clusteredFields", "{{- raw_cluster_by | join(\',\') -}}") \\\n  {%- endif %}\n  .save("{{target_relation}}")\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4215424,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {
      name: "bigquery__snapshot_hash_arguments",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/snapshot.sql",
      original_file_path: "macros/materializations/snapshot.sql",
      unique_id: "macro.dbt_bigquery.bigquery__snapshot_hash_arguments",
      macro_sql:
        "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4221933,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__create_columns": {
      name: "bigquery__create_columns",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/snapshot.sql",
      original_file_path: "macros/materializations/snapshot.sql",
      unique_id: "macro.dbt_bigquery.bigquery__create_columns",
      macro_sql:
        "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.42246,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__post_snapshot": {
      name: "bigquery__post_snapshot",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/snapshot.sql",
      original_file_path: "macros/materializations/snapshot.sql",
      unique_id: "macro.dbt_bigquery.bigquery__post_snapshot",
      macro_sql:
        "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.drop_relation"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4226847,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__create_csv_table": {
      name: "bigquery__create_csv_table",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/seed.sql",
      original_file_path: "macros/materializations/seed.sql",
      unique_id: "macro.dbt_bigquery.bigquery__create_csv_table",
      macro_sql:
        "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4232657,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__reset_csv_table": {
      name: "bigquery__reset_csv_table",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/seed.sql",
      original_file_path: "macros/materializations/seed.sql",
      unique_id: "macro.dbt_bigquery.bigquery__reset_csv_table",
      macro_sql:
        "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.42355,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__load_csv_rows": {
      name: "bigquery__load_csv_rows",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/seed.sql",
      original_file_path: "macros/materializations/seed.sql",
      unique_id: "macro.dbt_bigquery.bigquery__load_csv_rows",
      macro_sql:
        "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.statement",
          "macro.dbt_bigquery.bigquery_table_options",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4248102,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__can_clone_table": {
      name: "bigquery__can_clone_table",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/clone.sql",
      original_file_path: "macros/materializations/clone.sql",
      unique_id: "macro.dbt_bigquery.bigquery__can_clone_table",
      macro_sql:
        "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4251451,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__create_or_replace_clone": {
      name: "bigquery__create_or_replace_clone",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/clone.sql",
      original_file_path: "macros/materializations/clone.sql",
      unique_id: "macro.dbt_bigquery.bigquery__create_or_replace_clone",
      macro_sql:
        "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4253836,
      supported_languages: null,
    },
    "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {
      name: "dbt_bigquery_validate_get_incremental_strategy",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/incremental.sql",
      original_file_path: "macros/materializations/incremental.sql",
      unique_id:
        "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy",
      macro_sql:
        "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4284956,
      supported_languages: null,
    },
    "macro.dbt_bigquery.source_sql_with_partition": {
      name: "source_sql_with_partition",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/incremental.sql",
      original_file_path: "macros/materializations/incremental.sql",
      unique_id: "macro.dbt_bigquery.source_sql_with_partition",
      macro_sql:
        "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.428974,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bq_create_table_as": {
      name: "bq_create_table_as",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/incremental.sql",
      original_file_path: "macros/materializations/incremental.sql",
      unique_id: "macro.dbt_bigquery.bq_create_table_as",
      macro_sql:
        "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt_bigquery.declare_dbt_max_partition",
          "macro.dbt.run_query",
          "macro.dbt.create_table_as",
          "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4301927,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bq_generate_incremental_build_sql": {
      name: "bq_generate_incremental_build_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/incremental.sql",
      original_file_path: "macros/materializations/incremental.sql",
      unique_id: "macro.dbt_bigquery.bq_generate_incremental_build_sql",
      macro_sql:
        "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql",
          "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4312422,
      supported_languages: null,
    },
    "macro.dbt_bigquery.materialization_incremental_bigquery": {
      name: "materialization_incremental_bigquery",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/incremental.sql",
      original_file_path: "macros/materializations/incremental.sql",
      unique_id: "macro.dbt_bigquery.materialization_incremental_bigquery",
      macro_sql:
        "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
      depends_on: {
        macros: [
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt_bigquery.bq_create_table_as",
          "macro.dbt.process_schema_changes",
          "macro.dbt_bigquery.bq_generate_incremental_build_sql",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4379199,
      supported_languages: ["sql", "python"],
    },
    "macro.dbt_bigquery.materialization_copy_bigquery": {
      name: "materialization_copy_bigquery",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/copy.sql",
      original_file_path: "macros/materializations/copy.sql",
      unique_id: "macro.dbt_bigquery.materialization_copy_bigquery",
      macro_sql:
        "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(ref_table.get('package'), ref_table.name, version=ref_table.get('version'))) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}",
      depends_on: { macros: ["macro.dbt.run_hooks", "macro.dbt.apply_grants"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4400852,
      supported_languages: ["sql"],
    },
    "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {
      name: "bq_generate_incremental_merge_build_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/incremental_strategy/merge.sql",
      original_file_path:
        "macros/materializations/incremental_strategy/merge.sql",
      unique_id: "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql",
      macro_sql:
        "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set avoid_require_partition_filter = predicate_for_avoid_require_partition_filter() -%}\n    {%- if avoid_require_partition_filter is not none -%}\n        {% do predicates.append(avoid_require_partition_filter) %}\n    {%- endif -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql",
          "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter",
          "macro.dbt.get_merge_sql",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.442191,
      supported_languages: null,
    },
    "macro.dbt_bigquery.declare_dbt_max_partition": {
      name: "declare_dbt_max_partition",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/incremental_strategy/common.sql",
      original_file_path:
        "macros/materializations/incremental_strategy/common.sql",
      unique_id: "macro.dbt_bigquery.declare_dbt_max_partition",
      macro_sql:
        "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4434109,
      supported_languages: null,
    },
    "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter": {
      name: "predicate_for_avoid_require_partition_filter",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/incremental_strategy/common.sql",
      original_file_path:
        "macros/materializations/incremental_strategy/common.sql",
      unique_id:
        "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter",
      macro_sql:
        "{% macro predicate_for_avoid_require_partition_filter(target='DBT_INTERNAL_DEST') %}\n\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set predicate = none -%}\n\n    {% if partition_config and config.get('require_partition_filter') -%}\n        {%- set partition_field = partition_config.time_partitioning_field() if partition_config.time_ingestion_partitioning else partition_config.field -%}\n        {% set predicate %}\n            (\n                `{{ target }}`.`{{ partition_field }}` is null\n                or `{{ target }}`.`{{ partition_field }}` is not null\n            )\n        {% endset %}\n    {%- endif -%}\n\n    {{ return(predicate) }}\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.444421,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {
      name: "bq_generate_incremental_insert_overwrite_build_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/incremental_strategy/insert_overwrite.sql",
      original_file_path:
        "macros/materializations/incremental_strategy/insert_overwrite.sql",
      unique_id:
        "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql",
      macro_sql:
        "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bq_insert_overwrite_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4483871,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bq_copy_partitions": {
      name: "bq_copy_partitions",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/incremental_strategy/insert_overwrite.sql",
      original_file_path:
        "macros/materializations/incremental_strategy/insert_overwrite.sql",
      unique_id: "macro.dbt_bigquery.bq_copy_partitions",
      macro_sql:
        "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.data_type == 'int64' %}\n      {% set partition = partition | as_text %}\n    {% elif partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4504411,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bq_insert_overwrite_sql": {
      name: "bq_insert_overwrite_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/incremental_strategy/insert_overwrite.sql",
      original_file_path:
        "macros/materializations/incremental_strategy/insert_overwrite.sql",
      unique_id: "macro.dbt_bigquery.bq_insert_overwrite_sql",
      macro_sql:
        "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt_bigquery.bq_static_insert_overwrite_sql",
          "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.45136,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {
      name: "bq_static_insert_overwrite_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/incremental_strategy/insert_overwrite.sql",
      original_file_path:
        "macros/materializations/incremental_strategy/insert_overwrite.sql",
      unique_id: "macro.dbt_bigquery.bq_static_insert_overwrite_sql",
      macro_sql:
        "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif %}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql",
          "macro.dbt_bigquery.bq_copy_partitions",
          "macro.dbt.get_insert_overwrite_merge_sql",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4530692,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {
      name: "bq_dynamic_copy_partitions_insert_overwrite_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/incremental_strategy/insert_overwrite.sql",
      original_file_path:
        "macros/materializations/incremental_strategy/insert_overwrite.sql",
      unique_id:
        "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql",
      macro_sql:
        "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {%- if tmp_relation_exists is false -%}\n  {# We run temp table creation in a separated script to move to partitions copy if it doesn't already exist #}\n    {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n      {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n    }}\n    {%- endcall %}\n  {%- endif -%}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.statement",
          "macro.dbt_bigquery.bq_create_table_as",
          "macro.dbt.run_query",
          "macro.dbt_bigquery.bq_copy_partitions",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4542334,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {
      name: "bq_dynamic_insert_overwrite_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/incremental_strategy/insert_overwrite.sql",
      original_file_path:
        "macros/materializations/incremental_strategy/insert_overwrite.sql",
      unique_id: "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql",
      macro_sql:
        "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql",
          "macro.dbt_bigquery.bq_create_table_as",
          "macro.dbt.get_insert_overwrite_merge_sql",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4561474,
      supported_languages: null,
    },
    "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {
      name: "wrap_with_time_ingestion_partitioning_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/incremental_strategy/time_ingestion_tables.sql",
      original_file_path:
        "macros/materializations/incremental_strategy/time_ingestion_tables.sql",
      unique_id: "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql",
      macro_sql:
        "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4581218,
      supported_languages: null,
    },
    "macro.dbt_bigquery.get_quoted_with_types_csv": {
      name: "get_quoted_with_types_csv",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/incremental_strategy/time_ingestion_tables.sql",
      original_file_path:
        "macros/materializations/incremental_strategy/time_ingestion_tables.sql",
      unique_id: "macro.dbt_bigquery.get_quoted_with_types_csv",
      macro_sql:
        "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4588196,
      supported_languages: null,
    },
    "macro.dbt_bigquery.columns_without_partition_fields_csv": {
      name: "columns_without_partition_fields_csv",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/incremental_strategy/time_ingestion_tables.sql",
      original_file_path:
        "macros/materializations/incremental_strategy/time_ingestion_tables.sql",
      unique_id: "macro.dbt_bigquery.columns_without_partition_fields_csv",
      macro_sql:
        "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n",
      depends_on: { macros: ["macro.dbt_bigquery.get_quoted_with_types_csv"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4592822,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {
      name: "bq_insert_into_ingestion_time_partitioned_table_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/incremental_strategy/time_ingestion_tables.sql",
      original_file_path:
        "macros/materializations/incremental_strategy/time_ingestion_tables.sql",
      unique_id:
        "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql",
      macro_sql:
        "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n",
      depends_on: {
        macros: [
          "macro.dbt.get_quoted_csv",
          "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4603455,
      supported_languages: null,
    },
    "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {
      name: "get_columns_with_types_in_query_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/materializations/incremental_strategy/time_ingestion_tables.sql",
      original_file_path:
        "macros/materializations/incremental_strategy/time_ingestion_tables.sql",
      unique_id: "macro.dbt_bigquery.get_columns_with_types_in_query_sql",
      macro_sql:
        "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4609184,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__get_catalog_relations": {
      name: "bigquery__get_catalog_relations",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/catalog/by_relation.sql",
      original_file_path: "macros/catalog/by_relation.sql",
      unique_id: "macro.dbt_bigquery.bigquery__get_catalog_relations",
      macro_sql:
        "{% macro bigquery__get_catalog_relations(information_schema, relations) -%}\n\n    {%- if (relations | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards_stage as ({{ _bigquery__get_table_shards_sql(information_schema) }}),\n                table_shards as (\n                    select * from table_shards_stage\n                    where (\n                        {%- for relation in relations -%}\n                            (\n                                upper(table_schema) = upper('{{ relation.schema }}')\n                            and upper(table_name) = upper('{{ relation.identifier }}')\n                            )\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt_bigquery._bigquery__get_table_shards_sql",
          "macro.dbt_bigquery._bigquery__get_tables_sql",
          "macro.dbt_bigquery._bigquery__get_table_stats_sql",
          "macro.dbt_bigquery._bigquery__get_columns_sql",
          "macro.dbt_bigquery._bigquery__get_column_stats_sql",
          "macro.dbt_bigquery._bigquery__get_extended_catalog_sql",
          "macro.dbt.run_query",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4628606,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__get_catalog": {
      name: "bigquery__get_catalog",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/catalog/by_schema.sql",
      original_file_path: "macros/catalog/by_schema.sql",
      unique_id: "macro.dbt_bigquery.bigquery__get_catalog",
      macro_sql:
        "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n    {%- if (schemas | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards as (\n                    {{ _bigquery__get_table_shards_sql(information_schema) }}\n                    where (\n                        {%- for schema in schemas -%}\n                            upper(tables.dataset_id) = upper('{{ schema }}')\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt_bigquery._bigquery__get_table_shards_sql",
          "macro.dbt_bigquery._bigquery__get_tables_sql",
          "macro.dbt_bigquery._bigquery__get_table_stats_sql",
          "macro.dbt_bigquery._bigquery__get_columns_sql",
          "macro.dbt_bigquery._bigquery__get_column_stats_sql",
          "macro.dbt_bigquery._bigquery__get_extended_catalog_sql",
          "macro.dbt.run_query",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4646494,
      supported_languages: null,
    },
    "macro.dbt_bigquery._bigquery__get_table_shards_sql": {
      name: "_bigquery__get_table_shards_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/catalog/catalog.sql",
      original_file_path: "macros/catalog/catalog.sql",
      unique_id: "macro.dbt_bigquery._bigquery__get_table_shards_sql",
      macro_sql:
        "{% macro _bigquery__get_table_shards_sql(information_schema) %}\n    select\n        tables.project_id as table_catalog,\n        tables.dataset_id as table_schema,\n        coalesce(REGEXP_EXTRACT(tables.table_id, '^(.+)[0-9]{8}$'), tables.table_id) as table_name,\n        tables.table_id as shard_name,\n        REGEXP_EXTRACT(tables.table_id, '^.+([0-9]{8})$') as shard_index,\n        REGEXP_CONTAINS(tables.table_id, '^.+[0-9]{8}$') and tables.type = 1 as is_date_shard,\n        case\n            when materialized_views.table_name is not null then 'materialized view'\n            when tables.type = 1 then 'table'\n            when tables.type = 2 then 'view'\n            else 'external'\n        end as table_type,\n        tables.type = 1 as is_table,\n        JSON_VALUE(table_description.option_value) as table_comment,\n        tables.size_bytes,\n        tables.row_count\n    from {{ information_schema.replace(information_schema_view='__TABLES__') }} tables\n    left join {{ information_schema.replace(information_schema_view='MATERIALIZED_VIEWS') }} materialized_views\n        on materialized_views.table_catalog = tables.project_id\n        and materialized_views.table_schema = tables.dataset_id\n        and materialized_views.table_name = tables.table_id\n    left join {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }} table_description\n        on table_description.table_catalog = tables.project_id\n        and table_description.table_schema = tables.dataset_id\n        and table_description.table_name = tables.table_id\n        and table_description.option_name = 'description'\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.replace"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4681413,
      supported_languages: null,
    },
    "macro.dbt_bigquery._bigquery__get_tables_sql": {
      name: "_bigquery__get_tables_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/catalog/catalog.sql",
      original_file_path: "macros/catalog/catalog.sql",
      unique_id: "macro.dbt_bigquery._bigquery__get_tables_sql",
      macro_sql:
        "{% macro _bigquery__get_tables_sql() %}\n    select distinct\n        table_catalog,\n        table_schema,\n        table_name,\n        is_date_shard,\n        table_type,\n        is_table,\n        table_comment\n    from table_shards\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.468302,
      supported_languages: null,
    },
    "macro.dbt_bigquery._bigquery__get_table_stats_sql": {
      name: "_bigquery__get_table_stats_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/catalog/catalog.sql",
      original_file_path: "macros/catalog/catalog.sql",
      unique_id: "macro.dbt_bigquery._bigquery__get_table_stats_sql",
      macro_sql:
        "{% macro _bigquery__get_table_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        table_name,\n        max(shard_name) as latest_shard_name,\n        min(shard_index) as shard_min,\n        max(shard_index) as shard_max,\n        count(shard_index) as shard_count,\n        sum(size_bytes) as size_bytes,\n        sum(row_count) as row_count\n    from table_shards\n    group by 1, 2, 3\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4684663,
      supported_languages: null,
    },
    "macro.dbt_bigquery._bigquery__get_columns_sql": {
      name: "_bigquery__get_columns_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/catalog/catalog.sql",
      original_file_path: "macros/catalog/catalog.sql",
      unique_id: "macro.dbt_bigquery._bigquery__get_columns_sql",
      macro_sql:
        "{% macro _bigquery__get_columns_sql(information_schema) %}\n    select\n        columns.table_catalog,\n        columns.table_schema,\n        columns.table_name as shard_name,\n        coalesce(paths.field_path, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields\n        -- BQ does not treat these nested properties as independent fields\n        row_number() over (\n            partition by\n                columns.table_catalog,\n                columns.table_schema,\n                columns.table_name\n            order by\n                columns.ordinal_position,\n                paths.field_path\n        ) as column_index,\n        coalesce(paths.data_type, '<unknown>') as column_type,\n        paths.description as column_comment,\n        case when columns.is_partitioning_column = 'YES' then 1 else 0 end as is_partitioning_column,\n        case when columns.is_partitioning_column = 'YES' then paths.field_path end as partition_column,\n        case when columns.clustering_ordinal_position is not null then 1 else 0 end as is_clustering_column,\n        case when columns.clustering_ordinal_position is not null then paths.field_path end as cluster_column,\n        columns.clustering_ordinal_position\n    from {{ information_schema.replace(information_schema_view='COLUMNS') }} columns\n    join {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }} paths\n        on paths.table_catalog = columns.table_catalog\n        and paths.table_schema = columns.table_schema\n        and paths.table_name = columns.table_name\n        and paths.column_name = columns.column_name\n    where columns.ordinal_position is not null\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.replace"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4689188,
      supported_languages: null,
    },
    "macro.dbt_bigquery._bigquery__get_column_stats_sql": {
      name: "_bigquery__get_column_stats_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/catalog/catalog.sql",
      original_file_path: "macros/catalog/catalog.sql",
      unique_id: "macro.dbt_bigquery._bigquery__get_column_stats_sql",
      macro_sql:
        "{% macro _bigquery__get_column_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        shard_name,\n        max(is_partitioning_column) = 1 as is_partitioned,\n        max(partition_column) as partition_column,\n        max(is_clustering_column) = 1 as is_clustered,\n        array_to_string(\n            array_agg(\n                cluster_column ignore nulls\n                order by clustering_ordinal_position\n            ), ', '\n        ) as clustering_columns\n    from columns\n    group by 1, 2, 3\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4690955,
      supported_languages: null,
    },
    "macro.dbt_bigquery._bigquery__get_extended_catalog_sql": {
      name: "_bigquery__get_extended_catalog_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/catalog/catalog.sql",
      original_file_path: "macros/catalog/catalog.sql",
      unique_id: "macro.dbt_bigquery._bigquery__get_extended_catalog_sql",
      macro_sql:
        "{% macro _bigquery__get_extended_catalog_sql() %}\n    select\n        tables.table_catalog as table_database,\n        tables.table_schema,\n        case\n            when tables.is_date_shard then concat(tables.table_name, '*')\n            else tables.table_name\n        end as table_name,\n        tables.table_type,\n        tables.table_comment,\n        columns.column_name,\n        columns.column_index,\n        columns.column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_stats.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        tables.is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_stats.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        tables.is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_stats.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        tables.is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        table_stats.row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        tables.is_table as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        table_stats.size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        tables.is_table as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        column_stats.partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        column_stats.is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        column_stats.clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        column_stats.is_clustered as `stats__clustering_fields__include`\n\n    from tables\n    join table_stats\n        on table_stats.table_catalog = tables.table_catalog\n        and table_stats.table_schema = tables.table_schema\n        and table_stats.table_name = tables.table_name\n    left join column_stats\n        on column_stats.table_catalog = tables.table_catalog\n        and column_stats.table_schema = tables.table_schema\n        and column_stats.shard_name = table_stats.latest_shard_name\n    left join columns\n        on columns.table_catalog = tables.table_catalog\n        and columns.table_schema = tables.table_schema\n        and columns.shard_name = table_stats.latest_shard_name\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4694755,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__resolve_model_name": {
      name: "bigquery__resolve_model_name",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/python_model/python.sql",
      original_file_path: "macros/python_model/python.sql",
      unique_id: "macro.dbt_bigquery.bigquery__resolve_model_name",
      macro_sql:
        "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4698842,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__right": {
      name: "bigquery__right",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/right.sql",
      original_file_path: "macros/utils/right.sql",
      unique_id: "macro.dbt_bigquery.bigquery__right",
      macro_sql:
        "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4702625,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__bool_or": {
      name: "bigquery__bool_or",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/bool_or.sql",
      original_file_path: "macros/utils/bool_or.sql",
      unique_id: "macro.dbt_bigquery.bigquery__bool_or",
      macro_sql:
        "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4704916,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__safe_cast": {
      name: "bigquery__safe_cast",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/safe_cast.sql",
      original_file_path: "macros/utils/safe_cast.sql",
      unique_id: "macro.dbt_bigquery.bigquery__safe_cast",
      macro_sql:
        "{% macro bigquery__safe_cast(field, type) %}\n{%- if type.lower().startswith('array') and field is iterable and (field is not string and field is not mapping) and field | length > 0 -%}\n    {#-- Extract nested type from 'array<nested_type>' --#}\n    {% set nested_type = type.lower()[6:-1] %}\n    {#-- BigQuery does not support direct casts to arrays. instead, each element must be cast individually + reaggregated into an array --#}\n    {%- if cast_from_string_unsupported_for(nested_type)  %}\n        (select array_agg(safe_cast(i as {{ nested_type }})) from unnest([\n            {%- for nested_field in field %}\n                {{ nested_field.strip('\"').strip(\"'\") }}{{ ',' if not loop.last }}\n            {%- endfor %}\n        ]) i)\n    {%- else -%}\n        (select array_agg(safe_cast(i as {{nested_type}})) from unnest({{field}}) i)\n    {%- endif -%}\n\n{%- elif type.lower() == 'json' and field is mapping -%}\n    safe_cast(json {{ dbt.string_literal(tojson(field)) }} as json)\n{%- elif cast_from_string_unsupported_for(type) and field is string -%}\n    safe_cast({{field.strip('\"').strip(\"'\")}} as {{type}})\n{%- else -%}\n    safe_cast({{field}} as {{type}})\n{%- endif -%}\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt_bigquery.cast_from_string_unsupported_for",
          "macro.dbt.string_literal",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4730475,
      supported_languages: null,
    },
    "macro.dbt_bigquery.cast_from_string_unsupported_for": {
      name: "cast_from_string_unsupported_for",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/safe_cast.sql",
      original_file_path: "macros/utils/safe_cast.sql",
      unique_id: "macro.dbt_bigquery.cast_from_string_unsupported_for",
      macro_sql:
        "{% macro cast_from_string_unsupported_for(type) %}\n    {{ return(type.lower().startswith('struct') or type.lower() == 'geography') }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4734275,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__string_literal": {
      name: "bigquery__string_literal",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/string_literal.sql",
      original_file_path: "macros/utils/string_literal.sql",
      unique_id: "macro.dbt_bigquery.bigquery__string_literal",
      macro_sql:
        "{%- macro bigquery__string_literal(value) -%}\n    '''{{ value }}'''\n{%- endmacro -%}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4736774,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__listagg": {
      name: "bigquery__listagg",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/listagg.sql",
      original_file_path: "macros/utils/listagg.sql",
      unique_id: "macro.dbt_bigquery.bigquery__listagg",
      macro_sql:
        "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4743369,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__array_construct": {
      name: "bigquery__array_construct",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/array_construct.sql",
      original_file_path: "macros/utils/array_construct.sql",
      unique_id: "macro.dbt_bigquery.bigquery__array_construct",
      macro_sql:
        "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4748535,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__current_timestamp": {
      name: "bigquery__current_timestamp",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/timestamps.sql",
      original_file_path: "macros/utils/timestamps.sql",
      unique_id: "macro.dbt_bigquery.bigquery__current_timestamp",
      macro_sql:
        "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.47515,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {
      name: "bigquery__snapshot_string_as_time",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/timestamps.sql",
      original_file_path: "macros/utils/timestamps.sql",
      unique_id: "macro.dbt_bigquery.bigquery__snapshot_string_as_time",
      macro_sql:
        "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4754705,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {
      name: "bigquery__current_timestamp_backcompat",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/timestamps.sql",
      original_file_path: "macros/utils/timestamps.sql",
      unique_id: "macro.dbt_bigquery.bigquery__current_timestamp_backcompat",
      macro_sql:
        "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4756145,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__dateadd": {
      name: "bigquery__dateadd",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/dateadd.sql",
      original_file_path: "macros/utils/dateadd.sql",
      unique_id: "macro.dbt_bigquery.bigquery__dateadd",
      macro_sql:
        "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4759917,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__position": {
      name: "bigquery__position",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/position.sql",
      original_file_path: "macros/utils/position.sql",
      unique_id: "macro.dbt_bigquery.bigquery__position",
      macro_sql:
        "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4762976,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__datediff": {
      name: "bigquery__datediff",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/datediff.sql",
      original_file_path: "macros/utils/datediff.sql",
      unique_id: "macro.dbt_bigquery.bigquery__datediff",
      macro_sql:
        "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.datediff"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4770782,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__array_append": {
      name: "bigquery__array_append",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/array_append.sql",
      original_file_path: "macros/utils/array_append.sql",
      unique_id: "macro.dbt_bigquery.bigquery__array_append",
      macro_sql:
        "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}",
      depends_on: {
        macros: ["macro.dbt.array_concat", "macro.dbt.array_construct"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4774184,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__array_concat": {
      name: "bigquery__array_concat",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/array_concat.sql",
      original_file_path: "macros/utils/array_concat.sql",
      unique_id: "macro.dbt_bigquery.bigquery__array_concat",
      macro_sql:
        "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4777017,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__hash": {
      name: "bigquery__hash",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/hash.sql",
      original_file_path: "macros/utils/hash.sql",
      unique_id: "macro.dbt_bigquery.bigquery__hash",
      macro_sql:
        "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.default__hash"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4779701,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__except": {
      name: "bigquery__except",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/except.sql",
      original_file_path: "macros/utils/except.sql",
      unique_id: "macro.dbt_bigquery.bigquery__except",
      macro_sql:
        "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4781427,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__format_column": {
      name: "bigquery__format_column",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/get_columns_spec_ddl.sql",
      original_file_path: "macros/utils/get_columns_spec_ddl.sql",
      unique_id: "macro.dbt_bigquery.bigquery__format_column",
      macro_sql:
        "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4794614,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {
      name: "bigquery__get_empty_schema_sql",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/get_columns_spec_ddl.sql",
      original_file_path: "macros/utils/get_columns_spec_ddl.sql",
      unique_id: "macro.dbt_bigquery.bigquery__get_empty_schema_sql",
      macro_sql:
        "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_empty_schema_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.48048,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__get_select_subquery": {
      name: "bigquery__get_select_subquery",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/get_columns_spec_ddl.sql",
      original_file_path: "macros/utils/get_columns_spec_ddl.sql",
      unique_id: "macro.dbt_bigquery.bigquery__get_select_subquery",
      macro_sql:
        "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__get_column_names"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4807768,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__get_column_names": {
      name: "bigquery__get_column_names",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/get_columns_spec_ddl.sql",
      original_file_path: "macros/utils/get_columns_spec_ddl.sql",
      unique_id: "macro.dbt_bigquery.bigquery__get_column_names",
      macro_sql:
        "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.481602,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__split_part": {
      name: "bigquery__split_part",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/split_part.sql",
      original_file_path: "macros/utils/split_part.sql",
      unique_id: "macro.dbt_bigquery.bigquery__split_part",
      macro_sql:
        "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.482558,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__escape_single_quotes": {
      name: "bigquery__escape_single_quotes",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/escape_single_quotes.sql",
      original_file_path: "macros/utils/escape_single_quotes.sql",
      unique_id: "macro.dbt_bigquery.bigquery__escape_single_quotes",
      macro_sql:
        '{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace("\'", "\\\\\'") }}\n{%- endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4828804,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__date_trunc": {
      name: "bigquery__date_trunc",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/date_trunc.sql",
      original_file_path: "macros/utils/date_trunc.sql",
      unique_id: "macro.dbt_bigquery.bigquery__date_trunc",
      macro_sql:
        "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4831972,
      supported_languages: null,
    },
    "macro.dbt_bigquery.bigquery__intersect": {
      name: "bigquery__intersect",
      resource_type: "macro",
      package_name: "dbt_bigquery",
      path: "macros/utils/intersect.sql",
      original_file_path: "macros/utils/intersect.sql",
      unique_id: "macro.dbt_bigquery.bigquery__intersect",
      macro_sql:
        "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4833808,
      supported_languages: null,
    },
    "macro.dbt.get_rename_intermediate_sql": {
      name: "get_rename_intermediate_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/rename_intermediate.sql",
      original_file_path: "macros/relations/rename_intermediate.sql",
      unique_id: "macro.dbt.get_rename_intermediate_sql",
      macro_sql:
        "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
      depends_on: {
        macros: ["macro.dbt.default__get_rename_intermediate_sql"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4839158,
      supported_languages: null,
    },
    "macro.dbt.default__get_rename_intermediate_sql": {
      name: "default__get_rename_intermediate_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/rename_intermediate.sql",
      original_file_path: "macros/relations/rename_intermediate.sql",
      unique_id: "macro.dbt.default__get_rename_intermediate_sql",
      macro_sql:
        "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}",
      depends_on: {
        macros: [
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.get_rename_sql",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.484264,
      supported_languages: null,
    },
    "macro.dbt.get_drop_backup_sql": {
      name: "get_drop_backup_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/drop_backup.sql",
      original_file_path: "macros/relations/drop_backup.sql",
      unique_id: "macro.dbt.get_drop_backup_sql",
      macro_sql:
        "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
      depends_on: { macros: ["macro.dbt.default__get_drop_backup_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.484775,
      supported_languages: null,
    },
    "macro.dbt.default__get_drop_backup_sql": {
      name: "default__get_drop_backup_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/drop_backup.sql",
      original_file_path: "macros/relations/drop_backup.sql",
      unique_id: "macro.dbt.default__get_drop_backup_sql",
      macro_sql:
        "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}",
      depends_on: {
        macros: ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4851313,
      supported_languages: null,
    },
    "macro.dbt.drop_schema_named": {
      name: "drop_schema_named",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/schema.sql",
      original_file_path: "macros/relations/schema.sql",
      unique_id: "macro.dbt.drop_schema_named",
      macro_sql:
        "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__drop_schema_named"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4856904,
      supported_languages: null,
    },
    "macro.dbt.default__drop_schema_named": {
      name: "default__drop_schema_named",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/schema.sql",
      original_file_path: "macros/relations/schema.sql",
      unique_id: "macro.dbt.default__drop_schema_named",
      macro_sql:
        "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4860513,
      supported_languages: null,
    },
    "macro.dbt.get_create_backup_sql": {
      name: "get_create_backup_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/create_backup.sql",
      original_file_path: "macros/relations/create_backup.sql",
      unique_id: "macro.dbt.get_create_backup_sql",
      macro_sql:
        "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
      depends_on: { macros: ["macro.dbt.default__get_create_backup_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4866035,
      supported_languages: null,
    },
    "macro.dbt.default__get_create_backup_sql": {
      name: "default__get_create_backup_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/create_backup.sql",
      original_file_path: "macros/relations/create_backup.sql",
      unique_id: "macro.dbt.default__get_create_backup_sql",
      macro_sql:
        "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}",
      depends_on: {
        macros: [
          "macro.dbt.make_backup_relation",
          "macro.dbt.get_drop_sql",
          "macro.dbt.get_rename_sql",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4870472,
      supported_languages: null,
    },
    "macro.dbt.get_drop_sql": {
      name: "get_drop_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/drop.sql",
      original_file_path: "macros/relations/drop.sql",
      unique_id: "macro.dbt.get_drop_sql",
      macro_sql:
        "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
      depends_on: { macros: ["macro.dbt.default__get_drop_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4881303,
      supported_languages: null,
    },
    "macro.dbt.default__get_drop_sql": {
      name: "default__get_drop_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/drop.sql",
      original_file_path: "macros/relations/drop.sql",
      unique_id: "macro.dbt.default__get_drop_sql",
      macro_sql:
        "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n",
      depends_on: {
        macros: [
          "macro.dbt.drop_view",
          "macro.dbt.drop_table",
          "macro.dbt.drop_materialized_view",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4887617,
      supported_languages: null,
    },
    "macro.dbt.drop_relation": {
      name: "drop_relation",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/drop.sql",
      original_file_path: "macros/relations/drop.sql",
      unique_id: "macro.dbt.drop_relation",
      macro_sql:
        "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__drop_relation"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4890666,
      supported_languages: null,
    },
    "macro.dbt.default__drop_relation": {
      name: "default__drop_relation",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/drop.sql",
      original_file_path: "macros/relations/drop.sql",
      unique_id: "macro.dbt.default__drop_relation",
      macro_sql:
        "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.statement", "macro.dbt.get_drop_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4894173,
      supported_languages: null,
    },
    "macro.dbt.drop_relation_if_exists": {
      name: "drop_relation_if_exists",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/drop.sql",
      original_file_path: "macros/relations/drop.sql",
      unique_id: "macro.dbt.drop_relation_if_exists",
      macro_sql:
        "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.489745,
      supported_languages: null,
    },
    "macro.dbt.get_replace_sql": {
      name: "get_replace_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/replace.sql",
      original_file_path: "macros/relations/replace.sql",
      unique_id: "macro.dbt.get_replace_sql",
      macro_sql:
        "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_replace_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.490906,
      supported_languages: null,
    },
    "macro.dbt.default__get_replace_sql": {
      name: "default__get_replace_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/replace.sql",
      original_file_path: "macros/relations/replace.sql",
      unique_id: "macro.dbt.default__get_replace_sql",
      macro_sql:
        "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.get_replace_view_sql",
          "macro.dbt.get_replace_table_sql",
          "macro.dbt.get_replace_materialized_view_sql",
          "macro.dbt.get_create_intermediate_sql",
          "macro.dbt.get_create_backup_sql",
          "macro.dbt.get_rename_intermediate_sql",
          "macro.dbt.get_drop_backup_sql",
          "macro.dbt.get_drop_sql",
          "macro.dbt.get_create_sql",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4929178,
      supported_languages: null,
    },
    "macro.dbt.get_create_sql": {
      name: "get_create_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/create.sql",
      original_file_path: "macros/relations/create.sql",
      unique_id: "macro.dbt.get_create_sql",
      macro_sql:
        "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n",
      depends_on: { macros: ["macro.dbt.default__get_create_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4936604,
      supported_languages: null,
    },
    "macro.dbt.default__get_create_sql": {
      name: "default__get_create_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/create.sql",
      original_file_path: "macros/relations/create.sql",
      unique_id: "macro.dbt.default__get_create_sql",
      macro_sql:
        '{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error("`get_create_sql` has not been implemented for: " ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}',
      depends_on: {
        macros: [
          "macro.dbt.get_create_view_as_sql",
          "macro.dbt.get_create_table_as_sql",
          "macro.dbt.get_create_materialized_view_as_sql",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4944174,
      supported_languages: null,
    },
    "macro.dbt.get_create_intermediate_sql": {
      name: "get_create_intermediate_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/create_intermediate.sql",
      original_file_path: "macros/relations/create_intermediate.sql",
      unique_id: "macro.dbt.get_create_intermediate_sql",
      macro_sql:
        "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n",
      depends_on: {
        macros: ["macro.dbt.default__get_create_intermediate_sql"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4950144,
      supported_languages: null,
    },
    "macro.dbt.default__get_create_intermediate_sql": {
      name: "default__get_create_intermediate_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/create_intermediate.sql",
      original_file_path: "macros/relations/create_intermediate.sql",
      unique_id: "macro.dbt.default__get_create_intermediate_sql",
      macro_sql:
        "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}",
      depends_on: {
        macros: [
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.get_drop_sql",
          "macro.dbt.get_create_sql",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4954581,
      supported_languages: null,
    },
    "macro.dbt.get_rename_sql": {
      name: "get_rename_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/rename.sql",
      original_file_path: "macros/relations/rename.sql",
      unique_id: "macro.dbt.get_rename_sql",
      macro_sql:
        "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n",
      depends_on: { macros: ["macro.dbt.default__get_rename_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4964797,
      supported_languages: null,
    },
    "macro.dbt.default__get_rename_sql": {
      name: "default__get_rename_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/rename.sql",
      original_file_path: "macros/relations/rename.sql",
      unique_id: "macro.dbt.default__get_rename_sql",
      macro_sql:
        '{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error("`get_rename_sql` has not been implemented for: " ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n',
      depends_on: {
        macros: [
          "macro.dbt.get_rename_view_sql",
          "macro.dbt.get_rename_table_sql",
          "macro.dbt.get_rename_materialized_view_sql",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4972148,
      supported_languages: null,
    },
    "macro.dbt.rename_relation": {
      name: "rename_relation",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/rename.sql",
      original_file_path: "macros/relations/rename.sql",
      unique_id: "macro.dbt.rename_relation",
      macro_sql:
        "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__rename_relation"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4975674,
      supported_languages: null,
    },
    "macro.dbt.default__rename_relation": {
      name: "default__rename_relation",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/rename.sql",
      original_file_path: "macros/relations/rename.sql",
      unique_id: "macro.dbt.default__rename_relation",
      macro_sql:
        "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.statement"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4980555,
      supported_languages: null,
    },
    "macro.dbt.get_table_columns_and_constraints": {
      name: "get_table_columns_and_constraints",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/column/columns_spec_ddl.sql",
      original_file_path: "macros/relations/column/columns_spec_ddl.sql",
      unique_id: "macro.dbt.get_table_columns_and_constraints",
      macro_sql:
        "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n",
      depends_on: {
        macros: ["macro.dbt.default__get_table_columns_and_constraints"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.4995556,
      supported_languages: null,
    },
    "macro.dbt.default__get_table_columns_and_constraints": {
      name: "default__get_table_columns_and_constraints",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/column/columns_spec_ddl.sql",
      original_file_path: "macros/relations/column/columns_spec_ddl.sql",
      unique_id: "macro.dbt.default__get_table_columns_and_constraints",
      macro_sql:
        "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.table_columns_and_constraints"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.499765,
      supported_languages: null,
    },
    "macro.dbt.table_columns_and_constraints": {
      name: "table_columns_and_constraints",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/column/columns_spec_ddl.sql",
      original_file_path: "macros/relations/column/columns_spec_ddl.sql",
      unique_id: "macro.dbt.table_columns_and_constraints",
      macro_sql:
        "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5006685,
      supported_languages: null,
    },
    "macro.dbt.get_assert_columns_equivalent": {
      name: "get_assert_columns_equivalent",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/column/columns_spec_ddl.sql",
      original_file_path: "macros/relations/column/columns_spec_ddl.sql",
      unique_id: "macro.dbt.get_assert_columns_equivalent",
      macro_sql:
        "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n",
      depends_on: {
        macros: ["macro.dbt.default__get_assert_columns_equivalent"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5009556,
      supported_languages: null,
    },
    "macro.dbt.default__get_assert_columns_equivalent": {
      name: "default__get_assert_columns_equivalent",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/column/columns_spec_ddl.sql",
      original_file_path: "macros/relations/column/columns_spec_ddl.sql",
      unique_id: "macro.dbt.default__get_assert_columns_equivalent",
      macro_sql:
        "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.assert_columns_equivalent"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5011878,
      supported_languages: null,
    },
    "macro.dbt.assert_columns_equivalent": {
      name: "assert_columns_equivalent",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/column/columns_spec_ddl.sql",
      original_file_path: "macros/relations/column/columns_spec_ddl.sql",
      unique_id: "macro.dbt.assert_columns_equivalent",
      macro_sql:
        "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.get_column_schema_from_query",
          "macro.dbt.get_empty_schema_sql",
          "macro.dbt.format_columns",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5034666,
      supported_languages: null,
    },
    "macro.dbt.format_columns": {
      name: "format_columns",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/column/columns_spec_ddl.sql",
      original_file_path: "macros/relations/column/columns_spec_ddl.sql",
      unique_id: "macro.dbt.format_columns",
      macro_sql:
        "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__format_column"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5041177,
      supported_languages: null,
    },
    "macro.dbt.default__format_column": {
      name: "default__format_column",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/column/columns_spec_ddl.sql",
      original_file_path: "macros/relations/column/columns_spec_ddl.sql",
      unique_id: "macro.dbt.default__format_column",
      macro_sql:
        "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5046992,
      supported_languages: null,
    },
    "macro.dbt.drop_table": {
      name: "drop_table",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/table/drop.sql",
      original_file_path: "macros/relations/table/drop.sql",
      unique_id: "macro.dbt.drop_table",
      macro_sql:
        "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__drop_table"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5051231,
      supported_languages: null,
    },
    "macro.dbt.default__drop_table": {
      name: "default__drop_table",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/table/drop.sql",
      original_file_path: "macros/relations/table/drop.sql",
      unique_id: "macro.dbt.default__drop_table",
      macro_sql:
        "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5053084,
      supported_languages: null,
    },
    "macro.dbt.get_replace_table_sql": {
      name: "get_replace_table_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/table/replace.sql",
      original_file_path: "macros/relations/table/replace.sql",
      unique_id: "macro.dbt.get_replace_table_sql",
      macro_sql:
        "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_replace_table_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5057514,
      supported_languages: null,
    },
    "macro.dbt.default__get_replace_table_sql": {
      name: "default__get_replace_table_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/table/replace.sql",
      original_file_path: "macros/relations/table/replace.sql",
      unique_id: "macro.dbt.default__get_replace_table_sql",
      macro_sql:
        '{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        "`get_replace_table_sql` has not been implemented for this adapter."\n    ) }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5060053,
      supported_languages: null,
    },
    "macro.dbt.get_create_table_as_sql": {
      name: "get_create_table_as_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/table/create.sql",
      original_file_path: "macros/relations/table/create.sql",
      unique_id: "macro.dbt.get_create_table_as_sql",
      macro_sql:
        "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_create_table_as_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5072913,
      supported_languages: null,
    },
    "macro.dbt.default__get_create_table_as_sql": {
      name: "default__get_create_table_as_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/table/create.sql",
      original_file_path: "macros/relations/table/create.sql",
      unique_id: "macro.dbt.default__get_create_table_as_sql",
      macro_sql:
        "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.create_table_as"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5076082,
      supported_languages: null,
    },
    "macro.dbt.create_table_as": {
      name: "create_table_as",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/table/create.sql",
      original_file_path: "macros/relations/table/create.sql",
      unique_id: "macro.dbt.create_table_as",
      macro_sql:
        "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__create_table_as"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5083344,
      supported_languages: null,
    },
    "macro.dbt.default__create_table_as": {
      name: "default__create_table_as",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/table/create.sql",
      original_file_path: "macros/relations/table/create.sql",
      unique_id: "macro.dbt.default__create_table_as",
      macro_sql:
        "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.get_assert_columns_equivalent",
          "macro.dbt.get_table_columns_and_constraints",
          "macro.dbt.get_select_subquery",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5094764,
      supported_languages: null,
    },
    "macro.dbt.default__get_column_names": {
      name: "default__get_column_names",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/table/create.sql",
      original_file_path: "macros/relations/table/create.sql",
      unique_id: "macro.dbt.default__get_column_names",
      macro_sql:
        "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5102642,
      supported_languages: null,
    },
    "macro.dbt.get_select_subquery": {
      name: "get_select_subquery",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/table/create.sql",
      original_file_path: "macros/relations/table/create.sql",
      unique_id: "macro.dbt.get_select_subquery",
      macro_sql:
        "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__get_select_subquery"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5105736,
      supported_languages: null,
    },
    "macro.dbt.default__get_select_subquery": {
      name: "default__get_select_subquery",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/table/create.sql",
      original_file_path: "macros/relations/table/create.sql",
      unique_id: "macro.dbt.default__get_select_subquery",
      macro_sql:
        "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__get_column_names"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5108755,
      supported_languages: null,
    },
    "macro.dbt.get_rename_table_sql": {
      name: "get_rename_table_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/table/rename.sql",
      original_file_path: "macros/relations/table/rename.sql",
      unique_id: "macro.dbt.get_rename_table_sql",
      macro_sql:
        "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__get_rename_table_sql"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5113451,
      supported_languages: null,
    },
    "macro.dbt.default__get_rename_table_sql": {
      name: "default__get_rename_table_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/table/rename.sql",
      original_file_path: "macros/relations/table/rename.sql",
      unique_id: "macro.dbt.default__get_rename_table_sql",
      macro_sql:
        '{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        "`get_rename_table_sql` has not been implemented for this adapter."\n    ) }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5116065,
      supported_languages: null,
    },
    "macro.dbt.drop_materialized_view": {
      name: "drop_materialized_view",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/materialized_view/drop.sql",
      original_file_path: "macros/relations/materialized_view/drop.sql",
      unique_id: "macro.dbt.drop_materialized_view",
      macro_sql:
        "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__drop_materialized_view"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5120072,
      supported_languages: null,
    },
    "macro.dbt.default__drop_materialized_view": {
      name: "default__drop_materialized_view",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/materialized_view/drop.sql",
      original_file_path: "macros/relations/materialized_view/drop.sql",
      unique_id: "macro.dbt.default__drop_materialized_view",
      macro_sql:
        "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5121922,
      supported_languages: null,
    },
    "macro.dbt.get_alter_materialized_view_as_sql": {
      name: "get_alter_materialized_view_as_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/materialized_view/alter.sql",
      original_file_path: "macros/relations/materialized_view/alter.sql",
      unique_id: "macro.dbt.get_alter_materialized_view_as_sql",
      macro_sql:
        "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5131443,
      supported_languages: null,
    },
    "macro.dbt.default__get_alter_materialized_view_as_sql": {
      name: "default__get_alter_materialized_view_as_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/materialized_view/alter.sql",
      original_file_path: "macros/relations/materialized_view/alter.sql",
      unique_id: "macro.dbt.default__get_alter_materialized_view_as_sql",
      macro_sql:
        '{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error("Materialized views have not been implemented for this adapter.") }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5134661,
      supported_languages: null,
    },
    "macro.dbt.get_materialized_view_configuration_changes": {
      name: "get_materialized_view_configuration_changes",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/materialized_view/alter.sql",
      original_file_path: "macros/relations/materialized_view/alter.sql",
      unique_id: "macro.dbt.get_materialized_view_configuration_changes",
      macro_sql:
        '{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It\'s recommended that configuration changes be formatted as follows:\n    {"<change_category>": [{"action": "<name>", "context": ...}]}\n\n    For example:\n    {\n        "indexes": [\n            {"action": "drop", "context": "index_abc"},\n            {"action": "create", "context": {"columns": ["column_1", "column_2"], "type": "hash", "unique": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log(\'Determining configuration changes on: \' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch(\'get_materialized_view_configuration_changes\', \'dbt\')(existing_relation, new_config)) -%}\n{% endmacro %}',
      depends_on: {
        macros: [
          "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5139327,
      supported_languages: null,
    },
    "macro.dbt.default__get_materialized_view_configuration_changes": {
      name: "default__get_materialized_view_configuration_changes",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/materialized_view/alter.sql",
      original_file_path: "macros/relations/materialized_view/alter.sql",
      unique_id:
        "macro.dbt.default__get_materialized_view_configuration_changes",
      macro_sql:
        '{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error("Materialized views have not been implemented for this adapter.") }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5141878,
      supported_languages: null,
    },
    "macro.dbt.refresh_materialized_view": {
      name: "refresh_materialized_view",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/materialized_view/refresh.sql",
      original_file_path: "macros/relations/materialized_view/refresh.sql",
      unique_id: "macro.dbt.refresh_materialized_view",
      macro_sql:
        "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__refresh_materialized_view"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5146847,
      supported_languages: null,
    },
    "macro.dbt.default__refresh_materialized_view": {
      name: "default__refresh_materialized_view",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/materialized_view/refresh.sql",
      original_file_path: "macros/relations/materialized_view/refresh.sql",
      unique_id: "macro.dbt.default__refresh_materialized_view",
      macro_sql:
        '{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error("`refresh_materialized_view` has not been implemented for this adapter.") }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5149233,
      supported_languages: null,
    },
    "macro.dbt.get_replace_materialized_view_sql": {
      name: "get_replace_materialized_view_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/materialized_view/replace.sql",
      original_file_path: "macros/relations/materialized_view/replace.sql",
      unique_id: "macro.dbt.get_replace_materialized_view_sql",
      macro_sql:
        "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt.default__get_replace_materialized_view_sql"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.515408,
      supported_languages: null,
    },
    "macro.dbt.default__get_replace_materialized_view_sql": {
      name: "default__get_replace_materialized_view_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/materialized_view/replace.sql",
      original_file_path: "macros/relations/materialized_view/replace.sql",
      unique_id: "macro.dbt.default__get_replace_materialized_view_sql",
      macro_sql:
        '{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        "`get_replace_materialized_view_sql` has not been implemented for this adapter."\n    ) }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.515667,
      supported_languages: null,
    },
    "macro.dbt.get_create_materialized_view_as_sql": {
      name: "get_create_materialized_view_as_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/materialized_view/create.sql",
      original_file_path: "macros/relations/materialized_view/create.sql",
      unique_id: "macro.dbt.get_create_materialized_view_as_sql",
      macro_sql:
        "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5160992,
      supported_languages: null,
    },
    "macro.dbt.default__get_create_materialized_view_as_sql": {
      name: "default__get_create_materialized_view_as_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/materialized_view/create.sql",
      original_file_path: "macros/relations/materialized_view/create.sql",
      unique_id: "macro.dbt.default__get_create_materialized_view_as_sql",
      macro_sql:
        '{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        "`get_create_materialized_view_as_sql` has not been implemented for this adapter."\n    ) }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.516349,
      supported_languages: null,
    },
    "macro.dbt.get_rename_materialized_view_sql": {
      name: "get_rename_materialized_view_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/materialized_view/rename.sql",
      original_file_path: "macros/relations/materialized_view/rename.sql",
      unique_id: "macro.dbt.get_rename_materialized_view_sql",
      macro_sql:
        "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt.default__get_rename_materialized_view_sql"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.516788,
      supported_languages: null,
    },
    "macro.dbt.default__get_rename_materialized_view_sql": {
      name: "default__get_rename_materialized_view_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/materialized_view/rename.sql",
      original_file_path: "macros/relations/materialized_view/rename.sql",
      unique_id: "macro.dbt.default__get_rename_materialized_view_sql",
      macro_sql:
        '{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        "`get_rename_materialized_view_sql` has not been implemented for this adapter."\n    ) }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5171762,
      supported_languages: null,
    },
    "macro.dbt.drop_view": {
      name: "drop_view",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/view/drop.sql",
      original_file_path: "macros/relations/view/drop.sql",
      unique_id: "macro.dbt.drop_view",
      macro_sql:
        "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__drop_view"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5175765,
      supported_languages: null,
    },
    "macro.dbt.default__drop_view": {
      name: "default__drop_view",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/view/drop.sql",
      original_file_path: "macros/relations/view/drop.sql",
      unique_id: "macro.dbt.default__drop_view",
      macro_sql:
        "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5177603,
      supported_languages: null,
    },
    "macro.dbt.get_replace_view_sql": {
      name: "get_replace_view_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/view/replace.sql",
      original_file_path: "macros/relations/view/replace.sql",
      unique_id: "macro.dbt.get_replace_view_sql",
      macro_sql:
        "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_replace_view_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5189674,
      supported_languages: null,
    },
    "macro.dbt.default__get_replace_view_sql": {
      name: "default__get_replace_view_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/view/replace.sql",
      original_file_path: "macros/relations/view/replace.sql",
      unique_id: "macro.dbt.default__get_replace_view_sql",
      macro_sql:
        '{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        "`get_replace_view_sql` has not been implemented for this adapter."\n    ) }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5192475,
      supported_languages: null,
    },
    "macro.dbt.create_or_replace_view": {
      name: "create_or_replace_view",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/view/replace.sql",
      original_file_path: "macros/relations/view/replace.sql",
      unique_id: "macro.dbt.create_or_replace_view",
      macro_sql:
        "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.run_hooks",
          "macro.dbt.handle_existing_table",
          "macro.dbt.should_full_refresh",
          "macro.dbt.statement",
          "macro.dbt.get_create_view_as_sql",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5210993,
      supported_languages: null,
    },
    "macro.dbt.handle_existing_table": {
      name: "handle_existing_table",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/view/replace.sql",
      original_file_path: "macros/relations/view/replace.sql",
      unique_id: "macro.dbt.handle_existing_table",
      macro_sql:
        "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__handle_existing_table"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5214393,
      supported_languages: null,
    },
    "macro.dbt.default__handle_existing_table": {
      name: "default__handle_existing_table",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/view/replace.sql",
      original_file_path: "macros/relations/view/replace.sql",
      unique_id: "macro.dbt.default__handle_existing_table",
      macro_sql:
        '{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log("Dropping relation " ~ old_relation ~ " because it is of type " ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5218122,
      supported_languages: null,
    },
    "macro.dbt.get_create_view_as_sql": {
      name: "get_create_view_as_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/view/create.sql",
      original_file_path: "macros/relations/view/create.sql",
      unique_id: "macro.dbt.get_create_view_as_sql",
      macro_sql:
        "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_create_view_as_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5224717,
      supported_languages: null,
    },
    "macro.dbt.default__get_create_view_as_sql": {
      name: "default__get_create_view_as_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/view/create.sql",
      original_file_path: "macros/relations/view/create.sql",
      unique_id: "macro.dbt.default__get_create_view_as_sql",
      macro_sql:
        "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.create_view_as"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5227413,
      supported_languages: null,
    },
    "macro.dbt.create_view_as": {
      name: "create_view_as",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/view/create.sql",
      original_file_path: "macros/relations/view/create.sql",
      unique_id: "macro.dbt.create_view_as",
      macro_sql:
        "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__create_view_as"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5230465,
      supported_languages: null,
    },
    "macro.dbt.default__create_view_as": {
      name: "default__create_view_as",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/view/create.sql",
      original_file_path: "macros/relations/view/create.sql",
      unique_id: "macro.dbt.default__create_view_as",
      macro_sql:
        "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.get_assert_columns_equivalent"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.52378,
      supported_languages: null,
    },
    "macro.dbt.get_rename_view_sql": {
      name: "get_rename_view_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/view/rename.sql",
      original_file_path: "macros/relations/view/rename.sql",
      unique_id: "macro.dbt.get_rename_view_sql",
      macro_sql:
        "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__get_rename_view_sql"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.524227,
      supported_languages: null,
    },
    "macro.dbt.default__get_rename_view_sql": {
      name: "default__get_rename_view_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/relations/view/rename.sql",
      original_file_path: "macros/relations/view/rename.sql",
      unique_id: "macro.dbt.default__get_rename_view_sql",
      macro_sql:
        '{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        "`get_rename_view_sql` has not been implemented for this adapter."\n    ) }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5244887,
      supported_languages: null,
    },
    "macro.dbt.statement": {
      name: "statement",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/etc/statement.sql",
      original_file_path: "macros/etc/statement.sql",
      unique_id: "macro.dbt.statement",
      macro_sql:
        "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.526828,
      supported_languages: null,
    },
    "macro.dbt.noop_statement": {
      name: "noop_statement",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/etc/statement.sql",
      original_file_path: "macros/etc/statement.sql",
      unique_id: "macro.dbt.noop_statement",
      macro_sql:
        "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5278156,
      supported_languages: null,
    },
    "macro.dbt.run_query": {
      name: "run_query",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/etc/statement.sql",
      original_file_path: "macros/etc/statement.sql",
      unique_id: "macro.dbt.run_query",
      macro_sql:
        '{% macro run_query(sql) %}\n  {% call statement("run_query_statement", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result("run_query_statement").table) %}\n{% endmacro %}',
      depends_on: { macros: ["macro.dbt.statement"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5283127,
      supported_languages: null,
    },
    "macro.dbt.convert_datetime": {
      name: "convert_datetime",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/etc/datetime.sql",
      original_file_path: "macros/etc/datetime.sql",
      unique_id: "macro.dbt.convert_datetime",
      macro_sql:
        "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5308566,
      supported_languages: null,
    },
    "macro.dbt.dates_in_range": {
      name: "dates_in_range",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/etc/datetime.sql",
      original_file_path: "macros/etc/datetime.sql",
      unique_id: "macro.dbt.dates_in_range",
      macro_sql:
        '{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt="%Y%m%d", out_fmt="%Y%m%d") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}',
      depends_on: { macros: ["macro.dbt.convert_datetime"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.532869,
      supported_languages: null,
    },
    "macro.dbt.partition_range": {
      name: "partition_range",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/etc/datetime.sql",
      original_file_path: "macros/etc/datetime.sql",
      unique_id: "macro.dbt.partition_range",
      macro_sql:
        '{% macro partition_range(raw_partition_date, date_fmt=\'%Y%m%d\') %}\n    {% set partition_range = (raw_partition_date | string).split(",") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error("Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: " ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}',
      depends_on: { macros: ["macro.dbt.dates_in_range"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.534269,
      supported_languages: null,
    },
    "macro.dbt.py_current_timestring": {
      name: "py_current_timestring",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/etc/datetime.sql",
      original_file_path: "macros/etc/datetime.sql",
      unique_id: "macro.dbt.py_current_timestring",
      macro_sql:
        '{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime("%Y%m%d%H%M%S%f")) %}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5346668,
      supported_languages: null,
    },
    "macro.dbt.create_schema": {
      name: "create_schema",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/schema.sql",
      original_file_path: "macros/adapters/schema.sql",
      unique_id: "macro.dbt.create_schema",
      macro_sql:
        "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__create_schema"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5352883,
      supported_languages: null,
    },
    "macro.dbt.default__create_schema": {
      name: "default__create_schema",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/schema.sql",
      original_file_path: "macros/adapters/schema.sql",
      unique_id: "macro.dbt.default__create_schema",
      macro_sql:
        "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.statement"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5356112,
      supported_languages: null,
    },
    "macro.dbt.drop_schema": {
      name: "drop_schema",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/schema.sql",
      original_file_path: "macros/adapters/schema.sql",
      unique_id: "macro.dbt.drop_schema",
      macro_sql:
        "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__drop_schema"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5358856,
      supported_languages: null,
    },
    "macro.dbt.default__drop_schema": {
      name: "default__drop_schema",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/schema.sql",
      original_file_path: "macros/adapters/schema.sql",
      unique_id: "macro.dbt.default__drop_schema",
      macro_sql:
        "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.statement"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5361986,
      supported_languages: null,
    },
    "macro.dbt.make_intermediate_relation": {
      name: "make_intermediate_relation",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/relation.sql",
      original_file_path: "macros/adapters/relation.sql",
      unique_id: "macro.dbt.make_intermediate_relation",
      macro_sql:
        "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__make_intermediate_relation"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.538888,
      supported_languages: null,
    },
    "macro.dbt.default__make_intermediate_relation": {
      name: "default__make_intermediate_relation",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/relation.sql",
      original_file_path: "macros/adapters/relation.sql",
      unique_id: "macro.dbt.default__make_intermediate_relation",
      macro_sql:
        "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__make_temp_relation"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.539202,
      supported_languages: null,
    },
    "macro.dbt.make_temp_relation": {
      name: "make_temp_relation",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/relation.sql",
      original_file_path: "macros/adapters/relation.sql",
      unique_id: "macro.dbt.make_temp_relation",
      macro_sql:
        "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__make_temp_relation"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5395765,
      supported_languages: null,
    },
    "macro.dbt.default__make_temp_relation": {
      name: "default__make_temp_relation",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/relation.sql",
      original_file_path: "macros/adapters/relation.sql",
      unique_id: "macro.dbt.default__make_temp_relation",
      macro_sql:
        '{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={"identifier": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.54007,
      supported_languages: null,
    },
    "macro.dbt.make_backup_relation": {
      name: "make_backup_relation",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/relation.sql",
      original_file_path: "macros/adapters/relation.sql",
      unique_id: "macro.dbt.make_backup_relation",
      macro_sql:
        "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__make_backup_relation"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5404828,
      supported_languages: null,
    },
    "macro.dbt.default__make_backup_relation": {
      name: "default__make_backup_relation",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/relation.sql",
      original_file_path: "macros/adapters/relation.sql",
      unique_id: "macro.dbt.default__make_backup_relation",
      macro_sql:
        '{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={"identifier": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5410223,
      supported_languages: null,
    },
    "macro.dbt.truncate_relation": {
      name: "truncate_relation",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/relation.sql",
      original_file_path: "macros/adapters/relation.sql",
      unique_id: "macro.dbt.truncate_relation",
      macro_sql:
        "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__truncate_relation"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5413334,
      supported_languages: null,
    },
    "macro.dbt.default__truncate_relation": {
      name: "default__truncate_relation",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/relation.sql",
      original_file_path: "macros/adapters/relation.sql",
      unique_id: "macro.dbt.default__truncate_relation",
      macro_sql:
        "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.statement"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5416179,
      supported_languages: null,
    },
    "macro.dbt.get_or_create_relation": {
      name: "get_or_create_relation",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/relation.sql",
      original_file_path: "macros/adapters/relation.sql",
      unique_id: "macro.dbt.get_or_create_relation",
      macro_sql:
        "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_or_create_relation"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5420344,
      supported_languages: null,
    },
    "macro.dbt.default__get_or_create_relation": {
      name: "default__get_or_create_relation",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/relation.sql",
      original_file_path: "macros/adapters/relation.sql",
      unique_id: "macro.dbt.default__get_or_create_relation",
      macro_sql:
        "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.542942,
      supported_languages: null,
    },
    "macro.dbt.load_cached_relation": {
      name: "load_cached_relation",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/relation.sql",
      original_file_path: "macros/adapters/relation.sql",
      unique_id: "macro.dbt.load_cached_relation",
      macro_sql:
        "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5433497,
      supported_languages: null,
    },
    "macro.dbt.load_relation": {
      name: "load_relation",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/relation.sql",
      original_file_path: "macros/adapters/relation.sql",
      unique_id: "macro.dbt.load_relation",
      macro_sql:
        "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.load_cached_relation"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5435925,
      supported_languages: null,
    },
    "macro.dbt.current_timestamp": {
      name: "current_timestamp",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/timestamps.sql",
      original_file_path: "macros/adapters/timestamps.sql",
      unique_id: "macro.dbt.current_timestamp",
      macro_sql:
        "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__current_timestamp"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5443575,
      supported_languages: null,
    },
    "macro.dbt.default__current_timestamp": {
      name: "default__current_timestamp",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/timestamps.sql",
      original_file_path: "macros/adapters/timestamps.sql",
      unique_id: "macro.dbt.default__current_timestamp",
      macro_sql:
        "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.544626,
      supported_languages: null,
    },
    "macro.dbt.snapshot_get_time": {
      name: "snapshot_get_time",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/timestamps.sql",
      original_file_path: "macros/adapters/timestamps.sql",
      unique_id: "macro.dbt.snapshot_get_time",
      macro_sql:
        "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n",
      depends_on: { macros: ["macro.dbt.default__snapshot_get_time"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.544882,
      supported_languages: null,
    },
    "macro.dbt.default__snapshot_get_time": {
      name: "default__snapshot_get_time",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/timestamps.sql",
      original_file_path: "macros/adapters/timestamps.sql",
      unique_id: "macro.dbt.default__snapshot_get_time",
      macro_sql:
        "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.current_timestamp"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5450683,
      supported_languages: null,
    },
    "macro.dbt.current_timestamp_backcompat": {
      name: "current_timestamp_backcompat",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/timestamps.sql",
      original_file_path: "macros/adapters/timestamps.sql",
      unique_id: "macro.dbt.current_timestamp_backcompat",
      macro_sql:
        "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.545345,
      supported_languages: null,
    },
    "macro.dbt.default__current_timestamp_backcompat": {
      name: "default__current_timestamp_backcompat",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/timestamps.sql",
      original_file_path: "macros/adapters/timestamps.sql",
      unique_id: "macro.dbt.default__current_timestamp_backcompat",
      macro_sql:
        "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5454826,
      supported_languages: null,
    },
    "macro.dbt.current_timestamp_in_utc_backcompat": {
      name: "current_timestamp_in_utc_backcompat",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/timestamps.sql",
      original_file_path: "macros/adapters/timestamps.sql",
      unique_id: "macro.dbt.current_timestamp_in_utc_backcompat",
      macro_sql:
        "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt.default__current_timestamp_in_utc_backcompat"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5457735,
      supported_languages: null,
    },
    "macro.dbt.default__current_timestamp_in_utc_backcompat": {
      name: "default__current_timestamp_in_utc_backcompat",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/timestamps.sql",
      original_file_path: "macros/adapters/timestamps.sql",
      unique_id: "macro.dbt.default__current_timestamp_in_utc_backcompat",
      macro_sql:
        "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.current_timestamp_backcompat",
          "macro.dbt_bigquery.bigquery__current_timestamp_backcompat",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.546062,
      supported_languages: null,
    },
    "macro.dbt.copy_grants": {
      name: "copy_grants",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id: "macro.dbt.copy_grants",
      macro_sql:
        "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__copy_grants"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5484657,
      supported_languages: null,
    },
    "macro.dbt.default__copy_grants": {
      name: "default__copy_grants",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id: "macro.dbt.default__copy_grants",
      macro_sql:
        "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5488095,
      supported_languages: null,
    },
    "macro.dbt.support_multiple_grantees_per_dcl_statement": {
      name: "support_multiple_grantees_per_dcl_statement",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id: "macro.dbt.support_multiple_grantees_per_dcl_statement",
      macro_sql:
        "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.default__support_multiple_grantees_per_dcl_statement",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5491006,
      supported_languages: null,
    },
    "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {
      name: "default__support_multiple_grantees_per_dcl_statement",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id:
        "macro.dbt.default__support_multiple_grantees_per_dcl_statement",
      macro_sql:
        "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5492985,
      supported_languages: null,
    },
    "macro.dbt.should_revoke": {
      name: "should_revoke",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id: "macro.dbt.should_revoke",
      macro_sql:
        "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.copy_grants"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5498805,
      supported_languages: null,
    },
    "macro.dbt.get_show_grant_sql": {
      name: "get_show_grant_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id: "macro.dbt.get_show_grant_sql",
      macro_sql:
        '{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch("get_show_grant_sql", "dbt")(relation)) }}\n{% endmacro %}',
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__get_show_grant_sql"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5501912,
      supported_languages: null,
    },
    "macro.dbt.default__get_show_grant_sql": {
      name: "default__get_show_grant_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id: "macro.dbt.default__get_show_grant_sql",
      macro_sql:
        "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5503738,
      supported_languages: null,
    },
    "macro.dbt.get_grant_sql": {
      name: "get_grant_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id: "macro.dbt.get_grant_sql",
      macro_sql:
        "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__get_grant_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5507472,
      supported_languages: null,
    },
    "macro.dbt.default__get_grant_sql": {
      name: "default__get_grant_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id: "macro.dbt.default__get_grant_sql",
      macro_sql:
        "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.551067,
      supported_languages: null,
    },
    "macro.dbt.get_revoke_sql": {
      name: "get_revoke_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id: "macro.dbt.get_revoke_sql",
      macro_sql:
        "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__get_revoke_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5514705,
      supported_languages: null,
    },
    "macro.dbt.default__get_revoke_sql": {
      name: "default__get_revoke_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id: "macro.dbt.default__get_revoke_sql",
      macro_sql:
        "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5517948,
      supported_languages: null,
    },
    "macro.dbt.get_dcl_statement_list": {
      name: "get_dcl_statement_list",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id: "macro.dbt.get_dcl_statement_list",
      macro_sql:
        "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_dcl_statement_list"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5521677,
      supported_languages: null,
    },
    "macro.dbt.default__get_dcl_statement_list": {
      name: "default__get_dcl_statement_list",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id: "macro.dbt.default__get_dcl_statement_list",
      macro_sql:
        "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}",
      depends_on: {
        macros: ["macro.dbt.support_multiple_grantees_per_dcl_statement"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5532737,
      supported_languages: null,
    },
    "macro.dbt.call_dcl_statements": {
      name: "call_dcl_statements",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id: "macro.dbt.call_dcl_statements",
      macro_sql:
        '{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch("call_dcl_statements", "dbt")(dcl_statement_list)) }}\n{% endmacro %}',
      depends_on: { macros: ["macro.dbt.default__call_dcl_statements"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.553583,
      supported_languages: null,
    },
    "macro.dbt.default__call_dcl_statements": {
      name: "default__call_dcl_statements",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id: "macro.dbt.default__call_dcl_statements",
      macro_sql:
        "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.statement"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5540063,
      supported_languages: null,
    },
    "macro.dbt.apply_grants": {
      name: "apply_grants",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id: "macro.dbt.apply_grants",
      macro_sql:
        '{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch("apply_grants", "dbt")(relation, grant_config, should_revoke)) }}\n{% endmacro %}',
      depends_on: { macros: ["macro.dbt.default__apply_grants"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.554385,
      supported_languages: null,
    },
    "macro.dbt.default__apply_grants": {
      name: "default__apply_grants",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/apply_grants.sql",
      original_file_path: "macros/adapters/apply_grants.sql",
      unique_id: "macro.dbt.default__apply_grants",
      macro_sql:
        "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.run_query",
          "macro.dbt.get_show_grant_sql",
          "macro.dbt.get_dcl_statement_list",
          "macro.dbt.call_dcl_statements",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5563016,
      supported_languages: null,
    },
    "macro.dbt.get_show_sql": {
      name: "get_show_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/show.sql",
      original_file_path: "macros/adapters/show.sql",
      unique_id: "macro.dbt.get_show_sql",
      macro_sql:
        "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.get_limit_subquery_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5571432,
      supported_languages: null,
    },
    "macro.dbt.get_limit_subquery_sql": {
      name: "get_limit_subquery_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/show.sql",
      original_file_path: "macros/adapters/show.sql",
      unique_id: "macro.dbt.get_limit_subquery_sql",
      macro_sql:
        "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_limit_subquery_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.557462,
      supported_languages: null,
    },
    "macro.dbt.default__get_limit_subquery_sql": {
      name: "default__get_limit_subquery_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/show.sql",
      original_file_path: "macros/adapters/show.sql",
      unique_id: "macro.dbt.default__get_limit_subquery_sql",
      macro_sql:
        "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5576975,
      supported_languages: null,
    },
    "macro.dbt.alter_column_comment": {
      name: "alter_column_comment",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/persist_docs.sql",
      original_file_path: "macros/adapters/persist_docs.sql",
      unique_id: "macro.dbt.alter_column_comment",
      macro_sql:
        "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__alter_column_comment"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5586925,
      supported_languages: null,
    },
    "macro.dbt.default__alter_column_comment": {
      name: "default__alter_column_comment",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/persist_docs.sql",
      original_file_path: "macros/adapters/persist_docs.sql",
      unique_id: "macro.dbt.default__alter_column_comment",
      macro_sql:
        "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.558989,
      supported_languages: null,
    },
    "macro.dbt.alter_relation_comment": {
      name: "alter_relation_comment",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/persist_docs.sql",
      original_file_path: "macros/adapters/persist_docs.sql",
      unique_id: "macro.dbt.alter_relation_comment",
      macro_sql:
        "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__alter_relation_comment"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5593498,
      supported_languages: null,
    },
    "macro.dbt.default__alter_relation_comment": {
      name: "default__alter_relation_comment",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/persist_docs.sql",
      original_file_path: "macros/adapters/persist_docs.sql",
      unique_id: "macro.dbt.default__alter_relation_comment",
      macro_sql:
        "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5596385,
      supported_languages: null,
    },
    "macro.dbt.persist_docs": {
      name: "persist_docs",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/persist_docs.sql",
      original_file_path: "macros/adapters/persist_docs.sql",
      unique_id: "macro.dbt.persist_docs",
      macro_sql:
        "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__persist_docs"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5600753,
      supported_languages: null,
    },
    "macro.dbt.default__persist_docs": {
      name: "default__persist_docs",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/persist_docs.sql",
      original_file_path: "macros/adapters/persist_docs.sql",
      unique_id: "macro.dbt.default__persist_docs",
      macro_sql:
        "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.run_query",
          "macro.dbt.alter_relation_comment",
          "macro.dbt.alter_column_comment",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5609963,
      supported_languages: null,
    },
    "macro.dbt.validate_sql": {
      name: "validate_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/validate_sql.sql",
      original_file_path: "macros/adapters/validate_sql.sql",
      unique_id: "macro.dbt.validate_sql",
      macro_sql:
        "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__validate_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5614607,
      supported_languages: null,
    },
    "macro.dbt.default__validate_sql": {
      name: "default__validate_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/validate_sql.sql",
      original_file_path: "macros/adapters/validate_sql.sql",
      unique_id: "macro.dbt.default__validate_sql",
      macro_sql:
        "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.statement"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5618417,
      supported_languages: null,
    },
    "macro.dbt.get_columns_in_relation": {
      name: "get_columns_in_relation",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/columns.sql",
      original_file_path: "macros/adapters/columns.sql",
      unique_id: "macro.dbt.get_columns_in_relation",
      macro_sql:
        "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__get_columns_in_relation"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5649242,
      supported_languages: null,
    },
    "macro.dbt.default__get_columns_in_relation": {
      name: "default__get_columns_in_relation",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/columns.sql",
      original_file_path: "macros/adapters/columns.sql",
      unique_id: "macro.dbt.default__get_columns_in_relation",
      macro_sql:
        "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5652084,
      supported_languages: null,
    },
    "macro.dbt.sql_convert_columns_in_relation": {
      name: "sql_convert_columns_in_relation",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/columns.sql",
      original_file_path: "macros/adapters/columns.sql",
      unique_id: "macro.dbt.sql_convert_columns_in_relation",
      macro_sql:
        "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5657337,
      supported_languages: null,
    },
    "macro.dbt.get_empty_subquery_sql": {
      name: "get_empty_subquery_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/columns.sql",
      original_file_path: "macros/adapters/columns.sql",
      unique_id: "macro.dbt.get_empty_subquery_sql",
      macro_sql:
        "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__get_empty_subquery_sql"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5660942,
      supported_languages: null,
    },
    "macro.dbt.default__get_empty_subquery_sql": {
      name: "default__get_empty_subquery_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/columns.sql",
      original_file_path: "macros/adapters/columns.sql",
      unique_id: "macro.dbt.default__get_empty_subquery_sql",
      macro_sql:
        "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5664413,
      supported_languages: null,
    },
    "macro.dbt.get_empty_schema_sql": {
      name: "get_empty_schema_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/columns.sql",
      original_file_path: "macros/adapters/columns.sql",
      unique_id: "macro.dbt.get_empty_schema_sql",
      macro_sql:
        "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5667367,
      supported_languages: null,
    },
    "macro.dbt.default__get_empty_schema_sql": {
      name: "default__get_empty_schema_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/columns.sql",
      original_file_path: "macros/adapters/columns.sql",
      unique_id: "macro.dbt.default__get_empty_schema_sql",
      macro_sql:
        "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.cast"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.568679,
      supported_languages: null,
    },
    "macro.dbt.get_column_schema_from_query": {
      name: "get_column_schema_from_query",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/columns.sql",
      original_file_path: "macros/adapters/columns.sql",
      unique_id: "macro.dbt.get_column_schema_from_query",
      macro_sql:
        "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.get_empty_subquery_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5692663,
      supported_languages: null,
    },
    "macro.dbt.get_columns_in_query": {
      name: "get_columns_in_query",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/columns.sql",
      original_file_path: "macros/adapters/columns.sql",
      unique_id: "macro.dbt.get_columns_in_query",
      macro_sql:
        "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_columns_in_query"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5695689,
      supported_languages: null,
    },
    "macro.dbt.default__get_columns_in_query": {
      name: "default__get_columns_in_query",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/columns.sql",
      original_file_path: "macros/adapters/columns.sql",
      unique_id: "macro.dbt.default__get_columns_in_query",
      macro_sql:
        "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.570139,
      supported_languages: null,
    },
    "macro.dbt.alter_column_type": {
      name: "alter_column_type",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/columns.sql",
      original_file_path: "macros/adapters/columns.sql",
      unique_id: "macro.dbt.alter_column_type",
      macro_sql:
        "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__alter_column_type"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5705068,
      supported_languages: null,
    },
    "macro.dbt.default__alter_column_type": {
      name: "default__alter_column_type",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/columns.sql",
      original_file_path: "macros/adapters/columns.sql",
      unique_id: "macro.dbt.default__alter_column_type",
      macro_sql:
        "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.statement"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5715065,
      supported_languages: null,
    },
    "macro.dbt.alter_relation_add_remove_columns": {
      name: "alter_relation_add_remove_columns",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/columns.sql",
      original_file_path: "macros/adapters/columns.sql",
      unique_id: "macro.dbt.alter_relation_add_remove_columns",
      macro_sql:
        "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt.default__alter_relation_add_remove_columns"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5719228,
      supported_languages: null,
    },
    "macro.dbt.default__alter_relation_add_remove_columns": {
      name: "default__alter_relation_add_remove_columns",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/columns.sql",
      original_file_path: "macros/adapters/columns.sql",
      unique_id: "macro.dbt.default__alter_relation_add_remove_columns",
      macro_sql:
        "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.run_query"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5732403,
      supported_languages: null,
    },
    "macro.dbt.collect_freshness": {
      name: "collect_freshness",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/freshness.sql",
      original_file_path: "macros/adapters/freshness.sql",
      unique_id: "macro.dbt.collect_freshness",
      macro_sql:
        "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__collect_freshness"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.573899,
      supported_languages: null,
    },
    "macro.dbt.default__collect_freshness": {
      name: "default__collect_freshness",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/freshness.sql",
      original_file_path: "macros/adapters/freshness.sql",
      unique_id: "macro.dbt.default__collect_freshness",
      macro_sql:
        "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt.statement", "macro.dbt.current_timestamp"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5745716,
      supported_languages: null,
    },
    "macro.dbt.get_catalog_relations": {
      name: "get_catalog_relations",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/metadata.sql",
      original_file_path: "macros/adapters/metadata.sql",
      unique_id: "macro.dbt.get_catalog_relations",
      macro_sql:
        "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__get_catalog_relations"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5784197,
      supported_languages: null,
    },
    "macro.dbt.default__get_catalog_relations": {
      name: "default__get_catalog_relations",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/metadata.sql",
      original_file_path: "macros/adapters/metadata.sql",
      unique_id: "macro.dbt.default__get_catalog_relations",
      macro_sql:
        "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5788696,
      supported_languages: null,
    },
    "macro.dbt.get_catalog": {
      name: "get_catalog",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/metadata.sql",
      original_file_path: "macros/adapters/metadata.sql",
      unique_id: "macro.dbt.get_catalog",
      macro_sql:
        "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__get_catalog"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5792356,
      supported_languages: null,
    },
    "macro.dbt.default__get_catalog": {
      name: "default__get_catalog",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/metadata.sql",
      original_file_path: "macros/adapters/metadata.sql",
      unique_id: "macro.dbt.default__get_catalog",
      macro_sql:
        "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5796854,
      supported_languages: null,
    },
    "macro.dbt.information_schema_name": {
      name: "information_schema_name",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/metadata.sql",
      original_file_path: "macros/adapters/metadata.sql",
      unique_id: "macro.dbt.information_schema_name",
      macro_sql:
        "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__information_schema_name"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5799973,
      supported_languages: null,
    },
    "macro.dbt.default__information_schema_name": {
      name: "default__information_schema_name",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/metadata.sql",
      original_file_path: "macros/adapters/metadata.sql",
      unique_id: "macro.dbt.default__information_schema_name",
      macro_sql:
        "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5802772,
      supported_languages: null,
    },
    "macro.dbt.list_schemas": {
      name: "list_schemas",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/metadata.sql",
      original_file_path: "macros/adapters/metadata.sql",
      unique_id: "macro.dbt.list_schemas",
      macro_sql:
        "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__list_schemas"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.580578,
      supported_languages: null,
    },
    "macro.dbt.default__list_schemas": {
      name: "default__list_schemas",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/metadata.sql",
      original_file_path: "macros/adapters/metadata.sql",
      unique_id: "macro.dbt.default__list_schemas",
      macro_sql:
        "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt.information_schema_name", "macro.dbt.run_query"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5813658,
      supported_languages: null,
    },
    "macro.dbt.check_schema_exists": {
      name: "check_schema_exists",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/metadata.sql",
      original_file_path: "macros/adapters/metadata.sql",
      unique_id: "macro.dbt.check_schema_exists",
      macro_sql:
        "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__check_schema_exists"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5817108,
      supported_languages: null,
    },
    "macro.dbt.default__check_schema_exists": {
      name: "default__check_schema_exists",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/metadata.sql",
      original_file_path: "macros/adapters/metadata.sql",
      unique_id: "macro.dbt.default__check_schema_exists",
      macro_sql:
        "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.replace", "macro.dbt.run_query"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5822248,
      supported_languages: null,
    },
    "macro.dbt.list_relations_without_caching": {
      name: "list_relations_without_caching",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/metadata.sql",
      original_file_path: "macros/adapters/metadata.sql",
      unique_id: "macro.dbt.list_relations_without_caching",
      macro_sql:
        "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__list_relations_without_caching"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.582536,
      supported_languages: null,
    },
    "macro.dbt.default__list_relations_without_caching": {
      name: "default__list_relations_without_caching",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/metadata.sql",
      original_file_path: "macros/adapters/metadata.sql",
      unique_id: "macro.dbt.default__list_relations_without_caching",
      macro_sql:
        "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.582812,
      supported_languages: null,
    },
    "macro.dbt.get_relations": {
      name: "get_relations",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/metadata.sql",
      original_file_path: "macros/adapters/metadata.sql",
      unique_id: "macro.dbt.get_relations",
      macro_sql:
        "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_relations"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5830908,
      supported_languages: null,
    },
    "macro.dbt.default__get_relations": {
      name: "default__get_relations",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/metadata.sql",
      original_file_path: "macros/adapters/metadata.sql",
      unique_id: "macro.dbt.default__get_relations",
      macro_sql:
        "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5833757,
      supported_languages: null,
    },
    "macro.dbt.get_relation_last_modified": {
      name: "get_relation_last_modified",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/metadata.sql",
      original_file_path: "macros/adapters/metadata.sql",
      unique_id: "macro.dbt.get_relation_last_modified",
      macro_sql:
        "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_relation_last_modified"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5837169,
      supported_languages: null,
    },
    "macro.dbt.default__get_relation_last_modified": {
      name: "default__get_relation_last_modified",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/metadata.sql",
      original_file_path: "macros/adapters/metadata.sql",
      unique_id: "macro.dbt.default__get_relation_last_modified",
      macro_sql:
        "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5840116,
      supported_languages: null,
    },
    "macro.dbt.get_create_index_sql": {
      name: "get_create_index_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/indexes.sql",
      original_file_path: "macros/adapters/indexes.sql",
      unique_id: "macro.dbt.get_create_index_sql",
      macro_sql:
        "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_create_index_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5852437,
      supported_languages: null,
    },
    "macro.dbt.default__get_create_index_sql": {
      name: "default__get_create_index_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/indexes.sql",
      original_file_path: "macros/adapters/indexes.sql",
      unique_id: "macro.dbt.default__get_create_index_sql",
      macro_sql:
        "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5854824,
      supported_languages: null,
    },
    "macro.dbt.create_indexes": {
      name: "create_indexes",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/indexes.sql",
      original_file_path: "macros/adapters/indexes.sql",
      unique_id: "macro.dbt.create_indexes",
      macro_sql:
        "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.default__create_indexes"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5857525,
      supported_languages: null,
    },
    "macro.dbt.default__create_indexes": {
      name: "default__create_indexes",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/indexes.sql",
      original_file_path: "macros/adapters/indexes.sql",
      unique_id: "macro.dbt.default__create_indexes",
      macro_sql:
        "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5864227,
      supported_languages: null,
    },
    "macro.dbt.get_drop_index_sql": {
      name: "get_drop_index_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/indexes.sql",
      original_file_path: "macros/adapters/indexes.sql",
      unique_id: "macro.dbt.get_drop_index_sql",
      macro_sql:
        "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_drop_index_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5867329,
      supported_languages: null,
    },
    "macro.dbt.default__get_drop_index_sql": {
      name: "default__get_drop_index_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/indexes.sql",
      original_file_path: "macros/adapters/indexes.sql",
      unique_id: "macro.dbt.default__get_drop_index_sql",
      macro_sql:
        '{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error("`get_drop_index_sql has not been implemented for this adapter.") }}\n{%- endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5869668,
      supported_languages: null,
    },
    "macro.dbt.get_show_indexes_sql": {
      name: "get_show_indexes_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/indexes.sql",
      original_file_path: "macros/adapters/indexes.sql",
      unique_id: "macro.dbt.get_show_indexes_sql",
      macro_sql:
        "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_show_indexes_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.58726,
      supported_languages: null,
    },
    "macro.dbt.default__get_show_indexes_sql": {
      name: "default__get_show_indexes_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/adapters/indexes.sql",
      original_file_path: "macros/adapters/indexes.sql",
      unique_id: "macro.dbt.default__get_show_indexes_sql",
      macro_sql:
        '{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error("`get_show_indexes_sql has not been implemented for this adapter.") }}\n{%- endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.587485,
      supported_languages: null,
    },
    "macro.dbt.default__test_accepted_values": {
      name: "default__test_accepted_values",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/generic_test_sql/accepted_values.sql",
      original_file_path: "macros/generic_test_sql/accepted_values.sql",
      unique_id: "macro.dbt.default__test_accepted_values",
      macro_sql:
        "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5884168,
      supported_languages: null,
    },
    "macro.dbt.default__test_not_null": {
      name: "default__test_not_null",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/generic_test_sql/not_null.sql",
      original_file_path: "macros/generic_test_sql/not_null.sql",
      unique_id: "macro.dbt.default__test_not_null",
      macro_sql:
        "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.should_store_failures"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5889196,
      supported_languages: null,
    },
    "macro.dbt.default__test_unique": {
      name: "default__test_unique",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/generic_test_sql/unique.sql",
      original_file_path: "macros/generic_test_sql/unique.sql",
      unique_id: "macro.dbt.default__test_unique",
      macro_sql:
        "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5893207,
      supported_languages: null,
    },
    "macro.dbt.default__test_relationships": {
      name: "default__test_relationships",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/generic_test_sql/relationships.sql",
      original_file_path: "macros/generic_test_sql/relationships.sql",
      unique_id: "macro.dbt.default__test_relationships",
      macro_sql:
        "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.589861,
      supported_languages: null,
    },
    "macro.dbt.run_hooks": {
      name: "run_hooks",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/hooks.sql",
      original_file_path: "macros/materializations/hooks.sql",
      unique_id: "macro.dbt.run_hooks",
      macro_sql:
        "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.statement"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5915546,
      supported_languages: null,
    },
    "macro.dbt.make_hook_config": {
      name: "make_hook_config",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/hooks.sql",
      original_file_path: "macros/materializations/hooks.sql",
      unique_id: "macro.dbt.make_hook_config",
      macro_sql:
        '{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({"sql": sql, "transaction": inside_transaction}) }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5918863,
      supported_languages: null,
    },
    "macro.dbt.before_begin": {
      name: "before_begin",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/hooks.sql",
      original_file_path: "macros/materializations/hooks.sql",
      unique_id: "macro.dbt.before_begin",
      macro_sql:
        "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.make_hook_config"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.592132,
      supported_languages: null,
    },
    "macro.dbt.in_transaction": {
      name: "in_transaction",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/hooks.sql",
      original_file_path: "macros/materializations/hooks.sql",
      unique_id: "macro.dbt.in_transaction",
      macro_sql:
        "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.make_hook_config"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.592373,
      supported_languages: null,
    },
    "macro.dbt.after_commit": {
      name: "after_commit",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/hooks.sql",
      original_file_path: "macros/materializations/hooks.sql",
      unique_id: "macro.dbt.after_commit",
      macro_sql:
        "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.make_hook_config"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5926147,
      supported_languages: null,
    },
    "macro.dbt.set_sql_header": {
      name: "set_sql_header",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/configs.sql",
      original_file_path: "macros/materializations/configs.sql",
      unique_id: "macro.dbt.set_sql_header",
      macro_sql:
        "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5931933,
      supported_languages: null,
    },
    "macro.dbt.should_full_refresh": {
      name: "should_full_refresh",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/configs.sql",
      original_file_path: "macros/materializations/configs.sql",
      unique_id: "macro.dbt.should_full_refresh",
      macro_sql:
        "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5938497,
      supported_languages: null,
    },
    "macro.dbt.should_store_failures": {
      name: "should_store_failures",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/configs.sql",
      original_file_path: "macros/materializations/configs.sql",
      unique_id: "macro.dbt.should_store_failures",
      macro_sql:
        "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.5943666,
      supported_languages: null,
    },
    "macro.dbt.create_csv_table": {
      name: "create_csv_table",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/seeds/helpers.sql",
      original_file_path: "macros/materializations/seeds/helpers.sql",
      unique_id: "macro.dbt.create_csv_table",
      macro_sql:
        "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__create_csv_table"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6007285,
      supported_languages: null,
    },
    "macro.dbt.default__create_csv_table": {
      name: "default__create_csv_table",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/seeds/helpers.sql",
      original_file_path: "macros/materializations/seeds/helpers.sql",
      unique_id: "macro.dbt.default__create_csv_table",
      macro_sql:
        "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.statement"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.602251,
      supported_languages: null,
    },
    "macro.dbt.reset_csv_table": {
      name: "reset_csv_table",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/seeds/helpers.sql",
      original_file_path: "macros/materializations/seeds/helpers.sql",
      unique_id: "macro.dbt.reset_csv_table",
      macro_sql:
        "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__reset_csv_table"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6026413,
      supported_languages: null,
    },
    "macro.dbt.default__reset_csv_table": {
      name: "default__reset_csv_table",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/seeds/helpers.sql",
      original_file_path: "macros/materializations/seeds/helpers.sql",
      unique_id: "macro.dbt.default__reset_csv_table",
      macro_sql:
        '{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = "" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = "truncate table " ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}',
      depends_on: { macros: ["macro.dbt.create_csv_table"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6034727,
      supported_languages: null,
    },
    "macro.dbt.get_csv_sql": {
      name: "get_csv_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/seeds/helpers.sql",
      original_file_path: "macros/materializations/seeds/helpers.sql",
      unique_id: "macro.dbt.get_csv_sql",
      macro_sql:
        "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_csv_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.603802,
      supported_languages: null,
    },
    "macro.dbt.default__get_csv_sql": {
      name: "default__get_csv_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/seeds/helpers.sql",
      original_file_path: "macros/materializations/seeds/helpers.sql",
      unique_id: "macro.dbt.default__get_csv_sql",
      macro_sql:
        "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.604033,
      supported_languages: null,
    },
    "macro.dbt.get_binding_char": {
      name: "get_binding_char",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/seeds/helpers.sql",
      original_file_path: "macros/materializations/seeds/helpers.sql",
      unique_id: "macro.dbt.get_binding_char",
      macro_sql:
        "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_binding_char"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6042736,
      supported_languages: null,
    },
    "macro.dbt.default__get_binding_char": {
      name: "default__get_binding_char",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/seeds/helpers.sql",
      original_file_path: "macros/materializations/seeds/helpers.sql",
      unique_id: "macro.dbt.default__get_binding_char",
      macro_sql:
        "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6044724,
      supported_languages: null,
    },
    "macro.dbt.get_batch_size": {
      name: "get_batch_size",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/seeds/helpers.sql",
      original_file_path: "macros/materializations/seeds/helpers.sql",
      unique_id: "macro.dbt.get_batch_size",
      macro_sql:
        "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_batch_size"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6047378,
      supported_languages: null,
    },
    "macro.dbt.default__get_batch_size": {
      name: "default__get_batch_size",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/seeds/helpers.sql",
      original_file_path: "macros/materializations/seeds/helpers.sql",
      unique_id: "macro.dbt.default__get_batch_size",
      macro_sql:
        "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.60494,
      supported_languages: null,
    },
    "macro.dbt.get_seed_column_quoted_csv": {
      name: "get_seed_column_quoted_csv",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/seeds/helpers.sql",
      original_file_path: "macros/materializations/seeds/helpers.sql",
      unique_id: "macro.dbt.get_seed_column_quoted_csv",
      macro_sql:
        "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6057396,
      supported_languages: null,
    },
    "macro.dbt.load_csv_rows": {
      name: "load_csv_rows",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/seeds/helpers.sql",
      original_file_path: "macros/materializations/seeds/helpers.sql",
      unique_id: "macro.dbt.load_csv_rows",
      macro_sql:
        "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__load_csv_rows"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.60605,
      supported_languages: null,
    },
    "macro.dbt.default__load_csv_rows": {
      name: "default__load_csv_rows",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/seeds/helpers.sql",
      original_file_path: "macros/materializations/seeds/helpers.sql",
      unique_id: "macro.dbt.default__load_csv_rows",
      macro_sql:
        "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.get_batch_size",
          "macro.dbt.get_seed_column_quoted_csv",
          "macro.dbt.get_binding_char",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6081266,
      supported_languages: null,
    },
    "macro.dbt.materialization_seed_default": {
      name: "materialization_seed_default",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/seeds/seed.sql",
      original_file_path: "macros/materializations/seeds/seed.sql",
      unique_id: "macro.dbt.materialization_seed_default",
      macro_sql:
        "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      depends_on: {
        macros: [
          "macro.dbt.should_full_refresh",
          "macro.dbt.run_hooks",
          "macro.dbt.reset_csv_table",
          "macro.dbt.create_csv_table",
          "macro.dbt.load_csv_rows",
          "macro.dbt.noop_statement",
          "macro.dbt.get_csv_sql",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6131096,
      supported_languages: ["sql"],
    },
    "macro.dbt.materialization_unit_default": {
      name: "materialization_unit_default",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/tests/unit.sql",
      original_file_path: "macros/materializations/tests/unit.sql",
      unique_id: "macro.dbt.materialization_unit_default",
      macro_sql:
        "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
      depends_on: {
        macros: [
          "macro.dbt.get_columns_in_query",
          "macro.dbt.make_temp_relation",
          "macro.dbt.run_query",
          "macro.dbt.get_create_table_as_sql",
          "macro.dbt.get_empty_subquery_sql",
          "macro.dbt.get_expected_sql",
          "macro.dbt.get_unit_test_sql",
          "macro.dbt.statement",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6160145,
      supported_languages: ["sql"],
    },
    "macro.dbt.materialization_test_default": {
      name: "materialization_test_default",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/tests/test.sql",
      original_file_path: "macros/materializations/tests/test.sql",
      unique_id: "macro.dbt.materialization_test_default",
      macro_sql:
        "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
      depends_on: {
        macros: [
          "macro.dbt.should_store_failures",
          "macro.dbt.statement",
          "macro.dbt.get_create_sql",
          "macro.dbt.get_test_sql",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6201708,
      supported_languages: ["sql"],
    },
    "macro.dbt.get_test_sql": {
      name: "get_test_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/tests/helpers.sql",
      original_file_path: "macros/materializations/tests/helpers.sql",
      unique_id: "macro.dbt.get_test_sql",
      macro_sql:
        "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_test_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6217716,
      supported_languages: null,
    },
    "macro.dbt.default__get_test_sql": {
      name: "default__get_test_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/tests/helpers.sql",
      original_file_path: "macros/materializations/tests/helpers.sql",
      unique_id: "macro.dbt.default__get_test_sql",
      macro_sql:
        '{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ "limit " ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6223006,
      supported_languages: null,
    },
    "macro.dbt.get_unit_test_sql": {
      name: "get_unit_test_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/tests/helpers.sql",
      original_file_path: "macros/materializations/tests/helpers.sql",
      unique_id: "macro.dbt.get_unit_test_sql",
      macro_sql:
        "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_unit_test_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6226518,
      supported_languages: null,
    },
    "macro.dbt.default__get_unit_test_sql": {
      name: "default__get_unit_test_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/tests/helpers.sql",
      original_file_path: "macros/materializations/tests/helpers.sql",
      unique_id: "macro.dbt.default__get_unit_test_sql",
      macro_sql:
        '{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal("actual") }} as {{ adapter.quote("actual_or_expected") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal("expected") }} as {{ adapter.quote("actual_or_expected") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}',
      depends_on: { macros: ["macro.dbt.string_literal"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6237257,
      supported_languages: null,
    },
    "macro.dbt.get_where_subquery": {
      name: "get_where_subquery",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/tests/where_subquery.sql",
      original_file_path: "macros/materializations/tests/where_subquery.sql",
      unique_id: "macro.dbt.get_where_subquery",
      macro_sql:
        "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_where_subquery"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6243162,
      supported_languages: null,
    },
    "macro.dbt.default__get_where_subquery": {
      name: "default__get_where_subquery",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/tests/where_subquery.sql",
      original_file_path: "macros/materializations/tests/where_subquery.sql",
      unique_id: "macro.dbt.default__get_where_subquery",
      macro_sql:
        "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6249685,
      supported_languages: null,
    },
    "macro.dbt.materialization_view_default": {
      name: "materialization_view_default",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/view.sql",
      original_file_path: "macros/materializations/models/view.sql",
      unique_id: "macro.dbt.materialization_view_default",
      macro_sql:
        "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
      depends_on: {
        macros: [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.run_hooks",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.statement",
          "macro.dbt.get_create_view_as_sql",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6294355,
      supported_languages: ["sql"],
    },
    "macro.dbt.materialization_materialized_view_default": {
      name: "materialization_materialized_view_default",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/materialized_view.sql",
      original_file_path:
        "macros/materializations/models/materialized_view.sql",
      unique_id: "macro.dbt.materialization_materialized_view_default",
      macro_sql:
        "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      depends_on: {
        macros: [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.materialized_view_setup",
          "macro.dbt.materialized_view_get_build_sql",
          "macro.dbt.materialized_view_execute_no_op",
          "macro.dbt.materialized_view_execute_build_sql",
          "macro.dbt.materialized_view_teardown",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6357093,
      supported_languages: ["sql"],
    },
    "macro.dbt.materialized_view_setup": {
      name: "materialized_view_setup",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/materialized_view.sql",
      original_file_path:
        "macros/materializations/models/materialized_view.sql",
      unique_id: "macro.dbt.materialized_view_setup",
      macro_sql:
        "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.load_cached_relation",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6363592,
      supported_languages: null,
    },
    "macro.dbt.materialized_view_teardown": {
      name: "materialized_view_teardown",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/materialized_view.sql",
      original_file_path:
        "macros/materializations/models/materialized_view.sql",
      unique_id: "macro.dbt.materialized_view_teardown",
      macro_sql:
        "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6367774,
      supported_languages: null,
    },
    "macro.dbt.materialized_view_get_build_sql": {
      name: "materialized_view_get_build_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/materialized_view.sql",
      original_file_path:
        "macros/materializations/models/materialized_view.sql",
      unique_id: "macro.dbt.materialized_view_get_build_sql",
      macro_sql:
        "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.should_full_refresh",
          "macro.dbt.get_create_materialized_view_as_sql",
          "macro.dbt.get_replace_sql",
          "macro.dbt.get_materialized_view_configuration_changes",
          "macro.dbt.refresh_materialized_view",
          "macro.dbt.get_alter_materialized_view_as_sql",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.638892,
      supported_languages: null,
    },
    "macro.dbt.materialized_view_execute_no_op": {
      name: "materialized_view_execute_no_op",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/materialized_view.sql",
      original_file_path:
        "macros/materializations/models/materialized_view.sql",
      unique_id: "macro.dbt.materialized_view_execute_no_op",
      macro_sql:
        '{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name="main",\n        message="skip " ~ target_relation,\n        code="skip",\n        rows_affected="-1"\n    ) %}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.639301,
      supported_languages: null,
    },
    "macro.dbt.materialized_view_execute_build_sql": {
      name: "materialized_view_execute_build_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/materialized_view.sql",
      original_file_path:
        "macros/materializations/models/materialized_view.sql",
      unique_id: "macro.dbt.materialized_view_execute_build_sql",
      macro_sql:
        "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6403809,
      supported_languages: null,
    },
    "macro.dbt.materialization_table_default": {
      name: "materialization_table_default",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/table.sql",
      original_file_path: "macros/materializations/models/table.sql",
      unique_id: "macro.dbt.materialization_table_default",
      macro_sql:
        "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
      depends_on: {
        macros: [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.get_create_table_as_sql",
          "macro.dbt.create_indexes",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.644712,
      supported_languages: ["sql"],
    },
    "macro.dbt.can_clone_table": {
      name: "can_clone_table",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/clone/can_clone_table.sql",
      original_file_path:
        "macros/materializations/models/clone/can_clone_table.sql",
      unique_id: "macro.dbt.can_clone_table",
      macro_sql:
        "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__can_clone_table"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6451328,
      supported_languages: null,
    },
    "macro.dbt.default__can_clone_table": {
      name: "default__can_clone_table",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/clone/can_clone_table.sql",
      original_file_path:
        "macros/materializations/models/clone/can_clone_table.sql",
      unique_id: "macro.dbt.default__can_clone_table",
      macro_sql:
        "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6453388,
      supported_languages: null,
    },
    "macro.dbt.create_or_replace_clone": {
      name: "create_or_replace_clone",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/clone/create_or_replace_clone.sql",
      original_file_path:
        "macros/materializations/models/clone/create_or_replace_clone.sql",
      unique_id: "macro.dbt.create_or_replace_clone",
      macro_sql:
        "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__create_or_replace_clone"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6458144,
      supported_languages: null,
    },
    "macro.dbt.default__create_or_replace_clone": {
      name: "default__create_or_replace_clone",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/clone/create_or_replace_clone.sql",
      original_file_path:
        "macros/materializations/models/clone/create_or_replace_clone.sql",
      unique_id: "macro.dbt.default__create_or_replace_clone",
      macro_sql:
        "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6460512,
      supported_languages: null,
    },
    "macro.dbt.materialization_clone_default": {
      name: "materialization_clone_default",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/clone/clone.sql",
      original_file_path: "macros/materializations/models/clone/clone.sql",
      unique_id: "macro.dbt.materialization_clone_default",
      macro_sql:
        '{%- materialization clone, default -%}\n\n  {%- set relations = {\'relations\': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log("No relation found in state manifest for " ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log("Relation " ~ existing_relation ~ " already exists", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == \'table\' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type=\'table\') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log("Dropping relation " ~ existing_relation ~ " because it is of type " ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic \'create or replace\'\n      {% call statement(\'main\') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log("Target relation and defer relation are the same, skipping clone for relation: " ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({\'relations\': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type=\'view\') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = "materialization_view_" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = "materialization_view_default" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}',
      depends_on: {
        macros: [
          "macro.dbt.load_cached_relation",
          "macro.dbt.can_clone_table",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.statement",
          "macro.dbt.create_or_replace_clone",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6514568,
      supported_languages: ["sql"],
    },
    "macro.dbt.get_incremental_append_sql": {
      name: "get_incremental_append_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/strategies.sql",
      original_file_path:
        "macros/materializations/models/incremental/strategies.sql",
      unique_id: "macro.dbt.get_incremental_append_sql",
      macro_sql:
        "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_incremental_append_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6527903,
      supported_languages: null,
    },
    "macro.dbt.default__get_incremental_append_sql": {
      name: "default__get_incremental_append_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/strategies.sql",
      original_file_path:
        "macros/materializations/models/incremental/strategies.sql",
      unique_id: "macro.dbt.default__get_incremental_append_sql",
      macro_sql:
        '{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict["target_relation"], arg_dict["temp_relation"], arg_dict["dest_columns"])) %}\n\n{% endmacro %}',
      depends_on: { macros: ["macro.dbt.get_insert_into_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6531768,
      supported_languages: null,
    },
    "macro.dbt.get_incremental_delete_insert_sql": {
      name: "get_incremental_delete_insert_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/strategies.sql",
      original_file_path:
        "macros/materializations/models/incremental/strategies.sql",
      unique_id: "macro.dbt.get_incremental_delete_insert_sql",
      macro_sql:
        "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt.default__get_incremental_delete_insert_sql"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6534882,
      supported_languages: null,
    },
    "macro.dbt.default__get_incremental_delete_insert_sql": {
      name: "default__get_incremental_delete_insert_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/strategies.sql",
      original_file_path:
        "macros/materializations/models/incremental/strategies.sql",
      unique_id: "macro.dbt.default__get_incremental_delete_insert_sql",
      macro_sql:
        '{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict["target_relation"], arg_dict["temp_relation"], arg_dict["unique_key"], arg_dict["dest_columns"], arg_dict["incremental_predicates"])) %}\n\n{% endmacro %}',
      depends_on: { macros: ["macro.dbt.get_delete_insert_merge_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6539683,
      supported_languages: null,
    },
    "macro.dbt.get_incremental_merge_sql": {
      name: "get_incremental_merge_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/strategies.sql",
      original_file_path:
        "macros/materializations/models/incremental/strategies.sql",
      unique_id: "macro.dbt.get_incremental_merge_sql",
      macro_sql:
        "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_incremental_merge_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6542733,
      supported_languages: null,
    },
    "macro.dbt.default__get_incremental_merge_sql": {
      name: "default__get_incremental_merge_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/strategies.sql",
      original_file_path:
        "macros/materializations/models/incremental/strategies.sql",
      unique_id: "macro.dbt.default__get_incremental_merge_sql",
      macro_sql:
        '{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict["target_relation"], arg_dict["temp_relation"], arg_dict["unique_key"], arg_dict["dest_columns"], arg_dict["incremental_predicates"])) %}\n\n{% endmacro %}',
      depends_on: { macros: ["macro.dbt.get_merge_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.654766,
      supported_languages: null,
    },
    "macro.dbt.get_incremental_insert_overwrite_sql": {
      name: "get_incremental_insert_overwrite_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/strategies.sql",
      original_file_path:
        "macros/materializations/models/incremental/strategies.sql",
      unique_id: "macro.dbt.get_incremental_insert_overwrite_sql",
      macro_sql:
        "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt.default__get_incremental_insert_overwrite_sql"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6550834,
      supported_languages: null,
    },
    "macro.dbt.default__get_incremental_insert_overwrite_sql": {
      name: "default__get_incremental_insert_overwrite_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/strategies.sql",
      original_file_path:
        "macros/materializations/models/incremental/strategies.sql",
      unique_id: "macro.dbt.default__get_incremental_insert_overwrite_sql",
      macro_sql:
        '{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict["target_relation"], arg_dict["temp_relation"], arg_dict["dest_columns"], arg_dict["incremental_predicates"])) %}\n\n{% endmacro %}',
      depends_on: { macros: ["macro.dbt.get_insert_overwrite_merge_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6555362,
      supported_languages: null,
    },
    "macro.dbt.get_incremental_default_sql": {
      name: "get_incremental_default_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/strategies.sql",
      original_file_path:
        "macros/materializations/models/incremental/strategies.sql",
      unique_id: "macro.dbt.get_incremental_default_sql",
      macro_sql:
        "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt.default__get_incremental_default_sql"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6558547,
      supported_languages: null,
    },
    "macro.dbt.default__get_incremental_default_sql": {
      name: "default__get_incremental_default_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/strategies.sql",
      original_file_path:
        "macros/materializations/models/incremental/strategies.sql",
      unique_id: "macro.dbt.default__get_incremental_default_sql",
      macro_sql:
        "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.get_incremental_append_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6561048,
      supported_languages: null,
    },
    "macro.dbt.get_insert_into_sql": {
      name: "get_insert_into_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/strategies.sql",
      original_file_path:
        "macros/materializations/models/incremental/strategies.sql",
      unique_id: "macro.dbt.get_insert_into_sql",
      macro_sql:
        '{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute="name")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}',
      depends_on: { macros: ["macro.dbt.get_quoted_csv"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6565654,
      supported_languages: null,
    },
    "macro.dbt.get_merge_sql": {
      name: "get_merge_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/merge.sql",
      original_file_path:
        "macros/materializations/models/incremental/merge.sql",
      unique_id: "macro.dbt.get_merge_sql",
      macro_sql:
        "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_merge_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6642823,
      supported_languages: null,
    },
    "macro.dbt.default__get_merge_sql": {
      name: "default__get_merge_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/merge.sql",
      original_file_path:
        "macros/materializations/models/incremental/merge.sql",
      unique_id: "macro.dbt.default__get_merge_sql",
      macro_sql:
        "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.get_quoted_csv",
          "macro.dbt.get_merge_update_columns",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6671298,
      supported_languages: null,
    },
    "macro.dbt.get_delete_insert_merge_sql": {
      name: "get_delete_insert_merge_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/merge.sql",
      original_file_path:
        "macros/materializations/models/incremental/merge.sql",
      unique_id: "macro.dbt.get_delete_insert_merge_sql",
      macro_sql:
        "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}",
      depends_on: {
        macros: ["macro.dbt.default__get_delete_insert_merge_sql"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6675665,
      supported_languages: null,
    },
    "macro.dbt.default__get_delete_insert_merge_sql": {
      name: "default__get_delete_insert_merge_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/merge.sql",
      original_file_path:
        "macros/materializations/models/incremental/merge.sql",
      unique_id: "macro.dbt.default__get_delete_insert_merge_sql",
      macro_sql:
        '{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute="name")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ "and " if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}',
      depends_on: { macros: ["macro.dbt.get_quoted_csv"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.66925,
      supported_languages: null,
    },
    "macro.dbt.get_insert_overwrite_merge_sql": {
      name: "get_insert_overwrite_merge_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/merge.sql",
      original_file_path:
        "macros/materializations/models/incremental/merge.sql",
      unique_id: "macro.dbt.get_insert_overwrite_merge_sql",
      macro_sql:
        "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
      depends_on: {
        macros: ["macro.dbt.default__get_insert_overwrite_merge_sql"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6696897,
      supported_languages: null,
    },
    "macro.dbt.default__get_insert_overwrite_merge_sql": {
      name: "default__get_insert_overwrite_merge_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/merge.sql",
      original_file_path:
        "macros/materializations/models/incremental/merge.sql",
      unique_id: "macro.dbt.default__get_insert_overwrite_merge_sql",
      macro_sql:
        "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.get_quoted_csv"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6707716,
      supported_languages: null,
    },
    "macro.dbt.incremental_validate_on_schema_change": {
      name: "incremental_validate_on_schema_change",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/on_schema_change.sql",
      original_file_path:
        "macros/materializations/models/incremental/on_schema_change.sql",
      unique_id: "macro.dbt.incremental_validate_on_schema_change",
      macro_sql:
        "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6779,
      supported_languages: null,
    },
    "macro.dbt.check_for_schema_changes": {
      name: "check_for_schema_changes",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/on_schema_change.sql",
      original_file_path:
        "macros/materializations/models/incremental/on_schema_change.sql",
      unique_id: "macro.dbt.check_for_schema_changes",
      macro_sql:
        "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6799316,
      supported_languages: null,
    },
    "macro.dbt.sync_column_schemas": {
      name: "sync_column_schemas",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/on_schema_change.sql",
      original_file_path:
        "macros/materializations/models/incremental/on_schema_change.sql",
      unique_id: "macro.dbt.sync_column_schemas",
      macro_sql:
        "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.alter_relation_add_remove_columns",
          "macro.dbt.alter_column_type",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.681948,
      supported_languages: null,
    },
    "macro.dbt.process_schema_changes": {
      name: "process_schema_changes",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/on_schema_change.sql",
      original_file_path:
        "macros/materializations/models/incremental/on_schema_change.sql",
      unique_id: "macro.dbt.process_schema_changes",
      macro_sql:
        "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.check_for_schema_changes",
          "macro.dbt.sync_column_schemas",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6834197,
      supported_languages: null,
    },
    "macro.dbt.get_quoted_csv": {
      name: "get_quoted_csv",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/column_helpers.sql",
      original_file_path:
        "macros/materializations/models/incremental/column_helpers.sql",
      unique_id: "macro.dbt.get_quoted_csv",
      macro_sql:
        "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6857674,
      supported_languages: null,
    },
    "macro.dbt.diff_columns": {
      name: "diff_columns",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/column_helpers.sql",
      original_file_path:
        "macros/materializations/models/incremental/column_helpers.sql",
      unique_id: "macro.dbt.diff_columns",
      macro_sql:
        "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6866913,
      supported_languages: null,
    },
    "macro.dbt.diff_column_data_types": {
      name: "diff_column_data_types",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/column_helpers.sql",
      original_file_path:
        "macros/materializations/models/incremental/column_helpers.sql",
      unique_id: "macro.dbt.diff_column_data_types",
      macro_sql:
        "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6878145,
      supported_languages: null,
    },
    "macro.dbt.get_merge_update_columns": {
      name: "get_merge_update_columns",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/column_helpers.sql",
      original_file_path:
        "macros/materializations/models/incremental/column_helpers.sql",
      unique_id: "macro.dbt.get_merge_update_columns",
      macro_sql:
        "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_merge_update_columns"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6881998,
      supported_languages: null,
    },
    "macro.dbt.default__get_merge_update_columns": {
      name: "default__get_merge_update_columns",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/column_helpers.sql",
      original_file_path:
        "macros/materializations/models/incremental/column_helpers.sql",
      unique_id: "macro.dbt.default__get_merge_update_columns",
      macro_sql:
        '{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute="quoted") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        \'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config\'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map("lower") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6894019,
      supported_languages: null,
    },
    "macro.dbt.is_incremental": {
      name: "is_incremental",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/is_incremental.sql",
      original_file_path:
        "macros/materializations/models/incremental/is_incremental.sql",
      unique_id: "macro.dbt.is_incremental",
      macro_sql:
        "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.should_full_refresh"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6903987,
      supported_languages: null,
    },
    "macro.dbt.materialization_incremental_default": {
      name: "materialization_incremental_default",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/models/incremental/incremental.sql",
      original_file_path:
        "macros/materializations/models/incremental/incremental.sql",
      unique_id: "macro.dbt.materialization_incremental_default",
      macro_sql:
        "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
      depends_on: {
        macros: [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.should_full_refresh",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
          "macro.dbt.get_create_table_as_sql",
          "macro.dbt.run_query",
          "macro.dbt.process_schema_changes",
          "macro.dbt.statement",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.6982548,
      supported_languages: ["sql"],
    },
    "macro.dbt.strategy_dispatch": {
      name: "strategy_dispatch",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/strategies.sql",
      original_file_path: "macros/materializations/snapshots/strategies.sql",
      unique_id: "macro.dbt.strategy_dispatch",
      macro_sql:
        "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7033155,
      supported_languages: null,
    },
    "macro.dbt.snapshot_hash_arguments": {
      name: "snapshot_hash_arguments",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/strategies.sql",
      original_file_path: "macros/materializations/snapshots/strategies.sql",
      unique_id: "macro.dbt.snapshot_hash_arguments",
      macro_sql:
        "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.703612,
      supported_languages: null,
    },
    "macro.dbt.default__snapshot_hash_arguments": {
      name: "default__snapshot_hash_arguments",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/strategies.sql",
      original_file_path: "macros/materializations/snapshots/strategies.sql",
      unique_id: "macro.dbt.default__snapshot_hash_arguments",
      macro_sql:
        "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7040074,
      supported_languages: null,
    },
    "macro.dbt.snapshot_timestamp_strategy": {
      name: "snapshot_timestamp_strategy",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/strategies.sql",
      original_file_path: "macros/materializations/snapshots/strategies.sql",
      unique_id: "macro.dbt.snapshot_timestamp_strategy",
      macro_sql:
        '{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config[\'unique_key\'] %}\n    {% set updated_at = config[\'updated_at\'] %}\n    {% set invalidate_hard_deletes = config.get(\'invalidate_hard_deletes\', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        "unique_key": primary_key,\n        "updated_at": updated_at,\n        "row_changed": row_changed_expr,\n        "scd_id": scd_id_expr,\n        "invalidate_hard_deletes": invalidate_hard_deletes\n    }) %}\n{% endmacro %}',
      depends_on: { macros: ["macro.dbt.snapshot_hash_arguments"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7051945,
      supported_languages: null,
    },
    "macro.dbt.snapshot_string_as_time": {
      name: "snapshot_string_as_time",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/strategies.sql",
      original_file_path: "macros/materializations/snapshots/strategies.sql",
      unique_id: "macro.dbt.snapshot_string_as_time",
      macro_sql:
        "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7054765,
      supported_languages: null,
    },
    "macro.dbt.default__snapshot_string_as_time": {
      name: "default__snapshot_string_as_time",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/strategies.sql",
      original_file_path: "macros/materializations/snapshots/strategies.sql",
      unique_id: "macro.dbt.default__snapshot_string_as_time",
      macro_sql:
        "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7057717,
      supported_languages: null,
    },
    "macro.dbt.snapshot_check_all_get_existing_columns": {
      name: "snapshot_check_all_get_existing_columns",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/strategies.sql",
      original_file_path: "macros/materializations/snapshots/strategies.sql",
      unique_id: "macro.dbt.snapshot_check_all_get_existing_columns",
      macro_sql:
        "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.get_columns_in_query"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7081134,
      supported_languages: null,
    },
    "macro.dbt.snapshot_check_strategy": {
      name: "snapshot_check_strategy",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/strategies.sql",
      original_file_path: "macros/materializations/snapshots/strategies.sql",
      unique_id: "macro.dbt.snapshot_check_strategy",
      macro_sql:
        '{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config[\'check_cols\'] %}\n    {% set primary_key = config[\'unique_key\'] %}\n    {% set invalidate_hard_deletes = config.get(\'invalidate_hard_deletes\', false) %}\n    {% set updated_at = config.get(\'updated_at\', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        "unique_key": primary_key,\n        "updated_at": updated_at,\n        "row_changed": row_changed_expr,\n        "scd_id": scd_id_expr,\n        "invalidate_hard_deletes": invalidate_hard_deletes\n    }) %}\n{% endmacro %}',
      depends_on: {
        macros: [
          "macro.dbt.snapshot_get_time",
          "macro.dbt.snapshot_check_all_get_existing_columns",
          "macro.dbt.get_true_sql",
          "macro.dbt.snapshot_hash_arguments",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7102177,
      supported_languages: null,
    },
    "macro.dbt.create_columns": {
      name: "create_columns",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/helpers.sql",
      original_file_path: "macros/materializations/snapshots/helpers.sql",
      unique_id: "macro.dbt.create_columns",
      macro_sql:
        "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__create_columns"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.715259,
      supported_languages: null,
    },
    "macro.dbt.default__create_columns": {
      name: "default__create_columns",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/helpers.sql",
      original_file_path: "macros/materializations/snapshots/helpers.sql",
      unique_id: "macro.dbt.default__create_columns",
      macro_sql:
        '{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column "{{ column.name }}" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}',
      depends_on: { macros: ["macro.dbt.statement"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.715749,
      supported_languages: null,
    },
    "macro.dbt.post_snapshot": {
      name: "post_snapshot",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/helpers.sql",
      original_file_path: "macros/materializations/snapshots/helpers.sql",
      unique_id: "macro.dbt.post_snapshot",
      macro_sql:
        "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__post_snapshot"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.716031,
      supported_languages: null,
    },
    "macro.dbt.default__post_snapshot": {
      name: "default__post_snapshot",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/helpers.sql",
      original_file_path: "macros/materializations/snapshots/helpers.sql",
      unique_id: "macro.dbt.default__post_snapshot",
      macro_sql:
        "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.716191,
      supported_languages: null,
    },
    "macro.dbt.get_true_sql": {
      name: "get_true_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/helpers.sql",
      original_file_path: "macros/materializations/snapshots/helpers.sql",
      unique_id: "macro.dbt.get_true_sql",
      macro_sql:
        "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_true_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.716441,
      supported_languages: null,
    },
    "macro.dbt.default__get_true_sql": {
      name: "default__get_true_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/helpers.sql",
      original_file_path: "macros/materializations/snapshots/helpers.sql",
      unique_id: "macro.dbt.default__get_true_sql",
      macro_sql:
        "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.716644,
      supported_languages: null,
    },
    "macro.dbt.snapshot_staging_table": {
      name: "snapshot_staging_table",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/helpers.sql",
      original_file_path: "macros/materializations/snapshots/helpers.sql",
      unique_id: "macro.dbt.snapshot_staging_table",
      macro_sql:
        "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__snapshot_staging_table"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.716995,
      supported_languages: null,
    },
    "macro.dbt.default__snapshot_staging_table": {
      name: "default__snapshot_staging_table",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/helpers.sql",
      original_file_path: "macros/materializations/snapshots/helpers.sql",
      unique_id: "macro.dbt.default__snapshot_staging_table",
      macro_sql:
        "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.snapshot_get_time"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7184582,
      supported_languages: null,
    },
    "macro.dbt.build_snapshot_table": {
      name: "build_snapshot_table",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/helpers.sql",
      original_file_path: "macros/materializations/snapshots/helpers.sql",
      unique_id: "macro.dbt.build_snapshot_table",
      macro_sql:
        "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__build_snapshot_table"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7187784,
      supported_languages: null,
    },
    "macro.dbt.default__build_snapshot_table": {
      name: "default__build_snapshot_table",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/helpers.sql",
      original_file_path: "macros/materializations/snapshots/helpers.sql",
      unique_id: "macro.dbt.default__build_snapshot_table",
      macro_sql:
        "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7192757,
      supported_languages: null,
    },
    "macro.dbt.build_snapshot_staging_table": {
      name: "build_snapshot_staging_table",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/helpers.sql",
      original_file_path: "macros/materializations/snapshots/helpers.sql",
      unique_id: "macro.dbt.build_snapshot_staging_table",
      macro_sql:
        "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}",
      depends_on: {
        macros: [
          "macro.dbt.make_temp_relation",
          "macro.dbt.snapshot_staging_table",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.720015,
      supported_languages: null,
    },
    "macro.dbt.snapshot_merge_sql": {
      name: "snapshot_merge_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/snapshot_merge.sql",
      original_file_path:
        "macros/materializations/snapshots/snapshot_merge.sql",
      unique_id: "macro.dbt.snapshot_merge_sql",
      macro_sql:
        "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.default__snapshot_merge_sql"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7206943,
      supported_languages: null,
    },
    "macro.dbt.default__snapshot_merge_sql": {
      name: "default__snapshot_merge_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/snapshot_merge.sql",
      original_file_path:
        "macros/materializations/snapshots/snapshot_merge.sql",
      unique_id: "macro.dbt.default__snapshot_merge_sql",
      macro_sql:
        "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7211595,
      supported_languages: null,
    },
    "macro.dbt.materialization_snapshot_default": {
      name: "materialization_snapshot_default",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/materializations/snapshots/snapshot.sql",
      original_file_path: "macros/materializations/snapshots/snapshot.sql",
      unique_id: "macro.dbt.materialization_snapshot_default",
      macro_sql:
        "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      depends_on: {
        macros: [
          "macro.dbt.get_or_create_relation",
          "macro.dbt.run_hooks",
          "macro.dbt.strategy_dispatch",
          "macro.dbt.build_snapshot_table",
          "macro.dbt.create_table_as",
          "macro.dbt.build_snapshot_staging_table",
          "macro.dbt.create_columns",
          "macro.dbt.snapshot_merge_sql",
          "macro.dbt.statement",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes",
          "macro.dbt.post_snapshot",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7300222,
      supported_languages: ["sql"],
    },
    "macro.dbt.generate_schema_name": {
      name: "generate_schema_name",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/get_custom_name/get_custom_schema.sql",
      original_file_path: "macros/get_custom_name/get_custom_schema.sql",
      unique_id: "macro.dbt.generate_schema_name",
      macro_sql:
        "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__generate_schema_name"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7308655,
      supported_languages: null,
    },
    "macro.dbt.default__generate_schema_name": {
      name: "default__generate_schema_name",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/get_custom_name/get_custom_schema.sql",
      original_file_path: "macros/get_custom_name/get_custom_schema.sql",
      unique_id: "macro.dbt.default__generate_schema_name",
      macro_sql:
        "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7313495,
      supported_languages: null,
    },
    "macro.dbt.generate_schema_name_for_env": {
      name: "generate_schema_name_for_env",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/get_custom_name/get_custom_schema.sql",
      original_file_path: "macros/get_custom_name/get_custom_schema.sql",
      unique_id: "macro.dbt.generate_schema_name_for_env",
      macro_sql:
        "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.731844,
      supported_languages: null,
    },
    "macro.dbt.generate_database_name": {
      name: "generate_database_name",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/get_custom_name/get_custom_database.sql",
      original_file_path: "macros/get_custom_name/get_custom_database.sql",
      unique_id: "macro.dbt.generate_database_name",
      macro_sql:
        "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.default__generate_database_name"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7324557,
      supported_languages: null,
    },
    "macro.dbt.default__generate_database_name": {
      name: "default__generate_database_name",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/get_custom_name/get_custom_database.sql",
      original_file_path: "macros/get_custom_name/get_custom_database.sql",
      unique_id: "macro.dbt.default__generate_database_name",
      macro_sql:
        "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.732888,
      supported_languages: null,
    },
    "macro.dbt.generate_alias_name": {
      name: "generate_alias_name",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/get_custom_name/get_custom_alias.sql",
      original_file_path: "macros/get_custom_name/get_custom_alias.sql",
      unique_id: "macro.dbt.generate_alias_name",
      macro_sql:
        "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.default__generate_alias_name"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7335272,
      supported_languages: null,
    },
    "macro.dbt.default__generate_alias_name": {
      name: "default__generate_alias_name",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/get_custom_name/get_custom_alias.sql",
      original_file_path: "macros/get_custom_name/get_custom_alias.sql",
      unique_id: "macro.dbt.default__generate_alias_name",
      macro_sql:
        '{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ "_v" ~ (node.version | replace(".", "_"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7341626,
      supported_languages: null,
    },
    "macro.dbt.resolve_model_name": {
      name: "resolve_model_name",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/python_model/python.sql",
      original_file_path: "macros/python_model/python.sql",
      unique_id: "macro.dbt.resolve_model_name",
      macro_sql:
        "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__resolve_model_name"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7363749,
      supported_languages: null,
    },
    "macro.dbt.default__resolve_model_name": {
      name: "default__resolve_model_name",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/python_model/python.sql",
      original_file_path: "macros/python_model/python.sql",
      unique_id: "macro.dbt.default__resolve_model_name",
      macro_sql:
        "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.736643,
      supported_languages: null,
    },
    "macro.dbt.build_ref_function": {
      name: "build_ref_function",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/python_model/python.sql",
      original_file_path: "macros/python_model/python.sql",
      unique_id: "macro.dbt.build_ref_function",
      macro_sql:
        "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.resolve_model_name"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.737977,
      supported_languages: null,
    },
    "macro.dbt.build_source_function": {
      name: "build_source_function",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/python_model/python.sql",
      original_file_path: "macros/python_model/python.sql",
      unique_id: "macro.dbt.build_source_function",
      macro_sql:
        "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.resolve_model_name"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.738662,
      supported_languages: null,
    },
    "macro.dbt.build_config_dict": {
      name: "build_config_dict",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/python_model/python.sql",
      original_file_path: "macros/python_model/python.sql",
      unique_id: "macro.dbt.build_config_dict",
      macro_sql:
        '{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == "language" -%}\n          {%- set value = "python" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7396476,
      supported_languages: null,
    },
    "macro.dbt.py_script_postfix": {
      name: "py_script_postfix",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/python_model/python.sql",
      original_file_path: "macros/python_model/python.sql",
      unique_id: "macro.dbt.py_script_postfix",
      macro_sql:
        '{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    """dbt.this() or dbt.this.identifier"""\n    database = "{{ this.database }}"\n    schema = "{{ this.schema }}"\n    identifier = "{{ this.identifier }}"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return \'{{ this_relation_name  }}\'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}',
      depends_on: {
        macros: [
          "macro.dbt.build_ref_function",
          "macro.dbt.build_source_function",
          "macro.dbt.build_config_dict",
          "macro.dbt.resolve_model_name",
          "macro.dbt.is_incremental",
          "macro.dbt.py_script_comment",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7404118,
      supported_languages: null,
    },
    "macro.dbt.py_script_comment": {
      name: "py_script_comment",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/python_model/python.sql",
      original_file_path: "macros/python_model/python.sql",
      unique_id: "macro.dbt.py_script_comment",
      macro_sql: "{%macro py_script_comment()%}\n{%endmacro%}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7405427,
      supported_languages: null,
    },
    "macro.dbt.get_fixture_sql": {
      name: "get_fixture_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/unit_test_sql/get_fixture_sql.sql",
      original_file_path: "macros/unit_test_sql/get_fixture_sql.sql",
      unique_id: "macro.dbt.get_fixture_sql",
      macro_sql:
        '{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and \'this\' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error("Not able to get columns for unit test \'" ~ model.name ~ "\' from relation " ~ this ~ " because the relation doesn\'t exist") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast("null", column_type) | trim )}) -%}\n{%- endfor -%}\n\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}',
      depends_on: {
        macros: [
          "macro.dbt.load_relation",
          "macro.dbt.safe_cast",
          "macro.dbt.format_row",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7454498,
      supported_languages: null,
    },
    "macro.dbt.get_expected_sql": {
      name: "get_expected_sql",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/unit_test_sql/get_fixture_sql.sql",
      original_file_path: "macros/unit_test_sql/get_fixture_sql.sql",
      unique_id: "macro.dbt.get_expected_sql",
      macro_sql:
        "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.format_row"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7463927,
      supported_languages: null,
    },
    "macro.dbt.format_row": {
      name: "format_row",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/unit_test_sql/get_fixture_sql.sql",
      original_file_path: "macros/unit_test_sql/get_fixture_sql.sql",
      unique_id: "macro.dbt.format_row",
      macro_sql:
        '\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = "expected output" if model.resource_type == \'unit_test\' else ("\'" ~ model.name ~ "\'") %}\n            {{ exceptions.raise_compiler_error(\n                "Invalid column name: \'" ~ column_name ~ "\' in unit test fixture for " ~ fixture_name ~ "."\n                "\\nAccepted columns for " ~ fixture_name ~ " are: " ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = \'null\' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}',
      depends_on: {
        macros: [
          "macro.dbt.string_literal",
          "macro.dbt.escape_single_quotes",
          "macro.dbt.safe_cast",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7482648,
      supported_languages: null,
    },
    "macro.dbt.right": {
      name: "right",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/right.sql",
      original_file_path: "macros/utils/right.sql",
      unique_id: "macro.dbt.right",
      macro_sql:
        "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__right"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7487574,
      supported_languages: null,
    },
    "macro.dbt.default__right": {
      name: "default__right",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/right.sql",
      original_file_path: "macros/utils/right.sql",
      unique_id: "macro.dbt.default__right",
      macro_sql:
        "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.748995,
      supported_languages: null,
    },
    "macro.dbt.cast": {
      name: "cast",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/cast.sql",
      original_file_path: "macros/utils/cast.sql",
      unique_id: "macro.dbt.cast",
      macro_sql:
        "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__cast"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7494402,
      supported_languages: null,
    },
    "macro.dbt.default__cast": {
      name: "default__cast",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/cast.sql",
      original_file_path: "macros/utils/cast.sql",
      unique_id: "macro.dbt.default__cast",
      macro_sql:
        "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7496626,
      supported_languages: null,
    },
    "macro.dbt.bool_or": {
      name: "bool_or",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/bool_or.sql",
      original_file_path: "macros/utils/bool_or.sql",
      unique_id: "macro.dbt.bool_or",
      macro_sql:
        "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__bool_or"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7500544,
      supported_languages: null,
    },
    "macro.dbt.default__bool_or": {
      name: "default__bool_or",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/bool_or.sql",
      original_file_path: "macros/utils/bool_or.sql",
      unique_id: "macro.dbt.default__bool_or",
      macro_sql:
        "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.750245,
      supported_languages: null,
    },
    "macro.dbt.get_powers_of_two": {
      name: "get_powers_of_two",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/generate_series.sql",
      original_file_path: "macros/utils/generate_series.sql",
      unique_id: "macro.dbt.get_powers_of_two",
      macro_sql:
        "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_powers_of_two"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7514734,
      supported_languages: null,
    },
    "macro.dbt.default__get_powers_of_two": {
      name: "default__get_powers_of_two",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/generate_series.sql",
      original_file_path: "macros/utils/generate_series.sql",
      unique_id: "macro.dbt.default__get_powers_of_two",
      macro_sql:
        '{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error("upper bound must be positive") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.752315,
      supported_languages: null,
    },
    "macro.dbt.generate_series": {
      name: "generate_series",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/generate_series.sql",
      original_file_path: "macros/utils/generate_series.sql",
      unique_id: "macro.dbt.generate_series",
      macro_sql:
        "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__generate_series"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.752634,
      supported_languages: null,
    },
    "macro.dbt.default__generate_series": {
      name: "default__generate_series",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/generate_series.sql",
      original_file_path: "macros/utils/generate_series.sql",
      unique_id: "macro.dbt.default__generate_series",
      macro_sql:
        "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.get_powers_of_two"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7535186,
      supported_languages: null,
    },
    "macro.dbt.safe_cast": {
      name: "safe_cast",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/safe_cast.sql",
      original_file_path: "macros/utils/safe_cast.sql",
      unique_id: "macro.dbt.safe_cast",
      macro_sql:
        "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__safe_cast"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.754004,
      supported_languages: null,
    },
    "macro.dbt.default__safe_cast": {
      name: "default__safe_cast",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/safe_cast.sql",
      original_file_path: "macros/utils/safe_cast.sql",
      unique_id: "macro.dbt.default__safe_cast",
      macro_sql:
        "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7542522,
      supported_languages: null,
    },
    "macro.dbt.listagg": {
      name: "listagg",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/listagg.sql",
      original_file_path: "macros/utils/listagg.sql",
      unique_id: "macro.dbt.listagg",
      macro_sql:
        "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__listagg"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.755206,
      supported_languages: null,
    },
    "macro.dbt.default__listagg": {
      name: "default__listagg",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/listagg.sql",
      original_file_path: "macros/utils/listagg.sql",
      unique_id: "macro.dbt.default__listagg",
      macro_sql:
        "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7559068,
      supported_languages: null,
    },
    "macro.dbt.array_construct": {
      name: "array_construct",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/array_construct.sql",
      original_file_path: "macros/utils/array_construct.sql",
      unique_id: "macro.dbt.array_construct",
      macro_sql:
        "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__array_construct"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7565157,
      supported_languages: null,
    },
    "macro.dbt.default__array_construct": {
      name: "default__array_construct",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/array_construct.sql",
      original_file_path: "macros/utils/array_construct.sql",
      unique_id: "macro.dbt.default__array_construct",
      macro_sql:
        "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7569375,
      supported_languages: null,
    },
    "macro.dbt.dateadd": {
      name: "dateadd",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/dateadd.sql",
      original_file_path: "macros/utils/dateadd.sql",
      unique_id: "macro.dbt.dateadd",
      macro_sql:
        "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__dateadd"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7574775,
      supported_languages: null,
    },
    "macro.dbt.default__dateadd": {
      name: "default__dateadd",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/dateadd.sql",
      original_file_path: "macros/utils/dateadd.sql",
      unique_id: "macro.dbt.default__dateadd",
      macro_sql:
        "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7577596,
      supported_languages: null,
    },
    "macro.dbt.position": {
      name: "position",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/position.sql",
      original_file_path: "macros/utils/position.sql",
      unique_id: "macro.dbt.position",
      macro_sql:
        "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__position"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7582214,
      supported_languages: null,
    },
    "macro.dbt.default__position": {
      name: "default__position",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/position.sql",
      original_file_path: "macros/utils/position.sql",
      unique_id: "macro.dbt.default__position",
      macro_sql:
        "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7584584,
      supported_languages: null,
    },
    "macro.dbt.datediff": {
      name: "datediff",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/datediff.sql",
      original_file_path: "macros/utils/datediff.sql",
      unique_id: "macro.dbt.datediff",
      macro_sql:
        "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__datediff"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7589848,
      supported_languages: null,
    },
    "macro.dbt.default__datediff": {
      name: "default__datediff",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/datediff.sql",
      original_file_path: "macros/utils/datediff.sql",
      unique_id: "macro.dbt.default__datediff",
      macro_sql:
        "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7592876,
      supported_languages: null,
    },
    "macro.dbt.array_append": {
      name: "array_append",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/array_append.sql",
      original_file_path: "macros/utils/array_append.sql",
      unique_id: "macro.dbt.array_append",
      macro_sql:
        "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__array_append"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.75974,
      supported_languages: null,
    },
    "macro.dbt.default__array_append": {
      name: "default__array_append",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/array_append.sql",
      original_file_path: "macros/utils/array_append.sql",
      unique_id: "macro.dbt.default__array_append",
      macro_sql:
        "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.759975,
      supported_languages: null,
    },
    "macro.dbt.get_intervals_between": {
      name: "get_intervals_between",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/date_spine.sql",
      original_file_path: "macros/utils/date_spine.sql",
      unique_id: "macro.dbt.get_intervals_between",
      macro_sql:
        "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.default__get_intervals_between"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7610333,
      supported_languages: null,
    },
    "macro.dbt.default__get_intervals_between": {
      name: "default__get_intervals_between",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/date_spine.sql",
      original_file_path: "macros/utils/date_spine.sql",
      unique_id: "macro.dbt.default__get_intervals_between",
      macro_sql:
        "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.statement", "macro.dbt.datediff"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7620351,
      supported_languages: null,
    },
    "macro.dbt.date_spine": {
      name: "date_spine",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/date_spine.sql",
      original_file_path: "macros/utils/date_spine.sql",
      unique_id: "macro.dbt.date_spine",
      macro_sql:
        "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.default__date_spine"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7624164,
      supported_languages: null,
    },
    "macro.dbt.default__date_spine": {
      name: "default__date_spine",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/date_spine.sql",
      original_file_path: "macros/utils/date_spine.sql",
      unique_id: "macro.dbt.default__date_spine",
      macro_sql:
        '{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        "day",\n        "to_date(\'01/01/2016\', \'mm/dd/yyyy\')",\n        "dbt.dateadd(week, 1, current_date)"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    "row_number() over (order by 1) - 1",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}',
      depends_on: {
        macros: [
          "macro.dbt.generate_series",
          "macro.dbt.get_intervals_between",
          "macro.dbt.dateadd",
        ],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7630095,
      supported_languages: null,
    },
    "macro.dbt.array_concat": {
      name: "array_concat",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/array_concat.sql",
      original_file_path: "macros/utils/array_concat.sql",
      unique_id: "macro.dbt.array_concat",
      macro_sql:
        "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__array_concat"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.763482,
      supported_languages: null,
    },
    "macro.dbt.default__array_concat": {
      name: "default__array_concat",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/array_concat.sql",
      original_file_path: "macros/utils/array_concat.sql",
      unique_id: "macro.dbt.default__array_concat",
      macro_sql:
        "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.763713,
      supported_languages: null,
    },
    "macro.dbt.last_day": {
      name: "last_day",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/last_day.sql",
      original_file_path: "macros/utils/last_day.sql",
      unique_id: "macro.dbt.last_day",
      macro_sql:
        "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__last_day"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7642496,
      supported_languages: null,
    },
    "macro.dbt.default_last_day": {
      name: "default_last_day",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/last_day.sql",
      original_file_path: "macros/utils/last_day.sql",
      unique_id: "macro.dbt.default_last_day",
      macro_sql:
        "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n",
      depends_on: { macros: ["macro.dbt.dateadd", "macro.dbt.date_trunc"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.764687,
      supported_languages: null,
    },
    "macro.dbt.default__last_day": {
      name: "default__last_day",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/last_day.sql",
      original_file_path: "macros/utils/last_day.sql",
      unique_id: "macro.dbt.default__last_day",
      macro_sql:
        "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.default_last_day"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7649326,
      supported_languages: null,
    },
    "macro.dbt.string_literal": {
      name: "string_literal",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/literal.sql",
      original_file_path: "macros/utils/literal.sql",
      unique_id: "macro.dbt.string_literal",
      macro_sql:
        "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__string_literal"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7653334,
      supported_languages: null,
    },
    "macro.dbt.default__string_literal": {
      name: "default__string_literal",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/literal.sql",
      original_file_path: "macros/utils/literal.sql",
      unique_id: "macro.dbt.default__string_literal",
      macro_sql:
        "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.765519,
      supported_languages: null,
    },
    "macro.dbt.type_string": {
      name: "type_string",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/data_types.sql",
      original_file_path: "macros/utils/data_types.sql",
      unique_id: "macro.dbt.type_string",
      macro_sql:
        "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      depends_on: { macros: ["macro.dbt.default__type_string"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7670217,
      supported_languages: null,
    },
    "macro.dbt.default__type_string": {
      name: "default__type_string",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/data_types.sql",
      original_file_path: "macros/utils/data_types.sql",
      unique_id: "macro.dbt.default__type_string",
      macro_sql:
        '{% macro default__type_string() %}\n    {{ return(api.Column.translate_type("string")) }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.767313,
      supported_languages: null,
    },
    "macro.dbt.type_timestamp": {
      name: "type_timestamp",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/data_types.sql",
      original_file_path: "macros/utils/data_types.sql",
      unique_id: "macro.dbt.type_timestamp",
      macro_sql:
        "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      depends_on: { macros: ["macro.dbt.default__type_timestamp"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.767591,
      supported_languages: null,
    },
    "macro.dbt.default__type_timestamp": {
      name: "default__type_timestamp",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/data_types.sql",
      original_file_path: "macros/utils/data_types.sql",
      unique_id: "macro.dbt.default__type_timestamp",
      macro_sql:
        '{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type("timestamp")) }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.767845,
      supported_languages: null,
    },
    "macro.dbt.type_float": {
      name: "type_float",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/data_types.sql",
      original_file_path: "macros/utils/data_types.sql",
      unique_id: "macro.dbt.type_float",
      macro_sql:
        "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      depends_on: { macros: ["macro.dbt.default__type_float"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.768114,
      supported_languages: null,
    },
    "macro.dbt.default__type_float": {
      name: "default__type_float",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/data_types.sql",
      original_file_path: "macros/utils/data_types.sql",
      unique_id: "macro.dbt.default__type_float",
      macro_sql:
        '{% macro default__type_float() %}\n    {{ return(api.Column.translate_type("float")) }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7683702,
      supported_languages: null,
    },
    "macro.dbt.type_numeric": {
      name: "type_numeric",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/data_types.sql",
      original_file_path: "macros/utils/data_types.sql",
      unique_id: "macro.dbt.type_numeric",
      macro_sql:
        "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      depends_on: { macros: ["macro.dbt.default__type_numeric"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.768643,
      supported_languages: null,
    },
    "macro.dbt.default__type_numeric": {
      name: "default__type_numeric",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/data_types.sql",
      original_file_path: "macros/utils/data_types.sql",
      unique_id: "macro.dbt.default__type_numeric",
      macro_sql:
        '{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type("numeric", 28, 6)) }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7689364,
      supported_languages: null,
    },
    "macro.dbt.type_bigint": {
      name: "type_bigint",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/data_types.sql",
      original_file_path: "macros/utils/data_types.sql",
      unique_id: "macro.dbt.type_bigint",
      macro_sql:
        "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      depends_on: { macros: ["macro.dbt.default__type_bigint"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7692096,
      supported_languages: null,
    },
    "macro.dbt.default__type_bigint": {
      name: "default__type_bigint",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/data_types.sql",
      original_file_path: "macros/utils/data_types.sql",
      unique_id: "macro.dbt.default__type_bigint",
      macro_sql:
        '{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type("bigint")) }}\n{% endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.769464,
      supported_languages: null,
    },
    "macro.dbt.type_int": {
      name: "type_int",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/data_types.sql",
      original_file_path: "macros/utils/data_types.sql",
      unique_id: "macro.dbt.type_int",
      macro_sql:
        "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      depends_on: { macros: ["macro.dbt.default__type_int"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7697356,
      supported_languages: null,
    },
    "macro.dbt.default__type_int": {
      name: "default__type_int",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/data_types.sql",
      original_file_path: "macros/utils/data_types.sql",
      unique_id: "macro.dbt.default__type_int",
      macro_sql:
        '{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type("integer")) }}\n{%- endmacro -%}\n\n',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.769983,
      supported_languages: null,
    },
    "macro.dbt.type_boolean": {
      name: "type_boolean",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/data_types.sql",
      original_file_path: "macros/utils/data_types.sql",
      unique_id: "macro.dbt.type_boolean",
      macro_sql:
        "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      depends_on: { macros: ["macro.dbt.default__type_boolean"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7702527,
      supported_languages: null,
    },
    "macro.dbt.default__type_boolean": {
      name: "default__type_boolean",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/data_types.sql",
      original_file_path: "macros/utils/data_types.sql",
      unique_id: "macro.dbt.default__type_boolean",
      macro_sql:
        '{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type("boolean")) }}\n{%- endmacro -%}\n\n',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7704978,
      supported_languages: null,
    },
    "macro.dbt.replace": {
      name: "replace",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/replace.sql",
      original_file_path: "macros/utils/replace.sql",
      unique_id: "macro.dbt.replace",
      macro_sql:
        "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__replace"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.771026,
      supported_languages: null,
    },
    "macro.dbt.default__replace": {
      name: "default__replace",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/replace.sql",
      original_file_path: "macros/utils/replace.sql",
      unique_id: "macro.dbt.default__replace",
      macro_sql:
        "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.771337,
      supported_languages: null,
    },
    "macro.dbt.hash": {
      name: "hash",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/hash.sql",
      original_file_path: "macros/utils/hash.sql",
      unique_id: "macro.dbt.hash",
      macro_sql:
        "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__hash"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7717683,
      supported_languages: null,
    },
    "macro.dbt.default__hash": {
      name: "default__hash",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/hash.sql",
      original_file_path: "macros/utils/hash.sql",
      unique_id: "macro.dbt.default__hash",
      macro_sql:
        "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.77205,
      supported_languages: null,
    },
    "macro.dbt.any_value": {
      name: "any_value",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/any_value.sql",
      original_file_path: "macros/utils/any_value.sql",
      unique_id: "macro.dbt.any_value",
      macro_sql:
        "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__any_value"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.772452,
      supported_languages: null,
    },
    "macro.dbt.default__any_value": {
      name: "default__any_value",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/any_value.sql",
      original_file_path: "macros/utils/any_value.sql",
      unique_id: "macro.dbt.default__any_value",
      macro_sql:
        "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7726467,
      supported_languages: null,
    },
    "macro.dbt.cast_bool_to_text": {
      name: "cast_bool_to_text",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/cast_bool_to_text.sql",
      original_file_path: "macros/utils/cast_bool_to_text.sql",
      unique_id: "macro.dbt.cast_bool_to_text",
      macro_sql:
        "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__cast_bool_to_text"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7730422,
      supported_languages: null,
    },
    "macro.dbt.default__cast_bool_to_text": {
      name: "default__cast_bool_to_text",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/cast_bool_to_text.sql",
      original_file_path: "macros/utils/cast_bool_to_text.sql",
      unique_id: "macro.dbt.default__cast_bool_to_text",
      macro_sql:
        "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7733111,
      supported_languages: null,
    },
    "macro.dbt.except": {
      name: "except",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/except.sql",
      original_file_path: "macros/utils/except.sql",
      unique_id: "macro.dbt.except",
      macro_sql:
        "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__except"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7736707,
      supported_languages: null,
    },
    "macro.dbt.default__except": {
      name: "default__except",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/except.sql",
      original_file_path: "macros/utils/except.sql",
      unique_id: "macro.dbt.default__except",
      macro_sql:
        "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7738268,
      supported_languages: null,
    },
    "macro.dbt.split_part": {
      name: "split_part",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/split_part.sql",
      original_file_path: "macros/utils/split_part.sql",
      unique_id: "macro.dbt.split_part",
      macro_sql:
        "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__split_part"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7746012,
      supported_languages: null,
    },
    "macro.dbt.default__split_part": {
      name: "default__split_part",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/split_part.sql",
      original_file_path: "macros/utils/split_part.sql",
      unique_id: "macro.dbt.default__split_part",
      macro_sql:
        "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7749262,
      supported_languages: null,
    },
    "macro.dbt._split_part_negative": {
      name: "_split_part_negative",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/split_part.sql",
      original_file_path: "macros/utils/split_part.sql",
      unique_id: "macro.dbt._split_part_negative",
      macro_sql:
        "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7753384,
      supported_languages: null,
    },
    "macro.dbt.escape_single_quotes": {
      name: "escape_single_quotes",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/escape_single_quotes.sql",
      original_file_path: "macros/utils/escape_single_quotes.sql",
      unique_id: "macro.dbt.escape_single_quotes",
      macro_sql:
        "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}",
      depends_on: {
        macros: ["macro.dbt_bigquery.bigquery__escape_single_quotes"],
      },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7757747,
      supported_languages: null,
    },
    "macro.dbt.default__escape_single_quotes": {
      name: "default__escape_single_quotes",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/escape_single_quotes.sql",
      original_file_path: "macros/utils/escape_single_quotes.sql",
      unique_id: "macro.dbt.default__escape_single_quotes",
      macro_sql:
        '{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace("\'","\'\'") }}\n{%- endmacro %}',
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7761512,
      supported_languages: null,
    },
    "macro.dbt.date": {
      name: "date",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/date.sql",
      original_file_path: "macros/utils/date.sql",
      unique_id: "macro.dbt.date",
      macro_sql:
        "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__date"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7766862,
      supported_languages: null,
    },
    "macro.dbt.default__date": {
      name: "default__date",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/date.sql",
      original_file_path: "macros/utils/date.sql",
      unique_id: "macro.dbt.default__date",
      macro_sql:
        "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7772386,
      supported_languages: null,
    },
    "macro.dbt.date_trunc": {
      name: "date_trunc",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/date_trunc.sql",
      original_file_path: "macros/utils/date_trunc.sql",
      unique_id: "macro.dbt.date_trunc",
      macro_sql:
        "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__date_trunc"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.777693,
      supported_languages: null,
    },
    "macro.dbt.default__date_trunc": {
      name: "default__date_trunc",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/date_trunc.sql",
      original_file_path: "macros/utils/date_trunc.sql",
      unique_id: "macro.dbt.default__date_trunc",
      macro_sql:
        "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7779214,
      supported_languages: null,
    },
    "macro.dbt.length": {
      name: "length",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/length.sql",
      original_file_path: "macros/utils/length.sql",
      unique_id: "macro.dbt.length",
      macro_sql:
        "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt.default__length"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.778338,
      supported_languages: null,
    },
    "macro.dbt.default__length": {
      name: "default__length",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/length.sql",
      original_file_path: "macros/utils/length.sql",
      unique_id: "macro.dbt.default__length",
      macro_sql:
        "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7785268,
      supported_languages: null,
    },
    "macro.dbt.intersect": {
      name: "intersect",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/intersect.sql",
      original_file_path: "macros/utils/intersect.sql",
      unique_id: "macro.dbt.intersect",
      macro_sql:
        "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__intersect"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7788951,
      supported_languages: null,
    },
    "macro.dbt.default__intersect": {
      name: "default__intersect",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/intersect.sql",
      original_file_path: "macros/utils/intersect.sql",
      unique_id: "macro.dbt.default__intersect",
      macro_sql:
        "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7790356,
      supported_languages: null,
    },
    "macro.dbt.concat": {
      name: "concat",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/concat.sql",
      original_file_path: "macros/utils/concat.sql",
      unique_id: "macro.dbt.concat",
      macro_sql:
        "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}",
      depends_on: { macros: ["macro.dbt.default__concat"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7794576,
      supported_languages: null,
    },
    "macro.dbt.default__concat": {
      name: "default__concat",
      resource_type: "macro",
      package_name: "dbt",
      path: "macros/utils/concat.sql",
      original_file_path: "macros/utils/concat.sql",
      unique_id: "macro.dbt.default__concat",
      macro_sql:
        "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
      depends_on: { macros: [] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7796717,
      supported_languages: null,
    },
    "macro.dbt.test_unique": {
      name: "test_unique",
      resource_type: "macro",
      package_name: "dbt",
      path: "tests/generic/builtin.sql",
      original_file_path: "tests/generic/builtin.sql",
      unique_id: "macro.dbt.test_unique",
      macro_sql:
        "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
      depends_on: { macros: ["macro.dbt_bigquery.bigquery__test_unique"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7804868,
      supported_languages: null,
    },
    "macro.dbt.test_not_null": {
      name: "test_not_null",
      resource_type: "macro",
      package_name: "dbt",
      path: "tests/generic/builtin.sql",
      original_file_path: "tests/generic/builtin.sql",
      unique_id: "macro.dbt.test_not_null",
      macro_sql:
        "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
      depends_on: { macros: ["macro.dbt.default__test_not_null"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7809103,
      supported_languages: null,
    },
    "macro.dbt.test_accepted_values": {
      name: "test_accepted_values",
      resource_type: "macro",
      package_name: "dbt",
      path: "tests/generic/builtin.sql",
      original_file_path: "tests/generic/builtin.sql",
      unique_id: "macro.dbt.test_accepted_values",
      macro_sql:
        "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
      depends_on: { macros: ["macro.dbt.default__test_accepted_values"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7814255,
      supported_languages: null,
    },
    "macro.dbt.test_relationships": {
      name: "test_relationships",
      resource_type: "macro",
      package_name: "dbt",
      path: "tests/generic/builtin.sql",
      original_file_path: "tests/generic/builtin.sql",
      unique_id: "macro.dbt.test_relationships",
      macro_sql:
        "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
      depends_on: { macros: ["macro.dbt.default__test_relationships"] },
      description: "",
      meta: {},
      docs: { show: true, node_color: null },
      patch_path: null,
      arguments: [],
      created_at: 1719978674.7819028,
      supported_languages: null,
    },
  },
  docs: {
    "doc.dbt.__overview__": {
      name: "__overview__",
      resource_type: "doc",
      package_name: "dbt",
      path: "overview.md",
      original_file_path: "docs/overview.md",
      unique_id: "doc.dbt.__overview__",
      block_contents:
        "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion",
    },
  },
  exposures: {},
  metrics: {},
  groups: {},
  selectors: {},
  disabled: {
    "source.opensource_observer.playground.arbitrum_deployers": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "arbitrum_deployers",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.arbitrum_deployers",
        fqn: ["opensource_observer", "playground", "arbitrum_deployers"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "stg_arbitrum__deployers",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`stg_arbitrum__deployers`",
        created_at: 1719978676.4000738,
      },
    ],
    "source.opensource_observer.playground.base_traces": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "base_traces",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.base_traces",
        fqn: ["opensource_observer", "playground", "base_traces"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "int_base_traces",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`int_base_traces`",
        created_at: 1719978676.4002469,
      },
    ],
    "source.opensource_observer.playground.base_transactions": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "base_transactions",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.base_transactions",
        fqn: ["opensource_observer", "playground", "base_transactions"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "int_base_transactions",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`int_base_transactions`",
        created_at: 1719978676.4004061,
      },
    ],
    "source.opensource_observer.playground.base_deployers": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "base_deployers",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.base_deployers",
        fqn: ["opensource_observer", "playground", "base_deployers"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "stg_base__deployers",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`stg_base__deployers`",
        created_at: 1719978676.400564,
      },
    ],
    "source.opensource_observer.playground.ethereum_deployers": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "ethereum_deployers",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.ethereum_deployers",
        fqn: ["opensource_observer", "playground", "ethereum_deployers"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "stg_ethereum__deployers",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`stg_ethereum__deployers`",
        created_at: 1719978676.4007185,
      },
    ],
    "source.opensource_observer.playground.frax_traces": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "frax_traces",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.frax_traces",
        fqn: ["opensource_observer", "playground", "frax_traces"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "int_frax_traces",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`int_frax_traces`",
        created_at: 1719978676.4008727,
      },
    ],
    "source.opensource_observer.playground.frax_transactions": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "frax_transactions",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.frax_transactions",
        fqn: ["opensource_observer", "playground", "frax_transactions"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "int_frax_transactions",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`int_frax_transactions`",
        created_at: 1719978676.4010231,
      },
    ],
    "source.opensource_observer.playground.frax_deployers": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "frax_deployers",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.frax_deployers",
        fqn: ["opensource_observer", "playground", "frax_deployers"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "stg_frax__deployers",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`stg_frax__deployers`",
        created_at: 1719978676.4011745,
      },
    ],
    "source.opensource_observer.playground.metal_traces": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "metal_traces",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.metal_traces",
        fqn: ["opensource_observer", "playground", "metal_traces"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "int_metal_traces",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`int_metal_traces`",
        created_at: 1719978676.4013252,
      },
    ],
    "source.opensource_observer.playground.metal_transactions": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "metal_transactions",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.metal_transactions",
        fqn: ["opensource_observer", "playground", "metal_transactions"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "int_metal_transactions",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`int_metal_transactions`",
        created_at: 1719978676.4014754,
      },
    ],
    "source.opensource_observer.playground.metal_deployers": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "metal_deployers",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.metal_deployers",
        fqn: ["opensource_observer", "playground", "metal_deployers"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "stg_metal__deployers",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`stg_metal__deployers`",
        created_at: 1719978676.4016259,
      },
    ],
    "source.opensource_observer.playground.mode_traces": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "mode_traces",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.mode_traces",
        fqn: ["opensource_observer", "playground", "mode_traces"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "int_mode_traces",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`int_mode_traces`",
        created_at: 1719978676.4017754,
      },
    ],
    "source.opensource_observer.playground.mode_transactions": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "mode_transactions",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.mode_transactions",
        fqn: ["opensource_observer", "playground", "mode_transactions"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "int_mode_transactions",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`int_mode_transactions`",
        created_at: 1719978676.4019265,
      },
    ],
    "source.opensource_observer.playground.mode_deployers": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "mode_deployers",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.mode_deployers",
        fqn: ["opensource_observer", "playground", "mode_deployers"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "stg_mode__deployers",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`stg_mode__deployers`",
        created_at: 1719978676.4020767,
      },
    ],
    "source.opensource_observer.playground.pgn_traces": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "pgn_traces",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.pgn_traces",
        fqn: ["opensource_observer", "playground", "pgn_traces"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "int_pgn_traces",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`int_pgn_traces`",
        created_at: 1719978676.4022279,
      },
    ],
    "source.opensource_observer.playground.pgn_transactions": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "pgn_transactions",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.pgn_transactions",
        fqn: ["opensource_observer", "playground", "pgn_transactions"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "int_pgn_transactions",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`int_pgn_transactions`",
        created_at: 1719978676.4023798,
      },
    ],
    "source.opensource_observer.playground.pgn_deployers": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "pgn_deployers",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.pgn_deployers",
        fqn: ["opensource_observer", "playground", "pgn_deployers"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "stg_pgn__deployers",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`stg_pgn__deployers`",
        created_at: 1719978676.4025357,
      },
    ],
    "source.opensource_observer.playground.optimism_traces": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "optimism_traces",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.optimism_traces",
        fqn: ["opensource_observer", "playground", "optimism_traces"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "int_optimism_traces",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`int_optimism_traces`",
        created_at: 1719978676.4026887,
      },
    ],
    "source.opensource_observer.playground.superchain_optimism_traces": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "superchain_optimism_traces",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id:
          "source.opensource_observer.playground.superchain_optimism_traces",
        fqn: [
          "opensource_observer",
          "playground",
          "superchain_optimism_traces",
        ],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "int_optimism_traces",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`int_optimism_traces`",
        created_at: 1719978676.4028544,
      },
    ],
    "source.opensource_observer.playground.optimism_transactions": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "optimism_transactions",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id:
          "source.opensource_observer.playground.optimism_transactions",
        fqn: ["opensource_observer", "playground", "optimism_transactions"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "int_optimism_transactions",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`int_optimism_transactions`",
        created_at: 1719978676.4030118,
      },
    ],
    "source.opensource_observer.playground.optimism_deployers": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "optimism_deployers",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.optimism_deployers",
        fqn: ["opensource_observer", "playground", "optimism_deployers"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "stg_optimism__deployers",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`stg_optimism__deployers`",
        created_at: 1719978676.4031832,
      },
    ],
    "source.opensource_observer.playground.zora_traces": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "zora_traces",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.zora_traces",
        fqn: ["opensource_observer", "playground", "zora_traces"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "int_zora_traces",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`int_zora_traces`",
        created_at: 1719978676.4033384,
      },
    ],
    "source.opensource_observer.playground.zora_transactions": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "zora_transactions",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.zora_transactions",
        fqn: ["opensource_observer", "playground", "zora_transactions"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "int_zora_transactions",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`int_zora_transactions`",
        created_at: 1719978676.4034905,
      },
    ],
    "source.opensource_observer.playground.zora_deployers": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "zora_deployers",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.zora_deployers",
        fqn: ["opensource_observer", "playground", "zora_deployers"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "stg_zora__deployers",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`stg_zora__deployers`",
        created_at: 1719978676.4036436,
      },
    ],
    "source.opensource_observer.playground.github_archive_events": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "github_archive_events",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id:
          "source.opensource_observer.playground.github_archive_events",
        fqn: ["opensource_observer", "playground", "github_archive_events"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "stg_github__events",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`stg_github__events`",
        created_at: 1719978676.403797,
      },
    ],
    "source.opensource_observer.playground.ossd_projects": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "ossd_projects",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.ossd_projects",
        fqn: ["opensource_observer", "playground", "ossd_projects"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "base_playground__ossd_projects",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`base_playground__ossd_projects`",
        created_at: 1719978676.4039476,
      },
    ],
    "source.opensource_observer.playground.ossd_collections": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "ossd_collections",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.ossd_collections",
        fqn: ["opensource_observer", "playground", "ossd_collections"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "base_playground__ossd_collections",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`base_playground__ossd_collections`",
        created_at: 1719978676.4041026,
      },
    ],
    "source.opensource_observer.playground.ossd_repositories": [
      {
        database: "opensource-observer",
        schema: "oso_base_playground",
        name: "ossd_repositories",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/playground_sources.yml",
        original_file_path: "warehouse/dbt/models/playground_sources.yml",
        unique_id: "source.opensource_observer.playground.ossd_repositories",
        fqn: ["opensource_observer", "playground", "ossd_repositories"],
        source_name: "playground",
        source_description: "",
        loader: "",
        identifier: "base_playground__ossd_repositories",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['playground', 'dev'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso_base_playground`.`base_playground__ossd_repositories`",
        created_at: 1719978676.4042528,
      },
    ],
    "source.opensource_observer.base_playground.arbitrum_deployers": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "arbitrum_deployers",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id:
          "source.opensource_observer.base_playground.arbitrum_deployers",
        fqn: ["opensource_observer", "base_playground", "arbitrum_deployers"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "stg_arbitrum__deployers",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`stg_arbitrum__deployers`",
        created_at: 1719978676.4073076,
      },
    ],
    "source.opensource_observer.base_playground.base_traces": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "base_traces",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id: "source.opensource_observer.base_playground.base_traces",
        fqn: ["opensource_observer", "base_playground", "base_traces"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "int_base_traces",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`int_base_traces`",
        created_at: 1719978676.4074612,
      },
    ],
    "source.opensource_observer.base_playground.base_transactions": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "base_transactions",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id:
          "source.opensource_observer.base_playground.base_transactions",
        fqn: ["opensource_observer", "base_playground", "base_transactions"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "int_base_transactions",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`int_base_transactions`",
        created_at: 1719978676.4076114,
      },
    ],
    "source.opensource_observer.base_playground.base_deployers": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "base_deployers",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id: "source.opensource_observer.base_playground.base_deployers",
        fqn: ["opensource_observer", "base_playground", "base_deployers"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "stg_base__deployers",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`stg_base__deployers`",
        created_at: 1719978676.4077594,
      },
    ],
    "source.opensource_observer.base_playground.ethereum_deployers": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "ethereum_deployers",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id:
          "source.opensource_observer.base_playground.ethereum_deployers",
        fqn: ["opensource_observer", "base_playground", "ethereum_deployers"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "stg_ethereum__deployers",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`stg_ethereum__deployers`",
        created_at: 1719978676.407909,
      },
    ],
    "source.opensource_observer.base_playground.frax_traces": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "frax_traces",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id: "source.opensource_observer.base_playground.frax_traces",
        fqn: ["opensource_observer", "base_playground", "frax_traces"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "int_frax_traces",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`int_frax_traces`",
        created_at: 1719978676.4080563,
      },
    ],
    "source.opensource_observer.base_playground.frax_transactions": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "frax_transactions",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id:
          "source.opensource_observer.base_playground.frax_transactions",
        fqn: ["opensource_observer", "base_playground", "frax_transactions"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "int_frax_transactions",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`int_frax_transactions`",
        created_at: 1719978676.4082024,
      },
    ],
    "source.opensource_observer.base_playground.frax_deployers": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "frax_deployers",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id: "source.opensource_observer.base_playground.frax_deployers",
        fqn: ["opensource_observer", "base_playground", "frax_deployers"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "stg_frax__deployers",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`stg_frax__deployers`",
        created_at: 1719978676.408351,
      },
    ],
    "source.opensource_observer.base_playground.metal_traces": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "metal_traces",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id: "source.opensource_observer.base_playground.metal_traces",
        fqn: ["opensource_observer", "base_playground", "metal_traces"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "int_metal_traces",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`int_metal_traces`",
        created_at: 1719978676.4085007,
      },
    ],
    "source.opensource_observer.base_playground.metal_transactions": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "metal_transactions",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id:
          "source.opensource_observer.base_playground.metal_transactions",
        fqn: ["opensource_observer", "base_playground", "metal_transactions"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "int_metal_transactions",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`int_metal_transactions`",
        created_at: 1719978676.4086492,
      },
    ],
    "source.opensource_observer.base_playground.metal_deployers": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "metal_deployers",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id: "source.opensource_observer.base_playground.metal_deployers",
        fqn: ["opensource_observer", "base_playground", "metal_deployers"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "stg_metal__deployers",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`stg_metal__deployers`",
        created_at: 1719978676.4087968,
      },
    ],
    "source.opensource_observer.base_playground.mode_traces": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "mode_traces",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id: "source.opensource_observer.base_playground.mode_traces",
        fqn: ["opensource_observer", "base_playground", "mode_traces"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "int_mode_traces",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`int_mode_traces`",
        created_at: 1719978676.4089437,
      },
    ],
    "source.opensource_observer.base_playground.mode_transactions": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "mode_transactions",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id:
          "source.opensource_observer.base_playground.mode_transactions",
        fqn: ["opensource_observer", "base_playground", "mode_transactions"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "int_mode_transactions",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`int_mode_transactions`",
        created_at: 1719978676.4090908,
      },
    ],
    "source.opensource_observer.base_playground.mode_deployers": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "mode_deployers",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id: "source.opensource_observer.base_playground.mode_deployers",
        fqn: ["opensource_observer", "base_playground", "mode_deployers"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "stg_mode__deployers",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`stg_mode__deployers`",
        created_at: 1719978676.4092386,
      },
    ],
    "source.opensource_observer.base_playground.pgn_traces": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "pgn_traces",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id: "source.opensource_observer.base_playground.pgn_traces",
        fqn: ["opensource_observer", "base_playground", "pgn_traces"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "int_pgn_traces",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`int_pgn_traces`",
        created_at: 1719978676.4093847,
      },
    ],
    "source.opensource_observer.base_playground.pgn_transactions": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "pgn_transactions",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id:
          "source.opensource_observer.base_playground.pgn_transactions",
        fqn: ["opensource_observer", "base_playground", "pgn_transactions"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "int_pgn_transactions",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`int_pgn_transactions`",
        created_at: 1719978676.4095683,
      },
    ],
    "source.opensource_observer.base_playground.pgn_deployers": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "pgn_deployers",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id: "source.opensource_observer.base_playground.pgn_deployers",
        fqn: ["opensource_observer", "base_playground", "pgn_deployers"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "stg_pgn__deployers",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`stg_pgn__deployers`",
        created_at: 1719978676.4097342,
      },
    ],
    "source.opensource_observer.base_playground.optimism_traces": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "optimism_traces",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id: "source.opensource_observer.base_playground.optimism_traces",
        fqn: ["opensource_observer", "base_playground", "optimism_traces"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "int_optimism_traces",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`int_optimism_traces`",
        created_at: 1719978676.4098823,
      },
    ],
    "source.opensource_observer.base_playground.superchain_optimism_traces": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "superchain_optimism_traces",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id:
          "source.opensource_observer.base_playground.superchain_optimism_traces",
        fqn: [
          "opensource_observer",
          "base_playground",
          "superchain_optimism_traces",
        ],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "int_optimism_traces",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`int_optimism_traces`",
        created_at: 1719978676.4100294,
      },
    ],
    "source.opensource_observer.base_playground.optimism_transactions": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "optimism_transactions",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id:
          "source.opensource_observer.base_playground.optimism_transactions",
        fqn: [
          "opensource_observer",
          "base_playground",
          "optimism_transactions",
        ],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "int_optimism_transactions",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso`.`int_optimism_transactions`",
        created_at: 1719978676.410176,
      },
    ],
    "source.opensource_observer.base_playground.optimism_deployers": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "optimism_deployers",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id:
          "source.opensource_observer.base_playground.optimism_deployers",
        fqn: ["opensource_observer", "base_playground", "optimism_deployers"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "stg_optimism__deployers",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`stg_optimism__deployers`",
        created_at: 1719978676.4103236,
      },
    ],
    "source.opensource_observer.base_playground.zora_traces": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "zora_traces",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id: "source.opensource_observer.base_playground.zora_traces",
        fqn: ["opensource_observer", "base_playground", "zora_traces"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "int_zora_traces",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`int_zora_traces`",
        created_at: 1719978676.41049,
      },
    ],
    "source.opensource_observer.base_playground.zora_transactions": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "zora_transactions",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id:
          "source.opensource_observer.base_playground.zora_transactions",
        fqn: ["opensource_observer", "base_playground", "zora_transactions"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "int_zora_transactions",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`int_zora_transactions`",
        created_at: 1719978676.4106433,
      },
    ],
    "source.opensource_observer.base_playground.zora_deployers": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "zora_deployers",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id: "source.opensource_observer.base_playground.zora_deployers",
        fqn: ["opensource_observer", "base_playground", "zora_deployers"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "stg_zora__deployers",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`stg_zora__deployers`",
        created_at: 1719978676.410794,
      },
    ],
    "source.opensource_observer.base_playground.github_archive_events": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "github_archive_events",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id:
          "source.opensource_observer.base_playground.github_archive_events",
        fqn: [
          "opensource_observer",
          "base_playground",
          "github_archive_events",
        ],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "stg_github__events",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name: "`opensource-observer`.`oso`.`stg_github__events`",
        created_at: 1719978676.4109416,
      },
    ],
    "source.opensource_observer.base_playground.ossd_projects": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "ossd_projects",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id: "source.opensource_observer.base_playground.ossd_projects",
        fqn: ["opensource_observer", "base_playground", "ossd_projects"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "base_playground__ossd_projects",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso`.`base_playground__ossd_projects`",
        created_at: 1719978676.4110892,
      },
    ],
    "source.opensource_observer.base_playground.ossd_collections": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "ossd_collections",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id:
          "source.opensource_observer.base_playground.ossd_collections",
        fqn: ["opensource_observer", "base_playground", "ossd_collections"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "base_playground__ossd_collections",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso`.`base_playground__ossd_collections`",
        created_at: 1719978676.4113064,
      },
    ],
    "source.opensource_observer.base_playground.ossd_repositories": [
      {
        database: "opensource-observer",
        schema: "oso",
        name: "ossd_repositories",
        resource_type: "source",
        package_name: "opensource_observer",
        path: "warehouse/dbt/models/base_playground_sources.yml",
        original_file_path: "warehouse/dbt/models/base_playground_sources.yml",
        unique_id:
          "source.opensource_observer.base_playground.ossd_repositories",
        fqn: ["opensource_observer", "base_playground", "ossd_repositories"],
        source_name: "base_playground",
        source_description: "",
        loader: "",
        identifier: "base_playground__ossd_repositories",
        quoting: {
          database: null,
          schema: null,
          identifier: null,
          column: null,
        },
        loaded_at_field: null,
        freshness: {
          warn_after: { count: null, period: null },
          error_after: { count: null, period: null },
          filter: null,
        },
        external: null,
        description: "",
        columns: {},
        meta: {},
        source_meta: {},
        tags: [],
        config: { enabled: false },
        patch_path: null,
        unrendered_config: {
          enabled: "{{ target.name in ['base_playground'] | as_bool }}",
        },
        relation_name:
          "`opensource-observer`.`oso`.`base_playground__ossd_repositories`",
        created_at: 1719978676.4114604,
      },
    ],
  },
  parent_map: {
    "model.opensource_observer.projects_by_collection_v1": [
      "model.opensource_observer.int_collections",
      "model.opensource_observer.int_projects_by_collection",
    ],
    "model.opensource_observer.users_v1": [
      "model.opensource_observer.int_users",
    ],
    "model.opensource_observer.artifacts_v1": [
      "model.opensource_observer.int_artifacts",
    ],
    "model.opensource_observer.projects_v1": [
      "model.opensource_observer.int_projects",
    ],
    "model.opensource_observer.collections_v1": [
      "model.opensource_observer.int_collections",
    ],
    "model.opensource_observer.artifacts_by_project_v1": [
      "model.opensource_observer.int_artifacts_by_project",
    ],
    "model.opensource_observer.contracts_v0": [
      "model.opensource_observer.int_derived_contracts",
    ],
    "model.opensource_observer.onchain_metrics_by_project_v1": [
      "model.opensource_observer.int_onchain_metrics_by_project",
    ],
    "model.opensource_observer.code_metrics_by_project_v1": [
      "model.opensource_observer.int_code_metrics_by_project",
    ],
    "model.opensource_observer.rf4_repo_stats_by_project": [
      "model.opensource_observer.int_repo_metrics_by_project",
      "model.opensource_observer.rf4_repos_by_app",
    ],
    "model.opensource_observer.rf4_4337_events": [
      "model.opensource_observer.artifacts_by_project_v1",
      "model.opensource_observer.stg_base__proxies",
      "model.opensource_observer.stg_frax__proxies",
      "model.opensource_observer.stg_metal__proxies",
      "model.opensource_observer.stg_mode__proxies",
      "model.opensource_observer.stg_optimism__proxies",
      "model.opensource_observer.stg_zora__proxies",
    ],
    "model.opensource_observer.rf4_trusted_users": [
      "model.opensource_observer.stg_farcaster__addresses",
      "model.opensource_observer.stg_karma3__globaltrust",
      "model.opensource_observer.stg_optimism__airdrop_addresses",
      "model.opensource_observer.stg_passport__scores",
      "source.opensource_observer.static_data_sources.optimist_nft_holders",
    ],
    "model.opensource_observer.rf4_events_daily_to_project": [
      "model.opensource_observer.artifacts_v1",
      "model.opensource_observer.int_events_to_project",
      "model.opensource_observer.projects_v1",
      "source.opensource_observer.static_data_sources.op_rf4_trusted_addresses",
    ],
    "model.opensource_observer.rf4_impact_metrics_by_project": [
      "model.opensource_observer.projects_v1",
      "model.opensource_observer.rf4_daily_active_addresses",
      "model.opensource_observer.rf4_gas_fees",
      "model.opensource_observer.rf4_monthly_active_addresses",
      "model.opensource_observer.rf4_openrank_trusted_users_count",
      "model.opensource_observer.rf4_power_user_addresses",
      "model.opensource_observer.rf4_recurring_addresses",
      "model.opensource_observer.rf4_transactions",
      "model.opensource_observer.rf4_trusted_daily_active_users",
      "model.opensource_observer.rf4_trusted_monthly_active_users",
      "model.opensource_observer.rf4_trusted_recurring_users",
      "model.opensource_observer.rf4_trusted_transaction_count",
      "model.opensource_observer.rf4_trusted_users_onboarded",
      "model.opensource_observer.rf4_trusted_users_share_of_transactions",
      "source.opensource_observer.static_data_sources.rf4_project_eligibility",
    ],
    "model.opensource_observer.rf4_trusted_recurring_users": [
      "model.opensource_observer.rf4_events_daily_to_project",
    ],
    "model.opensource_observer.rf4_trusted_users_onboarded": [
      "model.opensource_observer.rf4_events_daily_to_project",
    ],
    "model.opensource_observer.rf4_monthly_active_addresses": [
      "model.opensource_observer.rf4_4337_events",
      "model.opensource_observer.rf4_events_daily_to_project",
    ],
    "model.opensource_observer.rf4_daily_active_addresses": [
      "model.opensource_observer.rf4_4337_events",
      "model.opensource_observer.rf4_events_daily_to_project",
    ],
    "model.opensource_observer.rf4_power_user_addresses": [
      "model.opensource_observer.rf4_events_daily_to_project",
    ],
    "model.opensource_observer.rf4_trusted_monthly_active_users": [
      "model.opensource_observer.rf4_events_daily_to_project",
    ],
    "model.opensource_observer.rf4_openrank_trusted_users_count": [
      "model.opensource_observer.rf4_events_daily_to_project",
      "model.opensource_observer.stg_farcaster__addresses",
      "model.opensource_observer.stg_karma3__localtrust",
    ],
    "model.opensource_observer.rf4_trusted_transaction_count": [
      "model.opensource_observer.rf4_events_daily_to_project",
    ],
    "model.opensource_observer.rf4_trusted_daily_active_users": [
      "model.opensource_observer.rf4_events_daily_to_project",
    ],
    "model.opensource_observer.rf4_transactions": [
      "model.opensource_observer.rf4_4337_events",
      "model.opensource_observer.rf4_events_daily_to_project",
    ],
    "model.opensource_observer.rf4_trusted_users_share_of_transactions": [
      "model.opensource_observer.rf4_events_daily_to_project",
    ],
    "model.opensource_observer.rf4_gas_fees": [
      "model.opensource_observer.rf4_events_daily_to_project",
    ],
    "model.opensource_observer.rf4_recurring_addresses": [
      "model.opensource_observer.rf4_4337_events",
      "model.opensource_observer.rf4_events_daily_to_project",
    ],
    "model.opensource_observer.rf4_agora_contract_discovery": [
      "model.opensource_observer.int_derived_contracts",
      "source.opensource_observer.static_data_sources.agora_rf4_artifacts_by_app",
    ],
    "model.opensource_observer.rf4_oso_contract_discovery": [
      "model.opensource_observer.int_derived_contracts",
      "model.opensource_observer.stg_ossd__current_projects",
      "source.opensource_observer.static_data_sources.rf4_project_eligibility",
    ],
    "model.opensource_observer.rf4_transactions_by_app": [
      "model.opensource_observer.rf4_contracts_by_app",
      "model.opensource_observer.rf4_transactions_window",
    ],
    "model.opensource_observer.rf4_transactions_window": [
      "source.opensource_observer.base.transactions",
      "source.opensource_observer.frax.transactions",
      "source.opensource_observer.metal.transactions",
      "source.opensource_observer.mode.transactions",
      "source.opensource_observer.optimism.receipts",
      "source.opensource_observer.zora.transactions",
    ],
    "model.opensource_observer.rf4_repos_by_app": [
      "source.opensource_observer.static_data_sources.agora_rf4_artifacts_by_app",
      "source.opensource_observer.static_data_sources.agora_rf4_repos_with_contracts",
    ],
    "model.opensource_observer.rf4_contracts_by_app": [
      "model.opensource_observer.int_factories",
      "model.opensource_observer.rf4_agora_contract_discovery",
      "model.opensource_observer.rf4_oso_contract_discovery",
    ],
    "model.opensource_observer.rf4_onchain_eligibility_checks": [
      "model.opensource_observer.rf4_contracts_by_app",
      "model.opensource_observer.rf4_transactions_by_app",
      "source.opensource_observer.static_data_sources.agora_rf4_applications",
      "source.opensource_observer.static_data_sources.rf4_project_eligibility",
    ],
    "model.opensource_observer.event_indexing_status_by_project_v1": [
      "model.opensource_observer.events_daily_to_project_by_source",
      "model.opensource_observer.projects_v1",
    ],
    "model.opensource_observer.event_types_v1": [
      "model.opensource_observer.int_events",
    ],
    "model.opensource_observer.events_weekly_to_project": [
      "model.opensource_observer.events_daily_to_project",
    ],
    "model.opensource_observer.events_weekly_to_artifact": [
      "model.opensource_observer.events_daily_to_artifact",
    ],
    "model.opensource_observer.events_weekly_to_project_by_source": [
      "model.opensource_observer.events_daily_to_project_by_source",
    ],
    "model.opensource_observer.events_weekly_to_collection": [
      "model.opensource_observer.events_daily_to_collection",
    ],
    "model.opensource_observer.events_weekly_to_collection_by_source": [
      "model.opensource_observer.events_daily_to_collection_by_source",
    ],
    "model.opensource_observer.events_daily_to_collection_by_source": [
      "model.opensource_observer.int_events_to_collection",
    ],
    "model.opensource_observer.events_daily_to_project": [
      "model.opensource_observer.int_events_to_project",
    ],
    "model.opensource_observer.events_daily_to_artifact": [
      "model.opensource_observer.int_events_to_project",
    ],
    "model.opensource_observer.events_daily_to_project_by_source": [
      "model.opensource_observer.int_events_to_project",
    ],
    "model.opensource_observer.events_daily_to_collection": [
      "model.opensource_observer.int_events_to_collection",
    ],
    "model.opensource_observer.events_monthly_to_project_by_source": [
      "model.opensource_observer.events_daily_to_project_by_source",
    ],
    "model.opensource_observer.events_monthly_to_project": [
      "model.opensource_observer.events_daily_to_project",
    ],
    "model.opensource_observer.events_monthly_to_collection": [
      "model.opensource_observer.events_daily_to_collection",
    ],
    "model.opensource_observer.events_monthly_to_artifact": [
      "model.opensource_observer.events_daily_to_artifact",
    ],
    "model.opensource_observer.events_monthly_to_collection_by_source": [
      "model.opensource_observer.events_daily_to_collection_by_source",
    ],
    "model.opensource_observer.base_playground__ossd_repositories": [
      "model.opensource_observer.base_playground__project_filter",
      "model.opensource_observer.int_artifacts_by_project",
      "model.opensource_observer.stg_ossd__current_projects",
      "model.opensource_observer.stg_ossd__current_repositories",
      "source.opensource_observer.ossd.repositories",
    ],
    "model.opensource_observer.base_playground__ossd_projects": [
      "model.opensource_observer.base_playground__project_filter",
      "model.opensource_observer.stg_ossd__current_projects",
      "source.opensource_observer.ossd.projects",
    ],
    "model.opensource_observer.base_playground__project_filter": [],
    "model.opensource_observer.base_playground__ossd_collections": [
      "model.opensource_observer.base_playground__project_filter",
      "model.opensource_observer.stg_ossd__current_collections",
      "model.opensource_observer.stg_ossd__current_projects",
      "source.opensource_observer.ossd.collections",
    ],
    "model.opensource_observer.int_artifacts_by_project": [
      "model.opensource_observer.int_all_artifacts",
      "model.opensource_observer.int_projects",
    ],
    "model.opensource_observer.int_artifacts_in_ossd_by_project": [
      "model.opensource_observer.stg_ossd__current_projects",
      "model.opensource_observer.stg_ossd__current_repositories",
    ],
    "model.opensource_observer.int_artifacts_history": [
      "model.opensource_observer.int_events",
    ],
    "model.opensource_observer.int_collections": [
      "model.opensource_observer.stg_ossd__current_collections",
    ],
    "model.opensource_observer.int_artifact_types": [
      "model.opensource_observer.int_all_artifacts",
    ],
    "model.opensource_observer.int_users": [
      "model.opensource_observer.stg_farcaster__profiles",
      "model.opensource_observer.stg_lens__profiles",
    ],
    "model.opensource_observer.int_deployers_by_project": [
      "model.opensource_observer.int_artifacts_in_ossd_by_project",
      "model.opensource_observer.stg_base__deployers",
      "model.opensource_observer.stg_frax__deployers",
      "model.opensource_observer.stg_metal__deployers",
      "model.opensource_observer.stg_mode__deployers",
      "model.opensource_observer.stg_optimism__deployers",
      "model.opensource_observer.stg_zora__deployers",
    ],
    "model.opensource_observer.int_contracts_by_project": [
      "model.opensource_observer.int_artifacts_in_ossd_by_project",
      "model.opensource_observer.int_deployers_by_project",
      "model.opensource_observer.int_derived_contracts",
      "model.opensource_observer.int_factories",
    ],
    "model.opensource_observer.int_projects_by_collection": [
      "model.opensource_observer.stg_ossd__current_collections",
      "model.opensource_observer.stg_ossd__current_projects",
    ],
    "model.opensource_observer.int_artifacts_by_user": [
      "model.opensource_observer.int_artifacts",
      "model.opensource_observer.int_users",
      "model.opensource_observer.stg_farcaster__addresses",
    ],
    "model.opensource_observer.int_projects": [
      "model.opensource_observer.stg_ossd__current_projects",
    ],
    "model.opensource_observer.int_artifacts": [
      "model.opensource_observer.int_artifacts_by_project",
      "model.opensource_observer.int_artifacts_history",
      "model.opensource_observer.int_events",
    ],
    "model.opensource_observer.int_all_artifacts": [
      "model.opensource_observer.int_artifacts_in_ossd_by_project",
      "model.opensource_observer.int_contracts_by_project",
      "model.opensource_observer.int_deployers_by_project",
    ],
    "model.opensource_observer.int_repo_metrics_by_project": [
      "model.opensource_observer.int_artifacts_in_ossd_by_project",
      "model.opensource_observer.int_events_to_project",
      "model.opensource_observer.stg_ossd__current_repositories",
    ],
    "model.opensource_observer.int_onchain_metrics_by_project": [
      "model.opensource_observer.int_onchain_metric__active_addresses",
      "model.opensource_observer.int_onchain_metric__active_contracts",
      "model.opensource_observer.int_onchain_metric__days_since_first_transaction",
      "model.opensource_observer.int_onchain_metric__gas_fees",
      "model.opensource_observer.int_onchain_metric__high_low_activity_addresses",
      "model.opensource_observer.int_onchain_metric__multi_project_addresses",
      "model.opensource_observer.int_onchain_metric__new_addresses",
      "model.opensource_observer.int_onchain_metric__returning_addresses",
      "model.opensource_observer.int_onchain_metric__transactions",
      "model.opensource_observer.int_projects",
    ],
    "model.opensource_observer.int_code_metrics_by_project": [
      "model.opensource_observer.int_code_metric__active_developers",
      "model.opensource_observer.int_code_metric__commits_prs_issues",
      "model.opensource_observer.int_code_metric__contributors",
      "model.opensource_observer.int_code_metric__fulltime_developers_average",
      "model.opensource_observer.int_code_metric__new_contributors",
      "model.opensource_observer.int_projects",
      "model.opensource_observer.int_repo_metrics_by_project",
    ],
    "model.opensource_observer.int_code_metric__new_contributors": [
      "model.opensource_observer.int_events_daily_to_project",
      "model.opensource_observer.int_time_intervals",
    ],
    "model.opensource_observer.int_code_metric__commits_prs_issues": [
      "model.opensource_observer.int_events_daily_to_project",
      "model.opensource_observer.int_time_intervals",
    ],
    "model.opensource_observer.int_code_metric__active_developers": [
      "model.opensource_observer.int_events_daily_to_project",
      "model.opensource_observer.int_time_intervals",
    ],
    "model.opensource_observer.int_code_metric__contributors": [
      "model.opensource_observer.int_events_daily_to_project",
      "model.opensource_observer.int_time_intervals",
    ],
    "model.opensource_observer.int_code_metric__fulltime_developers_average": [
      "model.opensource_observer.int_events_daily_to_project",
      "model.opensource_observer.int_time_intervals",
    ],
    "model.opensource_observer.int_code_metric__bus_factor": [
      "model.opensource_observer.int_events_monthly_to_project",
      "model.opensource_observer.int_time_intervals",
    ],
    "model.opensource_observer.int_onchain_metric__active_contracts": [
      "model.opensource_observer.int_events_daily_to_project",
      "model.opensource_observer.int_time_intervals",
    ],
    "model.opensource_observer.int_onchain_metric__trusted_transactions": [
      "model.opensource_observer.int_artifacts_by_user",
      "model.opensource_observer.int_events_daily_to_project",
      "model.opensource_observer.int_time_intervals",
    ],
    "model.opensource_observer.int_onchain_metric__multi_project_addresses": [
      "model.opensource_observer.int_events_daily_to_project",
      "model.opensource_observer.int_time_intervals",
    ],
    "model.opensource_observer.int_onchain_metric__high_low_activity_addresses":
      [
        "model.opensource_observer.int_events_daily_to_project",
        "model.opensource_observer.int_time_intervals",
      ],
    "model.opensource_observer.int_onchain_metric__returning_addresses": [
      "model.opensource_observer.int_events_daily_to_project",
      "model.opensource_observer.int_time_intervals",
    ],
    "model.opensource_observer.int_onchain_metric__days_since_first_transaction":
      [
        "model.opensource_observer.int_events_daily_to_project",
        "model.opensource_observer.int_time_intervals",
      ],
    "model.opensource_observer.int_onchain_metric__transactions": [
      "model.opensource_observer.int_events_daily_to_project",
      "model.opensource_observer.int_time_intervals",
    ],
    "model.opensource_observer.int_onchain_metric__active_addresses": [
      "model.opensource_observer.int_events_daily_to_project",
      "model.opensource_observer.int_time_intervals",
    ],
    "model.opensource_observer.int_onchain_metric__new_addresses": [
      "model.opensource_observer.int_events_daily_to_project",
      "model.opensource_observer.int_time_intervals",
    ],
    "model.opensource_observer.int_onchain_metric__gas_fees": [
      "model.opensource_observer.int_events_daily_to_project",
      "model.opensource_observer.int_time_intervals",
    ],
    "model.opensource_observer.int_zora_contract_invocation_events": [
      "model.opensource_observer.int_artifacts_in_ossd_by_project",
      "model.opensource_observer.int_safes",
      "model.opensource_observer.int_zora_transactions",
    ],
    "model.opensource_observer.int_pgn_traces": [
      "model.opensource_observer.int_all_artifacts",
      "source.opensource_observer.pgn.traces",
    ],
    "model.opensource_observer.int_optimism_contract_invocation_events": [
      "model.opensource_observer.int_artifacts_in_ossd_by_project",
      "model.opensource_observer.int_optimism_transactions",
      "model.opensource_observer.int_safes",
    ],
    "model.opensource_observer.int_mode_contract_invocation_events": [
      "model.opensource_observer.int_artifacts_in_ossd_by_project",
      "model.opensource_observer.int_mode_transactions",
      "model.opensource_observer.int_safes",
    ],
    "model.opensource_observer.int_metal_transactions": [
      "model.opensource_observer.int_all_artifacts",
      "source.opensource_observer.metal.transactions",
    ],
    "model.opensource_observer.int_optimism_transactions": [
      "model.opensource_observer.int_all_artifacts",
      "source.opensource_observer.optimism.blocks",
      "source.opensource_observer.optimism.receipts",
      "source.opensource_observer.optimism.transactions",
    ],
    "model.opensource_observer.int_frax_contract_invocation_events": [
      "model.opensource_observer.int_artifacts_in_ossd_by_project",
      "model.opensource_observer.int_frax_transactions",
      "model.opensource_observer.int_safes",
    ],
    "model.opensource_observer.int_optimism_traces": [
      "model.opensource_observer.int_all_artifacts",
      "source.opensource_observer.superchain.optimism_traces",
    ],
    "model.opensource_observer.int_pgn_transactions": [
      "model.opensource_observer.int_all_artifacts",
      "source.opensource_observer.pgn.transactions",
    ],
    "model.opensource_observer.int_zora_transactions": [
      "model.opensource_observer.int_all_artifacts",
      "source.opensource_observer.zora.transactions",
    ],
    "model.opensource_observer.int_mode_traces": [
      "model.opensource_observer.int_all_artifacts",
      "source.opensource_observer.mode.traces",
    ],
    "model.opensource_observer.int_base_traces": [
      "model.opensource_observer.int_all_artifacts",
      "source.opensource_observer.base.traces",
    ],
    "model.opensource_observer.int_metal_traces": [
      "model.opensource_observer.int_all_artifacts",
      "source.opensource_observer.metal.traces",
    ],
    "model.opensource_observer.int_metal_contract_invocation_events": [
      "model.opensource_observer.int_artifacts_in_ossd_by_project",
      "model.opensource_observer.int_metal_transactions",
      "model.opensource_observer.int_safes",
    ],
    "model.opensource_observer.int_base_transactions": [
      "model.opensource_observer.int_all_artifacts",
      "source.opensource_observer.base.transactions",
    ],
    "model.opensource_observer.int_pgn_contract_invocation_events": [
      "model.opensource_observer.int_artifacts_in_ossd_by_project",
      "model.opensource_observer.int_pgn_transactions",
      "model.opensource_observer.int_safes",
    ],
    "model.opensource_observer.int_base_contract_invocation_events": [
      "model.opensource_observer.int_artifacts_in_ossd_by_project",
      "model.opensource_observer.int_base_transactions",
      "model.opensource_observer.int_safes",
    ],
    "model.opensource_observer.int_frax_transactions": [
      "model.opensource_observer.int_all_artifacts",
      "source.opensource_observer.frax.transactions",
    ],
    "model.opensource_observer.int_frax_traces": [
      "model.opensource_observer.int_all_artifacts",
      "source.opensource_observer.frax.traces",
    ],
    "model.opensource_observer.int_mode_transactions": [
      "model.opensource_observer.int_all_artifacts",
      "source.opensource_observer.mode.transactions",
    ],
    "model.opensource_observer.int_zora_traces": [
      "model.opensource_observer.int_all_artifacts",
      "source.opensource_observer.zora.traces",
    ],
    "model.opensource_observer.int_deployers": [
      "model.opensource_observer.stg_base__deployers",
      "model.opensource_observer.stg_frax__deployers",
      "model.opensource_observer.stg_metal__deployers",
      "model.opensource_observer.stg_mode__deployers",
      "model.opensource_observer.stg_optimism__deployers",
      "model.opensource_observer.stg_zora__deployers",
    ],
    "model.opensource_observer.int_derived_contracts": [
      "model.opensource_observer.int_deployers",
      "model.opensource_observer.int_factories",
      "model.opensource_observer.int_proxies",
    ],
    "model.opensource_observer.int_safes": [
      "model.opensource_observer.stg_base__proxies",
      "model.opensource_observer.stg_frax__proxies",
      "model.opensource_observer.stg_metal__proxies",
      "model.opensource_observer.stg_mode__proxies",
      "model.opensource_observer.stg_optimism__proxies",
      "model.opensource_observer.stg_zora__proxies",
    ],
    "model.opensource_observer.int_factories": [
      "model.opensource_observer.stg_base__factories",
      "model.opensource_observer.stg_frax__factories",
      "model.opensource_observer.stg_metal__factories",
      "model.opensource_observer.stg_mode__factories",
      "model.opensource_observer.stg_optimism__factories",
      "model.opensource_observer.stg_zora__factories",
    ],
    "model.opensource_observer.int_proxies": [
      "model.opensource_observer.stg_base__proxies",
      "model.opensource_observer.stg_frax__proxies",
      "model.opensource_observer.stg_metal__proxies",
      "model.opensource_observer.stg_mode__proxies",
      "model.opensource_observer.stg_optimism__proxies",
      "model.opensource_observer.stg_zora__proxies",
    ],
    "model.opensource_observer.int_active_addresses_daily_to_project": [
      "model.opensource_observer.int_addresses_daily_activity",
      "model.opensource_observer.int_artifacts",
    ],
    "model.opensource_observer.int_active_addresses_monthly_to_project": [
      "model.opensource_observer.int_addresses_daily_activity",
    ],
    "model.opensource_observer.int_address_totals_by_project": [
      "model.opensource_observer.int_addresses_daily_activity",
      "model.opensource_observer.int_addresses_to_project",
      "model.opensource_observer.int_time_intervals",
    ],
    "model.opensource_observer.int_user_addresses": [
      "model.opensource_observer.int_address_rfm_segments_by_project",
    ],
    "model.opensource_observer.int_contributors_to_project": [
      "model.opensource_observer.int_events_to_project",
    ],
    "model.opensource_observer.int_address_rfm_segments_by_project": [
      "model.opensource_observer.int_addresses_to_project",
    ],
    "model.opensource_observer.int_addresses_daily_activity": [
      "model.opensource_observer.int_addresses_to_project",
      "model.opensource_observer.int_events_to_project",
    ],
    "model.opensource_observer.int_addresses_to_project": [
      "model.opensource_observer.int_events_to_project",
    ],
    "model.opensource_observer.int_events": [
      "model.opensource_observer.int_base_contract_invocation_events",
      "model.opensource_observer.int_frax_contract_invocation_events",
      "model.opensource_observer.int_metal_contract_invocation_events",
      "model.opensource_observer.int_mode_contract_invocation_events",
      "model.opensource_observer.int_optimism_contract_invocation_events",
      "model.opensource_observer.int_pgn_contract_invocation_events",
      "model.opensource_observer.int_zora_contract_invocation_events",
      "model.opensource_observer.stg_github__distinct_commits_resolved_mergebot",
      "model.opensource_observer.stg_github__issues",
      "model.opensource_observer.stg_github__pull_request_merge_events",
      "model.opensource_observer.stg_github__pull_requests",
      "model.opensource_observer.stg_github__stars_and_forks",
    ],
    "model.opensource_observer.int_events_with_artifact_id": [
      "model.opensource_observer.int_events",
    ],
    "model.opensource_observer.int_events_alltime_to_project": [
      "model.opensource_observer.int_events_daily_to_project",
    ],
    "model.opensource_observer.int_events_monthly_to_project": [
      "model.opensource_observer.int_events_daily_to_project",
    ],
    "model.opensource_observer.int_events_to_collection": [
      "model.opensource_observer.int_events_to_project",
      "model.opensource_observer.int_projects_by_collection",
    ],
    "model.opensource_observer.int_events_daily_to_project": [
      "model.opensource_observer.int_events_to_project",
    ],
    "model.opensource_observer.int_events_to_project": [
      "model.opensource_observer.int_artifacts_by_project",
      "model.opensource_observer.int_events_with_artifact_id",
    ],
    "model.opensource_observer.int_developer_status_monthly_by_project": [
      "model.opensource_observer.int_events_daily_to_project",
    ],
    "model.opensource_observer.int_first_last_event_by_artifact": [
      "model.opensource_observer.int_events_daily_to_project",
    ],
    "model.opensource_observer.int_time_intervals": [],
    "model.opensource_observer.stg_arbitrum__deployers": [
      "source.opensource_observer.arbitrum.receipts",
    ],
    "model.opensource_observer.stg_ethereum__deployers": [
      "source.opensource_observer.ethereum.transactions",
    ],
    "model.opensource_observer.stg_ethereum__factories": [
      "source.opensource_observer.ethereum.traces",
      "source.opensource_observer.ethereum.transactions",
    ],
    "model.opensource_observer.stg_farcaster__addresses": [
      "source.opensource_observer.farcaster.farcaster_verifications",
    ],
    "model.opensource_observer.stg_farcaster__profiles": [
      "source.opensource_observer.farcaster.farcaster_profiles",
    ],
    "model.opensource_observer.stg_mode__factories": [
      "source.opensource_observer.mode.traces",
      "source.opensource_observer.mode.transactions",
    ],
    "model.opensource_observer.stg_mode__proxies": [
      "source.opensource_observer.mode.traces",
    ],
    "model.opensource_observer.stg_mode__deployers": [
      "source.opensource_observer.mode.transactions",
    ],
    "model.opensource_observer.stg_metal__proxies": [
      "source.opensource_observer.metal.traces",
    ],
    "model.opensource_observer.stg_metal__deployers": [
      "source.opensource_observer.metal.transactions",
    ],
    "model.opensource_observer.stg_metal__factories": [
      "source.opensource_observer.metal.traces",
      "source.opensource_observer.metal.transactions",
    ],
    "model.opensource_observer.stg_lens__profiles": [
      "source.opensource_observer.lens.lens_profiles",
    ],
    "model.opensource_observer.stg_lens__owners": [
      "source.opensource_observer.lens.lens_owners",
    ],
    "model.opensource_observer.stg_frax__factories": [
      "source.opensource_observer.frax.traces",
      "source.opensource_observer.frax.transactions",
    ],
    "model.opensource_observer.stg_frax__deployers": [
      "source.opensource_observer.frax.transactions",
    ],
    "model.opensource_observer.stg_frax__proxies": [
      "source.opensource_observer.frax.traces",
    ],
    "model.opensource_observer.stg_karma3__globaltrust": [
      "source.opensource_observer.karma3.globaltrust",
    ],
    "model.opensource_observer.stg_karma3__localtrust": [
      "source.opensource_observer.karma3.localtrust",
    ],
    "model.opensource_observer.stg_passport__scores": [
      "source.opensource_observer.gitcoin.passport_scores",
    ],
    "model.opensource_observer.stg_pgn__deployers": [
      "source.opensource_observer.pgn.transactions",
    ],
    "model.opensource_observer.stg_pgn__factories": [
      "source.opensource_observer.pgn.traces",
      "source.opensource_observer.pgn.transactions",
    ],
    "model.opensource_observer.stg_pgn__proxies": [
      "source.opensource_observer.pgn.traces",
    ],
    "model.opensource_observer.stg_zora__proxies": [
      "source.opensource_observer.zora.traces",
    ],
    "model.opensource_observer.stg_zora__deployers": [
      "source.opensource_observer.zora.transactions",
    ],
    "model.opensource_observer.stg_zora__factories": [
      "source.opensource_observer.zora.traces",
      "source.opensource_observer.zora.transactions",
    ],
    "model.opensource_observer.stg_base__proxies": [
      "source.opensource_observer.base.traces",
    ],
    "model.opensource_observer.stg_base__deployers": [
      "source.opensource_observer.base.transactions",
    ],
    "model.opensource_observer.stg_base__factories": [
      "source.opensource_observer.base.traces",
      "source.opensource_observer.base.transactions",
    ],
    "model.opensource_observer.stg_ossd__current_collections": [
      "source.opensource_observer.ossd.collections",
    ],
    "model.opensource_observer.stg_ossd__current_repositories": [
      "source.opensource_observer.ossd.repositories",
    ],
    "model.opensource_observer.stg_ossd__current_projects": [
      "source.opensource_observer.ossd.projects",
    ],
    "model.opensource_observer.stg_github__pull_requests": [
      "model.opensource_observer.stg_github__events",
    ],
    "model.opensource_observer.stg_github__commits": [
      "model.opensource_observer.stg_github__push_events",
    ],
    "model.opensource_observer.stg_github__distinct_main_commits": [
      "model.opensource_observer.stg_github__commits",
      "model.opensource_observer.stg_ossd__current_repositories",
    ],
    "model.opensource_observer.stg_github__issues": [
      "model.opensource_observer.stg_github__events",
    ],
    "model.opensource_observer.stg_github__push_events": [
      "model.opensource_observer.stg_github__events",
    ],
    "model.opensource_observer.stg_github__stars_and_forks": [
      "model.opensource_observer.stg_github__events",
    ],
    "model.opensource_observer.stg_github__distinct_commits_resolved_mergebot":
      [
        "model.opensource_observer.stg_github__distinct_main_commits",
        "model.opensource_observer.stg_github__pull_request_merge_events",
      ],
    "model.opensource_observer.stg_github__events": [
      "model.opensource_observer.stg_ossd__current_repositories",
      "source.opensource_observer.github_archive.events",
    ],
    "model.opensource_observer.stg_github__pull_request_merge_events": [
      "model.opensource_observer.stg_github__events",
    ],
    "model.opensource_observer.stg_optimism__proxies": [
      "source.opensource_observer.superchain.optimism_traces",
    ],
    "model.opensource_observer.stg_optimism__factories": [
      "source.opensource_observer.optimism.transactions",
      "source.opensource_observer.superchain.optimism_traces",
    ],
    "model.opensource_observer.stg_optimism__deployers": [
      "source.opensource_observer.optimism.receipts",
    ],
    "model.opensource_observer.stg_optimism__airdrop_addresses": [
      "source.opensource_observer.static_data_sources.op_airdrop1_addresses_detailed_list",
      "source.opensource_observer.static_data_sources.op_airdrop2_addresses_detailed_list",
      "source.opensource_observer.static_data_sources.op_airdrop3_addresses_detailed_list",
      "source.opensource_observer.static_data_sources.op_airdrop4_addresses_detailed_list",
    ],
    "source.opensource_observer.mode.blocks": [],
    "source.opensource_observer.mode.transactions": [],
    "source.opensource_observer.mode.traces": [],
    "source.opensource_observer.github_archive.events": [],
    "source.opensource_observer.frax.blocks": [],
    "source.opensource_observer.frax.transactions": [],
    "source.opensource_observer.frax.traces": [],
    "source.opensource_observer.superchain.optimism_traces": [],
    "source.opensource_observer.ethereum.transactions": [],
    "source.opensource_observer.ethereum.traces": [],
    "source.opensource_observer.metal.blocks": [],
    "source.opensource_observer.metal.transactions": [],
    "source.opensource_observer.metal.traces": [],
    "source.opensource_observer.gitcoin.passport_scores": [],
    "source.opensource_observer.farcaster.farcaster_verifications": [],
    "source.opensource_observer.farcaster.farcaster_profiles": [],
    "source.opensource_observer.pgn.blocks": [],
    "source.opensource_observer.pgn.transactions": [],
    "source.opensource_observer.pgn.traces": [],
    "source.opensource_observer.ossd.projects": [],
    "source.opensource_observer.ossd.collections": [],
    "source.opensource_observer.ossd.repositories": [],
    "source.opensource_observer.base.blocks": [],
    "source.opensource_observer.base.transactions": [],
    "source.opensource_observer.base.traces": [],
    "source.opensource_observer.arbitrum.transactions": [],
    "source.opensource_observer.arbitrum.logs": [],
    "source.opensource_observer.arbitrum.receipts": [],
    "source.opensource_observer.karma3.globaltrust": [],
    "source.opensource_observer.karma3.localtrust": [],
    "source.opensource_observer.lens.lens_owners": [],
    "source.opensource_observer.lens.lens_profiles": [],
    "source.opensource_observer.zora.blocks": [],
    "source.opensource_observer.zora.transactions": [],
    "source.opensource_observer.zora.traces": [],
    "source.opensource_observer.dune.arbitrum_contract_usage": [],
    "source.opensource_observer.dune.optimism_contract_usage": [],
    "source.opensource_observer.optimism.transactions": [],
    "source.opensource_observer.optimism.logs": [],
    "source.opensource_observer.optimism.receipts": [],
    "source.opensource_observer.optimism.blocks": [],
    "source.opensource_observer.static_data_sources.op_rf4_trusted_addresses":
      [],
    "source.opensource_observer.static_data_sources.optimist_nft_holders": [],
    "source.opensource_observer.static_data_sources.agora_rf4_applications": [],
    "source.opensource_observer.static_data_sources.agora_rf4_artifacts_by_app":
      [],
    "source.opensource_observer.static_data_sources.rf4_project_eligibility":
      [],
    "source.opensource_observer.static_data_sources.agora_rf4_repos_with_contracts":
      [],
    "source.opensource_observer.static_data_sources.op_airdrop1_addresses_detailed_list":
      [],
    "source.opensource_observer.static_data_sources.op_airdrop2_addresses_detailed_list":
      [],
    "source.opensource_observer.static_data_sources.op_airdrop3_addresses_detailed_list":
      [],
    "source.opensource_observer.static_data_sources.op_airdrop4_addresses_detailed_list":
      [],
  },
  child_map: {
    "model.opensource_observer.projects_by_collection_v1": [],
    "model.opensource_observer.users_v1": [],
    "model.opensource_observer.artifacts_v1": [
      "model.opensource_observer.rf4_events_daily_to_project",
    ],
    "model.opensource_observer.projects_v1": [
      "model.opensource_observer.event_indexing_status_by_project_v1",
      "model.opensource_observer.rf4_events_daily_to_project",
      "model.opensource_observer.rf4_impact_metrics_by_project",
    ],
    "model.opensource_observer.collections_v1": [],
    "model.opensource_observer.artifacts_by_project_v1": [
      "model.opensource_observer.rf4_4337_events",
    ],
    "model.opensource_observer.contracts_v0": [],
    "model.opensource_observer.onchain_metrics_by_project_v1": [],
    "model.opensource_observer.code_metrics_by_project_v1": [],
    "model.opensource_observer.rf4_repo_stats_by_project": [],
    "model.opensource_observer.rf4_4337_events": [
      "model.opensource_observer.rf4_daily_active_addresses",
      "model.opensource_observer.rf4_monthly_active_addresses",
      "model.opensource_observer.rf4_recurring_addresses",
      "model.opensource_observer.rf4_transactions",
    ],
    "model.opensource_observer.rf4_trusted_users": [],
    "model.opensource_observer.rf4_events_daily_to_project": [
      "model.opensource_observer.rf4_daily_active_addresses",
      "model.opensource_observer.rf4_gas_fees",
      "model.opensource_observer.rf4_monthly_active_addresses",
      "model.opensource_observer.rf4_openrank_trusted_users_count",
      "model.opensource_observer.rf4_power_user_addresses",
      "model.opensource_observer.rf4_recurring_addresses",
      "model.opensource_observer.rf4_transactions",
      "model.opensource_observer.rf4_trusted_daily_active_users",
      "model.opensource_observer.rf4_trusted_monthly_active_users",
      "model.opensource_observer.rf4_trusted_recurring_users",
      "model.opensource_observer.rf4_trusted_transaction_count",
      "model.opensource_observer.rf4_trusted_users_onboarded",
      "model.opensource_observer.rf4_trusted_users_share_of_transactions",
    ],
    "model.opensource_observer.rf4_impact_metrics_by_project": [],
    "model.opensource_observer.rf4_trusted_recurring_users": [
      "model.opensource_observer.rf4_impact_metrics_by_project",
    ],
    "model.opensource_observer.rf4_trusted_users_onboarded": [
      "model.opensource_observer.rf4_impact_metrics_by_project",
    ],
    "model.opensource_observer.rf4_monthly_active_addresses": [
      "model.opensource_observer.rf4_impact_metrics_by_project",
    ],
    "model.opensource_observer.rf4_daily_active_addresses": [
      "model.opensource_observer.rf4_impact_metrics_by_project",
    ],
    "model.opensource_observer.rf4_power_user_addresses": [
      "model.opensource_observer.rf4_impact_metrics_by_project",
    ],
    "model.opensource_observer.rf4_trusted_monthly_active_users": [
      "model.opensource_observer.rf4_impact_metrics_by_project",
    ],
    "model.opensource_observer.rf4_openrank_trusted_users_count": [
      "model.opensource_observer.rf4_impact_metrics_by_project",
    ],
    "model.opensource_observer.rf4_trusted_transaction_count": [
      "model.opensource_observer.rf4_impact_metrics_by_project",
    ],
    "model.opensource_observer.rf4_trusted_daily_active_users": [
      "model.opensource_observer.rf4_impact_metrics_by_project",
    ],
    "model.opensource_observer.rf4_transactions": [
      "model.opensource_observer.rf4_impact_metrics_by_project",
    ],
    "model.opensource_observer.rf4_trusted_users_share_of_transactions": [
      "model.opensource_observer.rf4_impact_metrics_by_project",
    ],
    "model.opensource_observer.rf4_gas_fees": [
      "model.opensource_observer.rf4_impact_metrics_by_project",
    ],
    "model.opensource_observer.rf4_recurring_addresses": [
      "model.opensource_observer.rf4_impact_metrics_by_project",
    ],
    "model.opensource_observer.rf4_agora_contract_discovery": [
      "model.opensource_observer.rf4_contracts_by_app",
    ],
    "model.opensource_observer.rf4_oso_contract_discovery": [
      "model.opensource_observer.rf4_contracts_by_app",
    ],
    "model.opensource_observer.rf4_transactions_by_app": [
      "model.opensource_observer.rf4_onchain_eligibility_checks",
    ],
    "model.opensource_observer.rf4_transactions_window": [
      "model.opensource_observer.rf4_transactions_by_app",
    ],
    "model.opensource_observer.rf4_repos_by_app": [
      "model.opensource_observer.rf4_repo_stats_by_project",
    ],
    "model.opensource_observer.rf4_contracts_by_app": [
      "model.opensource_observer.rf4_onchain_eligibility_checks",
      "model.opensource_observer.rf4_transactions_by_app",
    ],
    "model.opensource_observer.rf4_onchain_eligibility_checks": [],
    "model.opensource_observer.event_indexing_status_by_project_v1": [],
    "model.opensource_observer.event_types_v1": [],
    "model.opensource_observer.events_weekly_to_project": [],
    "model.opensource_observer.events_weekly_to_artifact": [],
    "model.opensource_observer.events_weekly_to_project_by_source": [],
    "model.opensource_observer.events_weekly_to_collection": [],
    "model.opensource_observer.events_weekly_to_collection_by_source": [],
    "model.opensource_observer.events_daily_to_collection_by_source": [
      "model.opensource_observer.events_monthly_to_collection_by_source",
      "model.opensource_observer.events_weekly_to_collection_by_source",
    ],
    "model.opensource_observer.events_daily_to_project": [
      "model.opensource_observer.events_monthly_to_project",
      "model.opensource_observer.events_weekly_to_project",
    ],
    "model.opensource_observer.events_daily_to_artifact": [
      "model.opensource_observer.events_monthly_to_artifact",
      "model.opensource_observer.events_weekly_to_artifact",
    ],
    "model.opensource_observer.events_daily_to_project_by_source": [
      "model.opensource_observer.event_indexing_status_by_project_v1",
      "model.opensource_observer.events_monthly_to_project_by_source",
      "model.opensource_observer.events_weekly_to_project_by_source",
    ],
    "model.opensource_observer.events_daily_to_collection": [
      "model.opensource_observer.events_monthly_to_collection",
      "model.opensource_observer.events_weekly_to_collection",
    ],
    "model.opensource_observer.events_monthly_to_project_by_source": [],
    "model.opensource_observer.events_monthly_to_project": [],
    "model.opensource_observer.events_monthly_to_collection": [],
    "model.opensource_observer.events_monthly_to_artifact": [],
    "model.opensource_observer.events_monthly_to_collection_by_source": [],
    "model.opensource_observer.base_playground__ossd_repositories": [],
    "model.opensource_observer.base_playground__ossd_projects": [],
    "model.opensource_observer.base_playground__project_filter": [
      "model.opensource_observer.base_playground__ossd_collections",
      "model.opensource_observer.base_playground__ossd_projects",
      "model.opensource_observer.base_playground__ossd_repositories",
    ],
    "model.opensource_observer.base_playground__ossd_collections": [],
    "model.opensource_observer.int_artifacts_by_project": [
      "model.opensource_observer.artifacts_by_project_v1",
      "model.opensource_observer.base_playground__ossd_repositories",
      "model.opensource_observer.int_artifacts",
      "model.opensource_observer.int_events_to_project",
    ],
    "model.opensource_observer.int_artifacts_in_ossd_by_project": [
      "model.opensource_observer.int_all_artifacts",
      "model.opensource_observer.int_base_contract_invocation_events",
      "model.opensource_observer.int_contracts_by_project",
      "model.opensource_observer.int_deployers_by_project",
      "model.opensource_observer.int_frax_contract_invocation_events",
      "model.opensource_observer.int_metal_contract_invocation_events",
      "model.opensource_observer.int_mode_contract_invocation_events",
      "model.opensource_observer.int_optimism_contract_invocation_events",
      "model.opensource_observer.int_pgn_contract_invocation_events",
      "model.opensource_observer.int_repo_metrics_by_project",
      "model.opensource_observer.int_zora_contract_invocation_events",
    ],
    "model.opensource_observer.int_artifacts_history": [
      "model.opensource_observer.int_artifacts",
    ],
    "model.opensource_observer.int_collections": [
      "model.opensource_observer.collections_v1",
      "model.opensource_observer.projects_by_collection_v1",
    ],
    "model.opensource_observer.int_artifact_types": [],
    "model.opensource_observer.int_users": [
      "model.opensource_observer.int_artifacts_by_user",
      "model.opensource_observer.users_v1",
    ],
    "model.opensource_observer.int_deployers_by_project": [
      "model.opensource_observer.int_all_artifacts",
      "model.opensource_observer.int_contracts_by_project",
    ],
    "model.opensource_observer.int_contracts_by_project": [
      "model.opensource_observer.int_all_artifacts",
    ],
    "model.opensource_observer.int_projects_by_collection": [
      "model.opensource_observer.int_events_to_collection",
      "model.opensource_observer.projects_by_collection_v1",
    ],
    "model.opensource_observer.int_artifacts_by_user": [
      "model.opensource_observer.int_onchain_metric__trusted_transactions",
    ],
    "model.opensource_observer.int_projects": [
      "model.opensource_observer.int_artifacts_by_project",
      "model.opensource_observer.int_code_metrics_by_project",
      "model.opensource_observer.int_onchain_metrics_by_project",
      "model.opensource_observer.projects_v1",
    ],
    "model.opensource_observer.int_artifacts": [
      "model.opensource_observer.artifacts_v1",
      "model.opensource_observer.int_active_addresses_daily_to_project",
      "model.opensource_observer.int_artifacts_by_user",
    ],
    "model.opensource_observer.int_all_artifacts": [
      "model.opensource_observer.int_artifact_types",
      "model.opensource_observer.int_artifacts_by_project",
      "model.opensource_observer.int_base_traces",
      "model.opensource_observer.int_base_transactions",
      "model.opensource_observer.int_frax_traces",
      "model.opensource_observer.int_frax_transactions",
      "model.opensource_observer.int_metal_traces",
      "model.opensource_observer.int_metal_transactions",
      "model.opensource_observer.int_mode_traces",
      "model.opensource_observer.int_mode_transactions",
      "model.opensource_observer.int_optimism_traces",
      "model.opensource_observer.int_optimism_transactions",
      "model.opensource_observer.int_pgn_traces",
      "model.opensource_observer.int_pgn_transactions",
      "model.opensource_observer.int_zora_traces",
      "model.opensource_observer.int_zora_transactions",
    ],
    "model.opensource_observer.int_repo_metrics_by_project": [
      "model.opensource_observer.int_code_metrics_by_project",
      "model.opensource_observer.rf4_repo_stats_by_project",
    ],
    "model.opensource_observer.int_onchain_metrics_by_project": [
      "model.opensource_observer.onchain_metrics_by_project_v1",
    ],
    "model.opensource_observer.int_code_metrics_by_project": [
      "model.opensource_observer.code_metrics_by_project_v1",
    ],
    "model.opensource_observer.int_code_metric__new_contributors": [
      "model.opensource_observer.int_code_metrics_by_project",
    ],
    "model.opensource_observer.int_code_metric__commits_prs_issues": [
      "model.opensource_observer.int_code_metrics_by_project",
    ],
    "model.opensource_observer.int_code_metric__active_developers": [
      "model.opensource_observer.int_code_metrics_by_project",
    ],
    "model.opensource_observer.int_code_metric__contributors": [
      "model.opensource_observer.int_code_metrics_by_project",
    ],
    "model.opensource_observer.int_code_metric__fulltime_developers_average": [
      "model.opensource_observer.int_code_metrics_by_project",
    ],
    "model.opensource_observer.int_code_metric__bus_factor": [],
    "model.opensource_observer.int_onchain_metric__active_contracts": [
      "model.opensource_observer.int_onchain_metrics_by_project",
    ],
    "model.opensource_observer.int_onchain_metric__trusted_transactions": [],
    "model.opensource_observer.int_onchain_metric__multi_project_addresses": [
      "model.opensource_observer.int_onchain_metrics_by_project",
    ],
    "model.opensource_observer.int_onchain_metric__high_low_activity_addresses":
      ["model.opensource_observer.int_onchain_metrics_by_project"],
    "model.opensource_observer.int_onchain_metric__returning_addresses": [
      "model.opensource_observer.int_onchain_metrics_by_project",
    ],
    "model.opensource_observer.int_onchain_metric__days_since_first_transaction":
      ["model.opensource_observer.int_onchain_metrics_by_project"],
    "model.opensource_observer.int_onchain_metric__transactions": [
      "model.opensource_observer.int_onchain_metrics_by_project",
    ],
    "model.opensource_observer.int_onchain_metric__active_addresses": [
      "model.opensource_observer.int_onchain_metrics_by_project",
    ],
    "model.opensource_observer.int_onchain_metric__new_addresses": [
      "model.opensource_observer.int_onchain_metrics_by_project",
    ],
    "model.opensource_observer.int_onchain_metric__gas_fees": [
      "model.opensource_observer.int_onchain_metrics_by_project",
    ],
    "model.opensource_observer.int_zora_contract_invocation_events": [
      "model.opensource_observer.int_events",
    ],
    "model.opensource_observer.int_pgn_traces": [],
    "model.opensource_observer.int_optimism_contract_invocation_events": [
      "model.opensource_observer.int_events",
    ],
    "model.opensource_observer.int_mode_contract_invocation_events": [
      "model.opensource_observer.int_events",
    ],
    "model.opensource_observer.int_metal_transactions": [
      "model.opensource_observer.int_metal_contract_invocation_events",
    ],
    "model.opensource_observer.int_optimism_transactions": [
      "model.opensource_observer.int_optimism_contract_invocation_events",
    ],
    "model.opensource_observer.int_frax_contract_invocation_events": [
      "model.opensource_observer.int_events",
    ],
    "model.opensource_observer.int_optimism_traces": [],
    "model.opensource_observer.int_pgn_transactions": [
      "model.opensource_observer.int_pgn_contract_invocation_events",
    ],
    "model.opensource_observer.int_zora_transactions": [
      "model.opensource_observer.int_zora_contract_invocation_events",
    ],
    "model.opensource_observer.int_mode_traces": [],
    "model.opensource_observer.int_base_traces": [],
    "model.opensource_observer.int_metal_traces": [],
    "model.opensource_observer.int_metal_contract_invocation_events": [
      "model.opensource_observer.int_events",
    ],
    "model.opensource_observer.int_base_transactions": [
      "model.opensource_observer.int_base_contract_invocation_events",
    ],
    "model.opensource_observer.int_pgn_contract_invocation_events": [
      "model.opensource_observer.int_events",
    ],
    "model.opensource_observer.int_base_contract_invocation_events": [
      "model.opensource_observer.int_events",
    ],
    "model.opensource_observer.int_frax_transactions": [
      "model.opensource_observer.int_frax_contract_invocation_events",
    ],
    "model.opensource_observer.int_frax_traces": [],
    "model.opensource_observer.int_mode_transactions": [
      "model.opensource_observer.int_mode_contract_invocation_events",
    ],
    "model.opensource_observer.int_zora_traces": [],
    "model.opensource_observer.int_deployers": [
      "model.opensource_observer.int_derived_contracts",
    ],
    "model.opensource_observer.int_derived_contracts": [
      "model.opensource_observer.contracts_v0",
      "model.opensource_observer.int_contracts_by_project",
      "model.opensource_observer.rf4_agora_contract_discovery",
      "model.opensource_observer.rf4_oso_contract_discovery",
    ],
    "model.opensource_observer.int_safes": [
      "model.opensource_observer.int_base_contract_invocation_events",
      "model.opensource_observer.int_frax_contract_invocation_events",
      "model.opensource_observer.int_metal_contract_invocation_events",
      "model.opensource_observer.int_mode_contract_invocation_events",
      "model.opensource_observer.int_optimism_contract_invocation_events",
      "model.opensource_observer.int_pgn_contract_invocation_events",
      "model.opensource_observer.int_zora_contract_invocation_events",
    ],
    "model.opensource_observer.int_factories": [
      "model.opensource_observer.int_contracts_by_project",
      "model.opensource_observer.int_derived_contracts",
      "model.opensource_observer.rf4_contracts_by_app",
    ],
    "model.opensource_observer.int_proxies": [
      "model.opensource_observer.int_derived_contracts",
    ],
    "model.opensource_observer.int_active_addresses_daily_to_project": [],
    "model.opensource_observer.int_active_addresses_monthly_to_project": [],
    "model.opensource_observer.int_address_totals_by_project": [],
    "model.opensource_observer.int_user_addresses": [],
    "model.opensource_observer.int_contributors_to_project": [],
    "model.opensource_observer.int_address_rfm_segments_by_project": [
      "model.opensource_observer.int_user_addresses",
    ],
    "model.opensource_observer.int_addresses_daily_activity": [
      "model.opensource_observer.int_active_addresses_daily_to_project",
      "model.opensource_observer.int_active_addresses_monthly_to_project",
      "model.opensource_observer.int_address_totals_by_project",
    ],
    "model.opensource_observer.int_addresses_to_project": [
      "model.opensource_observer.int_address_rfm_segments_by_project",
      "model.opensource_observer.int_address_totals_by_project",
      "model.opensource_observer.int_addresses_daily_activity",
    ],
    "model.opensource_observer.int_events": [
      "model.opensource_observer.event_types_v1",
      "model.opensource_observer.int_artifacts",
      "model.opensource_observer.int_artifacts_history",
      "model.opensource_observer.int_events_with_artifact_id",
    ],
    "model.opensource_observer.int_events_with_artifact_id": [
      "model.opensource_observer.int_events_to_project",
    ],
    "model.opensource_observer.int_events_alltime_to_project": [],
    "model.opensource_observer.int_events_monthly_to_project": [
      "model.opensource_observer.int_code_metric__bus_factor",
    ],
    "model.opensource_observer.int_events_to_collection": [
      "model.opensource_observer.events_daily_to_collection",
      "model.opensource_observer.events_daily_to_collection_by_source",
    ],
    "model.opensource_observer.int_events_daily_to_project": [
      "model.opensource_observer.int_code_metric__active_developers",
      "model.opensource_observer.int_code_metric__commits_prs_issues",
      "model.opensource_observer.int_code_metric__contributors",
      "model.opensource_observer.int_code_metric__fulltime_developers_average",
      "model.opensource_observer.int_code_metric__new_contributors",
      "model.opensource_observer.int_developer_status_monthly_by_project",
      "model.opensource_observer.int_events_alltime_to_project",
      "model.opensource_observer.int_events_monthly_to_project",
      "model.opensource_observer.int_first_last_event_by_artifact",
      "model.opensource_observer.int_onchain_metric__active_addresses",
      "model.opensource_observer.int_onchain_metric__active_contracts",
      "model.opensource_observer.int_onchain_metric__days_since_first_transaction",
      "model.opensource_observer.int_onchain_metric__gas_fees",
      "model.opensource_observer.int_onchain_metric__high_low_activity_addresses",
      "model.opensource_observer.int_onchain_metric__multi_project_addresses",
      "model.opensource_observer.int_onchain_metric__new_addresses",
      "model.opensource_observer.int_onchain_metric__returning_addresses",
      "model.opensource_observer.int_onchain_metric__transactions",
      "model.opensource_observer.int_onchain_metric__trusted_transactions",
    ],
    "model.opensource_observer.int_events_to_project": [
      "model.opensource_observer.events_daily_to_artifact",
      "model.opensource_observer.events_daily_to_project",
      "model.opensource_observer.events_daily_to_project_by_source",
      "model.opensource_observer.int_addresses_daily_activity",
      "model.opensource_observer.int_addresses_to_project",
      "model.opensource_observer.int_contributors_to_project",
      "model.opensource_observer.int_events_daily_to_project",
      "model.opensource_observer.int_events_to_collection",
      "model.opensource_observer.int_repo_metrics_by_project",
      "model.opensource_observer.rf4_events_daily_to_project",
    ],
    "model.opensource_observer.int_developer_status_monthly_by_project": [],
    "model.opensource_observer.int_first_last_event_by_artifact": [],
    "model.opensource_observer.int_time_intervals": [
      "model.opensource_observer.int_address_totals_by_project",
      "model.opensource_observer.int_code_metric__active_developers",
      "model.opensource_observer.int_code_metric__bus_factor",
      "model.opensource_observer.int_code_metric__commits_prs_issues",
      "model.opensource_observer.int_code_metric__contributors",
      "model.opensource_observer.int_code_metric__fulltime_developers_average",
      "model.opensource_observer.int_code_metric__new_contributors",
      "model.opensource_observer.int_onchain_metric__active_addresses",
      "model.opensource_observer.int_onchain_metric__active_contracts",
      "model.opensource_observer.int_onchain_metric__days_since_first_transaction",
      "model.opensource_observer.int_onchain_metric__gas_fees",
      "model.opensource_observer.int_onchain_metric__high_low_activity_addresses",
      "model.opensource_observer.int_onchain_metric__multi_project_addresses",
      "model.opensource_observer.int_onchain_metric__new_addresses",
      "model.opensource_observer.int_onchain_metric__returning_addresses",
      "model.opensource_observer.int_onchain_metric__transactions",
      "model.opensource_observer.int_onchain_metric__trusted_transactions",
    ],
    "model.opensource_observer.stg_arbitrum__deployers": [],
    "model.opensource_observer.stg_ethereum__deployers": [],
    "model.opensource_observer.stg_ethereum__factories": [],
    "model.opensource_observer.stg_farcaster__addresses": [
      "model.opensource_observer.int_artifacts_by_user",
      "model.opensource_observer.rf4_openrank_trusted_users_count",
      "model.opensource_observer.rf4_trusted_users",
    ],
    "model.opensource_observer.stg_farcaster__profiles": [
      "model.opensource_observer.int_users",
    ],
    "model.opensource_observer.stg_mode__factories": [
      "model.opensource_observer.int_factories",
    ],
    "model.opensource_observer.stg_mode__proxies": [
      "model.opensource_observer.int_proxies",
      "model.opensource_observer.int_safes",
      "model.opensource_observer.rf4_4337_events",
    ],
    "model.opensource_observer.stg_mode__deployers": [
      "model.opensource_observer.int_deployers",
      "model.opensource_observer.int_deployers_by_project",
    ],
    "model.opensource_observer.stg_metal__proxies": [
      "model.opensource_observer.int_proxies",
      "model.opensource_observer.int_safes",
      "model.opensource_observer.rf4_4337_events",
    ],
    "model.opensource_observer.stg_metal__deployers": [
      "model.opensource_observer.int_deployers",
      "model.opensource_observer.int_deployers_by_project",
    ],
    "model.opensource_observer.stg_metal__factories": [
      "model.opensource_observer.int_factories",
    ],
    "model.opensource_observer.stg_lens__profiles": [
      "model.opensource_observer.int_users",
    ],
    "model.opensource_observer.stg_lens__owners": [],
    "model.opensource_observer.stg_frax__factories": [
      "model.opensource_observer.int_factories",
    ],
    "model.opensource_observer.stg_frax__deployers": [
      "model.opensource_observer.int_deployers",
      "model.opensource_observer.int_deployers_by_project",
    ],
    "model.opensource_observer.stg_frax__proxies": [
      "model.opensource_observer.int_proxies",
      "model.opensource_observer.int_safes",
      "model.opensource_observer.rf4_4337_events",
    ],
    "model.opensource_observer.stg_karma3__globaltrust": [
      "model.opensource_observer.rf4_trusted_users",
    ],
    "model.opensource_observer.stg_karma3__localtrust": [
      "model.opensource_observer.rf4_openrank_trusted_users_count",
    ],
    "model.opensource_observer.stg_passport__scores": [
      "model.opensource_observer.rf4_trusted_users",
    ],
    "model.opensource_observer.stg_pgn__deployers": [],
    "model.opensource_observer.stg_pgn__factories": [],
    "model.opensource_observer.stg_pgn__proxies": [],
    "model.opensource_observer.stg_zora__proxies": [
      "model.opensource_observer.int_proxies",
      "model.opensource_observer.int_safes",
      "model.opensource_observer.rf4_4337_events",
    ],
    "model.opensource_observer.stg_zora__deployers": [
      "model.opensource_observer.int_deployers",
      "model.opensource_observer.int_deployers_by_project",
    ],
    "model.opensource_observer.stg_zora__factories": [
      "model.opensource_observer.int_factories",
    ],
    "model.opensource_observer.stg_base__proxies": [
      "model.opensource_observer.int_proxies",
      "model.opensource_observer.int_safes",
      "model.opensource_observer.rf4_4337_events",
    ],
    "model.opensource_observer.stg_base__deployers": [
      "model.opensource_observer.int_deployers",
      "model.opensource_observer.int_deployers_by_project",
    ],
    "model.opensource_observer.stg_base__factories": [
      "model.opensource_observer.int_factories",
    ],
    "model.opensource_observer.stg_ossd__current_collections": [
      "model.opensource_observer.base_playground__ossd_collections",
      "model.opensource_observer.int_collections",
      "model.opensource_observer.int_projects_by_collection",
    ],
    "model.opensource_observer.stg_ossd__current_repositories": [
      "model.opensource_observer.base_playground__ossd_repositories",
      "model.opensource_observer.int_artifacts_in_ossd_by_project",
      "model.opensource_observer.int_repo_metrics_by_project",
      "model.opensource_observer.stg_github__distinct_main_commits",
      "model.opensource_observer.stg_github__events",
    ],
    "model.opensource_observer.stg_ossd__current_projects": [
      "model.opensource_observer.base_playground__ossd_collections",
      "model.opensource_observer.base_playground__ossd_projects",
      "model.opensource_observer.base_playground__ossd_repositories",
      "model.opensource_observer.int_artifacts_in_ossd_by_project",
      "model.opensource_observer.int_projects",
      "model.opensource_observer.int_projects_by_collection",
      "model.opensource_observer.rf4_oso_contract_discovery",
    ],
    "model.opensource_observer.stg_github__pull_requests": [
      "model.opensource_observer.int_events",
    ],
    "model.opensource_observer.stg_github__commits": [
      "model.opensource_observer.stg_github__distinct_main_commits",
    ],
    "model.opensource_observer.stg_github__distinct_main_commits": [
      "model.opensource_observer.stg_github__distinct_commits_resolved_mergebot",
    ],
    "model.opensource_observer.stg_github__issues": [
      "model.opensource_observer.int_events",
    ],
    "model.opensource_observer.stg_github__push_events": [
      "model.opensource_observer.stg_github__commits",
    ],
    "model.opensource_observer.stg_github__stars_and_forks": [
      "model.opensource_observer.int_events",
    ],
    "model.opensource_observer.stg_github__distinct_commits_resolved_mergebot":
      ["model.opensource_observer.int_events"],
    "model.opensource_observer.stg_github__events": [
      "model.opensource_observer.stg_github__issues",
      "model.opensource_observer.stg_github__pull_request_merge_events",
      "model.opensource_observer.stg_github__pull_requests",
      "model.opensource_observer.stg_github__push_events",
      "model.opensource_observer.stg_github__stars_and_forks",
    ],
    "model.opensource_observer.stg_github__pull_request_merge_events": [
      "model.opensource_observer.int_events",
      "model.opensource_observer.stg_github__distinct_commits_resolved_mergebot",
    ],
    "model.opensource_observer.stg_optimism__proxies": [
      "model.opensource_observer.int_proxies",
      "model.opensource_observer.int_safes",
      "model.opensource_observer.rf4_4337_events",
    ],
    "model.opensource_observer.stg_optimism__factories": [
      "model.opensource_observer.int_factories",
    ],
    "model.opensource_observer.stg_optimism__deployers": [
      "model.opensource_observer.int_deployers",
      "model.opensource_observer.int_deployers_by_project",
    ],
    "model.opensource_observer.stg_optimism__airdrop_addresses": [
      "model.opensource_observer.rf4_trusted_users",
    ],
    "source.opensource_observer.mode.blocks": [],
    "source.opensource_observer.mode.transactions": [
      "model.opensource_observer.int_mode_transactions",
      "model.opensource_observer.rf4_transactions_window",
      "model.opensource_observer.stg_mode__deployers",
      "model.opensource_observer.stg_mode__factories",
    ],
    "source.opensource_observer.mode.traces": [
      "model.opensource_observer.int_mode_traces",
      "model.opensource_observer.stg_mode__factories",
      "model.opensource_observer.stg_mode__proxies",
    ],
    "source.opensource_observer.github_archive.events": [
      "model.opensource_observer.stg_github__events",
    ],
    "source.opensource_observer.frax.blocks": [],
    "source.opensource_observer.frax.transactions": [
      "model.opensource_observer.int_frax_transactions",
      "model.opensource_observer.rf4_transactions_window",
      "model.opensource_observer.stg_frax__deployers",
      "model.opensource_observer.stg_frax__factories",
    ],
    "source.opensource_observer.frax.traces": [
      "model.opensource_observer.int_frax_traces",
      "model.opensource_observer.stg_frax__factories",
      "model.opensource_observer.stg_frax__proxies",
    ],
    "source.opensource_observer.superchain.optimism_traces": [
      "model.opensource_observer.int_optimism_traces",
      "model.opensource_observer.stg_optimism__factories",
      "model.opensource_observer.stg_optimism__proxies",
    ],
    "source.opensource_observer.ethereum.transactions": [
      "model.opensource_observer.stg_ethereum__deployers",
      "model.opensource_observer.stg_ethereum__factories",
    ],
    "source.opensource_observer.ethereum.traces": [
      "model.opensource_observer.stg_ethereum__factories",
    ],
    "source.opensource_observer.metal.blocks": [],
    "source.opensource_observer.metal.transactions": [
      "model.opensource_observer.int_metal_transactions",
      "model.opensource_observer.rf4_transactions_window",
      "model.opensource_observer.stg_metal__deployers",
      "model.opensource_observer.stg_metal__factories",
    ],
    "source.opensource_observer.metal.traces": [
      "model.opensource_observer.int_metal_traces",
      "model.opensource_observer.stg_metal__factories",
      "model.opensource_observer.stg_metal__proxies",
    ],
    "source.opensource_observer.gitcoin.passport_scores": [
      "model.opensource_observer.stg_passport__scores",
    ],
    "source.opensource_observer.farcaster.farcaster_verifications": [
      "model.opensource_observer.stg_farcaster__addresses",
    ],
    "source.opensource_observer.farcaster.farcaster_profiles": [
      "model.opensource_observer.stg_farcaster__profiles",
    ],
    "source.opensource_observer.pgn.blocks": [],
    "source.opensource_observer.pgn.transactions": [
      "model.opensource_observer.int_pgn_transactions",
      "model.opensource_observer.stg_pgn__deployers",
      "model.opensource_observer.stg_pgn__factories",
    ],
    "source.opensource_observer.pgn.traces": [
      "model.opensource_observer.int_pgn_traces",
      "model.opensource_observer.stg_pgn__factories",
      "model.opensource_observer.stg_pgn__proxies",
    ],
    "source.opensource_observer.ossd.projects": [
      "model.opensource_observer.base_playground__ossd_projects",
      "model.opensource_observer.stg_ossd__current_projects",
    ],
    "source.opensource_observer.ossd.collections": [
      "model.opensource_observer.base_playground__ossd_collections",
      "model.opensource_observer.stg_ossd__current_collections",
    ],
    "source.opensource_observer.ossd.repositories": [
      "model.opensource_observer.base_playground__ossd_repositories",
      "model.opensource_observer.stg_ossd__current_repositories",
    ],
    "source.opensource_observer.base.blocks": [],
    "source.opensource_observer.base.transactions": [
      "model.opensource_observer.int_base_transactions",
      "model.opensource_observer.rf4_transactions_window",
      "model.opensource_observer.stg_base__deployers",
      "model.opensource_observer.stg_base__factories",
    ],
    "source.opensource_observer.base.traces": [
      "model.opensource_observer.int_base_traces",
      "model.opensource_observer.stg_base__factories",
      "model.opensource_observer.stg_base__proxies",
    ],
    "source.opensource_observer.arbitrum.transactions": [],
    "source.opensource_observer.arbitrum.logs": [],
    "source.opensource_observer.arbitrum.receipts": [
      "model.opensource_observer.stg_arbitrum__deployers",
    ],
    "source.opensource_observer.karma3.globaltrust": [
      "model.opensource_observer.stg_karma3__globaltrust",
    ],
    "source.opensource_observer.karma3.localtrust": [
      "model.opensource_observer.stg_karma3__localtrust",
    ],
    "source.opensource_observer.lens.lens_owners": [
      "model.opensource_observer.stg_lens__owners",
    ],
    "source.opensource_observer.lens.lens_profiles": [
      "model.opensource_observer.stg_lens__profiles",
    ],
    "source.opensource_observer.zora.blocks": [],
    "source.opensource_observer.zora.transactions": [
      "model.opensource_observer.int_zora_transactions",
      "model.opensource_observer.rf4_transactions_window",
      "model.opensource_observer.stg_zora__deployers",
      "model.opensource_observer.stg_zora__factories",
    ],
    "source.opensource_observer.zora.traces": [
      "model.opensource_observer.int_zora_traces",
      "model.opensource_observer.stg_zora__factories",
      "model.opensource_observer.stg_zora__proxies",
    ],
    "source.opensource_observer.dune.arbitrum_contract_usage": [],
    "source.opensource_observer.dune.optimism_contract_usage": [],
    "source.opensource_observer.optimism.transactions": [
      "model.opensource_observer.int_optimism_transactions",
      "model.opensource_observer.stg_optimism__factories",
    ],
    "source.opensource_observer.optimism.logs": [],
    "source.opensource_observer.optimism.receipts": [
      "model.opensource_observer.int_optimism_transactions",
      "model.opensource_observer.rf4_transactions_window",
      "model.opensource_observer.stg_optimism__deployers",
    ],
    "source.opensource_observer.optimism.blocks": [
      "model.opensource_observer.int_optimism_transactions",
    ],
    "source.opensource_observer.static_data_sources.op_rf4_trusted_addresses": [
      "model.opensource_observer.rf4_events_daily_to_project",
    ],
    "source.opensource_observer.static_data_sources.optimist_nft_holders": [
      "model.opensource_observer.rf4_trusted_users",
    ],
    "source.opensource_observer.static_data_sources.agora_rf4_applications": [
      "model.opensource_observer.rf4_onchain_eligibility_checks",
    ],
    "source.opensource_observer.static_data_sources.agora_rf4_artifacts_by_app":
      [
        "model.opensource_observer.rf4_agora_contract_discovery",
        "model.opensource_observer.rf4_repos_by_app",
      ],
    "source.opensource_observer.static_data_sources.rf4_project_eligibility": [
      "model.opensource_observer.rf4_impact_metrics_by_project",
      "model.opensource_observer.rf4_onchain_eligibility_checks",
      "model.opensource_observer.rf4_oso_contract_discovery",
    ],
    "source.opensource_observer.static_data_sources.agora_rf4_repos_with_contracts":
      ["model.opensource_observer.rf4_repos_by_app"],
    "source.opensource_observer.static_data_sources.op_airdrop1_addresses_detailed_list":
      ["model.opensource_observer.stg_optimism__airdrop_addresses"],
    "source.opensource_observer.static_data_sources.op_airdrop2_addresses_detailed_list":
      ["model.opensource_observer.stg_optimism__airdrop_addresses"],
    "source.opensource_observer.static_data_sources.op_airdrop3_addresses_detailed_list":
      ["model.opensource_observer.stg_optimism__airdrop_addresses"],
    "source.opensource_observer.static_data_sources.op_airdrop4_addresses_detailed_list":
      ["model.opensource_observer.stg_optimism__airdrop_addresses"],
  },
  group_map: {},
  saved_queries: {},
  semantic_models: {},
  unit_tests: {},
};


export const metricsList = Object.entries(osoData.nodes["model.opensource_observer.onchain_metrics_by_project_v1"].columns).map(([id, {name, description}]) => ({ id, name, description}))