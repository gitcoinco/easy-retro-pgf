// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Ballot {
    id      String @id @default(cuid())
    voterId String
    roundId String

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    publishedAt DateTime?
    signature   String?

    votes Json[]

    // Only one ballot per voter and round
    @@unique([voterId, roundId])
}

enum RoundType {
    impact
    project
}

model Round {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    creatorId      String
    name           String
    description    String?
    bannerImageUrl String?
    domain         String  @unique
    type           RoundType @default(project)

    network String?
    admins  String[]

    startsAt DateTime?
    reviewAt DateTime?
    votingAt DateTime?
    resultAt DateTime?
    payoutAt DateTime?

    categories Json[]

    maxVotesTotal   Int?
    maxVotesProject Int?
    tokenAddress    String?

    calculationType   String
    calculationConfig Json?

    poolId Int?

    comments Comment[]
    voters VoterConfig[]
}

model Comment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String
    creatorId String
    projectId String

    roundId String
    round   Round  @relation(fields: [roundId], references: [id])
}

model VoterConfig {
    id              String   @id @default(cuid())
    voterId         String
    roundId         String
    maxVotesTotal   Int
    maxVotesProject Int
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    round Round @relation(fields: [roundId], references: [id])

    @@unique([voterId, roundId])
}
